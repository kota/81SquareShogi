<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="1180" height="690" backgroundColor="0xcccc77" creationComplete="{initApp()}" xmlns:eightyOneSquare="*" frameRate="24" initialize="systemManager.stage.scaleMode=StageScaleMode.SHOW_ALL">
	<mx:Style>
		global{ 
		 layoutDirection: "ltr";
		}
		Alert {
			fontSize: 13px;
			color: Black;
			backgroundColor: "0x99CCFF";
			borderColor: "0x99CCFF";
		}
		ToolTip {
			font-size: 13px;
			font-weight: "bold";
			backgroundColor: "0xFFDD00";
		}
		.header81 {
			fontFamily: "Meiryo UI";
			leading: 0;
			font-weight: "bold";
		}
	</mx:Style>
	<mx:Script>
    <![CDATA[
    import flash.display.*;
	import flash.events.Event;
	import flash.events.MouseEvent;
	import flash.events.TimerEvent;
	import flash.filters.ColorMatrixFilter;
	import flash.geom.Point;
	import flash.media.SoundTransform;
	import flash.net.FileReference;
	import flash.net.SharedObject;
	import flash.net.URLLoader;
	import flash.net.URLVariables;
	import flash.ui.Mouse;
	import flash.utils.Timer;
	import mx.utils.ObjectProxy;
	import mx.containers.Canvas;
	import mx.containers.utilityClasses.Flex;
    import mx.events.FlexEvent;
    import mx.events.CloseEvent;
    import flash.media.Sound;
    import mx.controls.*;
    import mx.managers.PopUpManager;
    import mx.core.IFlexDisplayObject;
	import com.web2memo.text.Jcode;
    import CsaShogiClient;
	import ApiClient;
	import InfoFetcher;
    import Board;
	import GameTimer;
    import ChallengeForm;
    import GameRuleEvent;
    import mx.utils.StringUtil;
	
	public const VERSION:String = "ver.2011/06/12";
	private const DIRECTORY:String = "http://81dojo.com/dojo/";
	private var _servers: Array = new Array();
	public var serverName: String;
	[Bindable]
	public var lan:ObjectProxy;
	private var _so:SharedObject = SharedObject.getLocal("81dojo");
    private var _client:CsaShogiClient;
	private var _api:ApiClient;
	private var _viewerAlone:Boolean;
    [Bindable]
    private var _game_name:String;
    private var _user_list:Array;
	private var _waiter_list:Array;
	private var _game_list:Array;
	private var _watcher_list:Array;
	private var _kifu_search_list:Array;
	private var _player_search_list:Array;
	private var _ranking_rate_list:Array;
	private var _ranking_wins_list:Array;
	private var _ranking_total_list:Array;
	private var _ranking_percentage_list:Array;
	private var _ranking_streak_list:Array;
	private var _gameHistories:Array;
    public var login_name:String;
	private var _player_infos:Array = new Array;
	private var _watch_game:Object;
	private var _challengeUser:Object;
    private var _monitoring:Boolean;
	private var _waiting:Boolean = false;
    private var _challenging:Boolean = false;
	private var _gameAccepted:Boolean = false;
	private var _rematching:Boolean = false;
	private var _leaving:Boolean = false;
	private var _panelReplayColor:uint = 0xFF88CC;
	private var _status_disconnected:Boolean = false;
	private const filterDefault:ColorMatrixFilter = new ColorMatrixFilter([1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0 ]);
	private const filterGrey:ColorMatrixFilter = new ColorMatrixFilter([0.5, 0.25, 0.25, 0,120, 0.25, 0.5, 0.25, 0,120, 0.25, 0.25, 0.5, 0,120, 0, 0, 0, 1, 0 ]);

    [Embed(source = "/sound/win.mp3")]
    private var Sound_win:Class;
    private var _sound_win:Sound = new Sound_win();
    [Embed(source = "/sound/lose.mp3")]
    private var Sound_lose:Class;
    private var _sound_lose:Sound = new Sound_lose();
    [Embed(source = "/sound/chat_lobby.mp3")]
    private var Sound_chat1:Class;
    private var _sound_chat1:Sound = new Sound_chat1();
    [Embed(source = "/sound/chat_board.mp3")]
    private var Sound_chat2:Class;
    private var _sound_chat2:Sound = new Sound_chat2();
    [Embed(source = "/sound/chat_private.mp3")]
    private var Sound_chat3:Class;
    private var _sound_chat3:Sound = new Sound_chat3();
    [Embed(source = "/sound/chat_auto.mp3")]
    private var Sound_chat4:Class;
    private var _sound_chat4:Sound = new Sound_chat4();
    [Embed(source = "/sound/door_open.mp3")]
    private var Sound_door_open:Class;
    private var _sound_door_open:Sound = new Sound_door_open();
    [Embed(source = "/sound/door_close.mp3")]
    private var Sound_door_close:Class;
    private var _sound_door_close:Sound = new Sound_door_close();
    [Embed(source = "/sound/game_start.mp3")]
    private var Sound_game_start:Class;
    private var _sound_game_start:Sound = new Sound_game_start();
    [Embed(source = "/sound/madoka_kitao/timeup.mp3")]
    private var Sound_timeup:Class;
    private var _sound_timeup:Sound = new Sound_timeup();
    [Embed(source = "/sound/challenger.mp3")]
    private var Sound_challenger:Class;
    [Embed(source = "/images/earth.png")]
    private var _icon_earth:Class
    [Embed(source = "/images/moon.png")]
    private var _icon_moon:Class
    [Embed(source = "/images/mars.png")]
    private var _icon_mars:Class
    [Embed(source = "/images/venus.png")]
    private var _icon_venus:Class
    [Embed(source = "/images/mercury.png")]
    private var _icon_mercury:Class
	[Embed(source = "/images/saturn.png")]
	private var _icon_saturn:Class
    private var _sound_challenger:Sound = new Sound_challenger();
    private var _end_sound_play:Boolean = true;
    private var _chat_sound1_play:Boolean = true;
    private var _chat_sound2_play:Boolean = true;
	private var _chat_sound3_play:Boolean = true;
	private var _prev_piece_type:int;
	private var _pmAutoOpen:Boolean = false;
	private var _accept_arrows:Boolean = true;
	private var _arrow_color:uint = 0x00CC00;
	private var _ignore_list:Array = new Array();
	private var _favorite_list:Array = new Array();
	private var _chat_auto_scroll1:Boolean = true;
	private var _chat_auto_scroll2:Boolean = true;
	private var _userMessageScrollPos1:int;
	private var _userMessageScrollPos2:int;
	private var _initPositionStr:String;
    private var _keepAliveTimer:Timer;
	private var _leaveTimer:Timer;
	private var _leaveMinutes:int;
	private var _leaveMessage:String;
	private var _infoFetcher:InfoFetcher;
	private var _pmLog:Object = new Object();
	private var _allowWatcherChat:Boolean = false;
	private var _adminLog:String = "";
	
    private var _optionWindow:OptionDialog;
	private var _newGameWindow:NewGameForm; 
	private var _playerInfoWindows:Object = new Object();
	private var _playerDetailWindow:PlayerDetailWindow;
	private var _challengerAlertWindow:ChallengerAlertWindow;
	private var _greetMenuWindow:GreetMenuWindow;
	private var _gameResultWindow:GameResultWindow;
	private var _leavePCWindow:LeavePCForm;
	private var _kifuShareWindow:KifuShareWindow;
	private var _impasseStatusWindow:ImpasseStatusWindow;
	private var _disconnectAlertWindow:DisconnectAlertWindow;
	private var _adminPanelWindow:AdminPanelWindow;

    private function initApp():void
    {
      trace("application initialized..");
	  _infoFetcher = new InfoFetcher();
      board.setMoveCallback(_playerMove);
      board.setTimeoutCallback(_checkTimeout);
	  board.setTimerLagCallback(_checkTimerLag);
	  board.setAddMyArrowCallback(_addMyArrow);
	  board.setHoverPieceCallback(_hoverPiece);
	  board.setGrabPieceCallback(_grabPiece);
	  _api = new ApiClient();
	  if (this.parameters["kid"]) {
		languageSelector.readDefault()
		login_name = "guest";
		mainViewStack.selectedIndex = 2;
		_viewerAlone = true;
		_api.addEventListener(ApiClient.KIFU_DETAIL, _handleKifuDetail);
		_api.kifuDetail(this.parameters["kid"]);
		board.kid = this.parameters["kid"];
		return;
	  }
      _client = new CsaShogiClient();
  serverListGrid.dataProvider = { 'name':"Loading..."};
  var server:Object = { 'name':"EARTH", 'description':"main", 'icon':_icon_earth, 'host':"81dojo.com", 'port':"4081", 'alive':"NO" };
  _servers.push(server);
  server = { 'name':"MARS", 'description':"sub", 'icon':_icon_mars, 'host':"81dojo.dyndns.org", 'port':"4081", 'alive':"NO" };
  _servers.push(server);
  server = { 'name':"VENUS", 'description':"sub", 'icon':_icon_venus, 'host':"81dojo.com", 'port':"4082", 'alive':"NO" };
  _servers.push(server);
  server = { 'name':"SATURN", 'description':"3X4", 'icon':_icon_saturn, 'host':"81dojo.com", 'port':"4083", 'alive':"NO" };
  _servers.push(server);
  server = { 'name':"MERCURY", 'description':"beta test", 'icon':_icon_mercury, 'host':"81dojo.com", 'port':"4084", 'alive':"NO" };
  _servers.push(server);
  server = { 'name':"MOON", 'description':"for admin", 'icon':_icon_moon, 'host':"127.0.0.1", 'port':"4081", 'alive':"YES" };
  _servers.push(server);
	  if (_so.data.savelogin) {
		  savelogin.selected = true;
		  if (_so.data.login) loginname.text = _so.data.login;
		  if (_so.data.pass) password.text = _so.data.pass;
		  if (_so.data.language) languageSelector.selectedIndex = _so.data.language;
	  }
	  languageSelector.loadLanguage();
	  _api.addEventListener(ApiClient.READ_SERVER, _handleReadServer);
	  _api.readServer();
	  var date:Date = new Date();
	  kifuSearchToChooser.selectedDate = date;
	  date.setTime(date.getTime() - (1000 * 60 * 60 * 24 * 7));
	  kifuSearchFromChooser.selectedDate = date;
      _client.addEventListener(CsaShogiClient.CONNECTED,_handleConnected);
      _client.addEventListener(CsaShogiClient.LOGIN,_handleLoggedIn);
      _client.addEventListener(CsaShogiClient.LOGIN_FAILED, _handleLoginFailed);
	  _client.addEventListener(CsaShogiClient.LOGOUT_COMPLETED, _handleLogout);
      _client.addEventListener(CsaShogiClient.GAME_STARTED,_handleGameStarted);
      _client.addEventListener(CsaShogiClient.GAME_END,_handleGameEnd);
      _client.addEventListener(CsaShogiClient.CHAT, _handleChat);
	  _client.addEventListener(CsaShogiClient.GAMECHAT, _handleGameChat);
	  _client.addEventListener(CsaShogiClient.PRIVATECHAT, _handlePrivateChat);
	  _client.addEventListener(CsaShogiClient.OFFLINE_PM, _handleOfflinePM);
      _client.addEventListener(CsaShogiClient.MOVE,_handleMove);
      _client.addEventListener(CsaShogiClient.WHO,_handleWho);
      _client.addEventListener(CsaShogiClient.MONITOR, _handleMonitor);
	  _client.addEventListener(CsaShogiClient.RECONNECT, _handleReconnect);
      _client.addEventListener(CsaShogiClient.LIST, _handleList);
      _client.addEventListener(CsaShogiClient.GAME_SUMMARY, _handleGameSummary);
      _client.addEventListener(CsaShogiClient.WATCHERS, _handleWatchers);
	  _client.addEventListener(CsaShogiClient.ENTER, _handleEnter);
	  _client.addEventListener(CsaShogiClient.LEAVE, _handleLeave);
	  _client.addEventListener(CsaShogiClient.DISCONNECT, _handleDisconnect);
	  _client.addEventListener(CsaShogiClient.CHALLENGE, _handleChallenger);
	  _client.addEventListener(CsaShogiClient.ACCEPT, _handleAccept);
	  _client.addEventListener(CsaShogiClient.DECLINE, _handleDecline);
	  _client.addEventListener(CsaShogiClient.LOBBY_IN, _handleLobbyIn);
	  _client.addEventListener(CsaShogiClient.LOBBY_OUT, _handleLobbyOut);
	  _client.addEventListener(CsaShogiClient.START, _handleStart);
	  _client.addEventListener(CsaShogiClient.ADMIN_MONITOR, _handleAdminMonitor);
	  _api.addEventListener(ApiClient.KIFU_SEARCH, _handleKifuSearch);
	  _api.addEventListener(ApiClient.KIFU_DETAIL, _handleKifuDetail);
	  _api.addEventListener(ApiClient.PLAYER_SEARCH, _handlePlayerSearch);
	  _api.addEventListener(ApiClient.PLAYER_DETAIL, _handlePlayerDetail);
	  _api.addEventListener(ApiClient.RANKING_SEARCH, _handleRankingSearch);
	  _api.addEventListener(ApiClient.LOAD_HISTORY, _handleLoadHistory);
	  _api.addEventListener(ApiClient.NOT_FOUND, _handleSearchNotFound);
	  _api.addEventListener(ApiClient.ADMIN_MONITOR, _handleAdminMonitor);
	  boardBox.addEventListener(MouseEvent.ROLL_OUT, _rollOut);
	  boardBox.addEventListener(MouseEvent.ROLL_OVER, _rollOver);
      chatMessage1.addEventListener(FlexEvent.ENTER,_handleSendChat1);
      chatMessage2.addEventListener(FlexEvent.ENTER,_handleSendChat2);
      loginname.addEventListener(FlexEvent.ENTER,_handleLogin);
      password.addEventListener(FlexEvent.ENTER, _handleLogin);
	  loginButton.addEventListener(MouseEvent.CLICK, _handleLogin);
	  playerSearchNameText.addEventListener(FlexEvent.ENTER, _handlePlayerSearchEnter);
	  board.name_labels[0].addEventListener(MouseEvent.DOUBLE_CLICK, _gamePlayerInfo);
	  board.name_labels[1].addEventListener(MouseEvent.DOUBLE_CLICK, _gamePlayerInfo);
      _user_list = new Array();
      userListGrid.dataProvider = _user_list;
    }
	
	//=========================================================
	//                   EVENT HANDLERS for Client.as
	//=========================================================

	//----------------------------------------------------------------------------------------------------------------------------- CONNECTION
    private function _handleConnected(e:Event):void {
	  loginButton.enabled = false;
      loginMessage.text = "Logging in...";
      _client.login(loginname.text, password.text);
      login_name = loginname.text;
    } 

    private function _handleLoggedIn(e:ServerMessageEvent):void {
	  if (savelogin.selected) {
		  _so.data.savelogin = true;
		  _so.data.login = loginname.text;
		  _so.data.pass = password.text;
		  _so.data.language = languageSelector.selectedIndex;
		  _so.data.server = serverListGrid.selectedIndex;
		  _so.flush();
	  }
      loginMessage.text = "Logged in Successfully";
	  clock.start();
	  if (InfoFetcher.admins.indexOf(login_name.toLowerCase()) >= 0) { adminButton.visible = true; _client.adminOn(); _api.adminOn(); }
      mainViewStack.selectedIndex = 1;
	  _infoFetcher.addEventListener("loadComplete", _handleLoadOption);
	  _infoFetcher.loadSettings(login_name.toLowerCase());
      _keepAliveTimer = new Timer(81000);
      _keepAliveTimer.addEventListener(TimerEvent.TIMER,_handleKeepAlive);
	  _refresh();
	  if (_infoFetcher.initMessage != null) {
		_writeUserMessage(_infoFetcher.initMessage + "\n", 1, "#008800");
		if (VERSION != _infoFetcher.newestVer) _writeUserMessage("CAUTION: This version is old! The newest is " + _infoFetcher.newestVer + ". Please reload!\n", 1, "#FF0000");
	  } else {
		  _writeUserMessage("Couldn't load initial condition file. Please refresh.\n", 1, "#008800");
	  }
	  var rank:String = "a " + InfoFetcher.makeRankFromRating(e.message.split(":")[1]);
	  if (parseInt(e.message.split(":")[3]) + parseInt(e.message.split(":")[4]) < 10) rank = "a new player";
	  for (var i:int = 0; i < _infoFetcher.titleUser.length; i++) {
		  if (_infoFetcher.titleUser[i] == login_name.toLowerCase()) {
			  rank = "the " + _infoFetcher.titleName[i];
			  break;
		  }
	  }
//	  if (!login_name.match(/^test\d$/)) _sendAutoChat("I've logged in. Hello. I'm " + rank + " from " + InfoFetcher.country_names[e.message.split(":")[2]] + ".");
	  _writeUserMessage("Current status: R" + e.message.split(":")[1] + ", " + e.message.split(":")[3] + " win - " + e.message.split(":")[4] + " loss, " + Math.max(0, e.message.split(":")[5]) + " streak (best: " + e.message.split(":")[6] + ")\n", 1, "#008800", true);
	  if (parseInt(e.message.split(":")[2]) <= 4) _writeUserMessage("Please register your country\n", 1, "#FF0000");
	  if (login_name.match(/\-/)) _writeUserMessage("Having '-' in your nickname causes bug. Please ask admin to change your ID.\nIDにハイフンが含まれているとバグが発生することが判明しています。管理者にID変更を依頼して下さい。\n", 1, "#FF0000", true);
    }

    private function _handleLoginFailed(e:ServerMessageEvent):void{
      loginMessage.text = "";
      errorMessage.text = e.message;
	  loginButton.enabled = true;
    }

		private function _handleLogout(e:ServerMessageEvent):void {
		_keepAliveTimer.stop();
		loginMessage.text = "logged out successfully";
		titleBanner.source = DIRECTORY + "images/81Dojo_bye.jpg";
		mainViewStack.selectedIndex = 0;
//		loginButton.enabled = true;
	}

	//----------------------------------------------------------------------------------------------------------------------------- INFO

    private function _handleWho(e:ServerMessageEvent):void{                               //<<<<<< Handle WHO response
      var users:Array = e.message.split("\n");
      var user_list:Array = new Array();
	  var waiter_list:Array = new Array();
      for each(var user_data:String in users){
        if(user_data.match("##[WHO] +OK") != null){
          break;
        }
        trace("user_data:" + user_data);
        var match:Array = user_data.match(/\#\#\[WHO\] (.*) x1 (.*)/);
        if(match != null){
          var user:Object = {
			  'name':match[1],
			  'status':StringUtil.trim(match[2].split(" ")[0]),
			  'status2':"",
			  'opponent':"",
			  'game_name':match[2].split(" ")[1],
			  'turn':match[2].split(" ")[2],
			  'rating':parseInt(match[2].split(" ")[3]),
			  'country_code':parseInt(match[2].split(" ")[4]),
			  'titleName':"",
			  'titleSubName':"",
			  'monitor_game':match[2].split(" ")[6],
			  'moves':parseInt(match[2].split(" ")[7]),
			  'wins':parseInt(match[2].split(" ")[8]),
			  'losses':parseInt(match[2].split(" ")[9]), 
			  'streak':parseInt(match[2].split(" ")[10]), 
			  'streak_best':parseInt(match[2].split(" ")[11]),
			  'favorite':"",
			  'favoriteWidth':0
			  }
		  user.country = InfoFetcher.country_names[user.country_code];
		  user.country3 = InfoFetcher.country_names3[user.country_code];
		  user.flagURL = DIRECTORY + "images/flags_ss/" + String(user.country_code + 1000).substring(1) + ".png";
		  user.opponent = match[2].split(" ")[5] == "*" ? "" : match[2].split(" ")[5];
		  if (user.name == login_name) {
			  user.favorite = "◆";
			  user.favoriteWidth = 11;
			  if (_status_disconnected) user.status2 = "D";
		  } else if (_favorite_list.indexOf(user.name.toLowerCase()) >= 0) {
			  user.favorite = "★";
			  user.favoriteWidth = 11;
		  }
		  if (user.monitor_game != "*") user.status2 = "M ";
          if(user.status == "game_waiting" || user.status == "game" || user.status == "post_game"){
            var game_info:Array = user.game_name.match(/^([0-9a-z]+?)_(.*)-([0-9]*)-([0-9]*)$/);
            var total:int = parseInt(game_info[3]) / 60;
//			var hc:String;
//			if (game_info[1] == "r") {
//				hc = "R";
//			} else if (game_info[1].match(/^hc/)) {
//				hc = "HC";
//			} else {
//				hc = "NR";
//			}
//            user.rule = hc + ": " + total + "-" + game_info[4];
            if(user.status == "game_waiting" && !user.game_name.match(/_@/)){
              user.status2 += "W";
            } else if (user.status == "post_game") {
				user.status2 = "P "; // + (user.turn == "+" ? "▲" : "△");
			} else {
              user.status2 = "G " + InfoFetcher.textBar(user.moves);
			  //for (var i:int = 1; i <= int(user.moves / 3); i++) user.status2 += "|";// + user.moves; // + (user.turn == "+" ? "▲" : "△");
            }
          }
		  if (user.name != login_name && _infoFetcher.cheaters.indexOf(user.name.toLowerCase()) >= 0) user.titleName = "!!!";
		  var userProxy:ObjectProxy = new ObjectProxy(user);
          user_list.push(userProxy);
        }
      }
	  for (var j:int = 0; j < _infoFetcher.titleUser.length; j++) {
		  for (var i:int = 0; i < user_list.length; i++) {
			  if (user_list[i].name.toLowerCase() == _infoFetcher.titleUser[j]) {
				  user_list[i].titleName = _infoFetcher.titleName[j];
				  user_list[i].titleSubName = _infoFetcher.titleSubName[j];
				  if (_infoFetcher.titleAvatar[j] != "*") {
					  user_list[i].avatar = _infoFetcher.titleAvatar[j];
				  }
				  break;
			  }
		  }
	  }
      user_list.sortOn("rating", Array.NUMERIC | Array.DESCENDING);
	  for (i = 0; i < user_list.length; i++) {
		  if (user_list[i].wins + user_list[i].losses >= 10 || user_list[i].titleName != "") {
			  user_list[i].rank = InfoFetcher.makeRankFromRating(user_list[i].rating);
			  user_list[i].rankColor = InfoFetcher.makeColorFromRating(user_list[i].rating);
		  } else {
			  user_list[i].rank = "-";
			  user_list[i].rankColor = 0xCCCCCC;
		  }
//		  if (user_list[i].rank == "PRO" && user_list[i].titleName == "") user_list[i].titleName = "livebot";
		  if (user_list[i].status2.match(/W/)) {
			  user = {
				  'name':user_list[i].name,
				  'turn':user_list[i].turn,
				  'rating':user_list[i].rating,
				  'game_name': user_list[i].game_name,
				  'country': user_list[i].country,
				  'country3':InfoFetcher.country_names3[user_list[i].country_code],
				  'flagURL': DIRECTORY + "images/flags_s/" + String(user_list[i].country_code + 1000).substring(1) + ".gif",
				  'rankColor': user_list[i].rankColor
				  }
			  if (user_list[i].wins + user_list[i].losses < 10) user.rating = "*" + String(user.rating);
		  	  game_info = user.game_name.match(/^([0-9a-z]+?)_(.*)-([0-9]*)-([0-9]*)$/);
			  total = parseInt(game_info[3]) / 60;
			  if (game_info[1] == "r") {
				  user.rated = "R"
			  } else {
				  user.rated = "NR"
			  }
			  user.handicap = InfoFetcher.gameTypeShort(game_info[1]);
			  if (game_info[2].match(/\-\-..$/)) {
				user.time = InfoFetcher.fetchTournamentJp(game_info[2].substr(game_info[2].length - 2, 2));
				user.timeTip = InfoFetcher.fetchTournamentEn(game_info[2].substr(game_info[2].length - 2, 2));
			  } else {
				user.time = total + "-" + game_info[4];
				user.timeTip = "";
			  }
			  userProxy = new ObjectProxy(user);
			  waiter_list.push(userProxy);
		  }
	  }
	  for (i = 0; i < user_list.length; i++) {
		  if (user_list[i].wins + user_list[i].losses < 10 && user_list[i].rating < InfoFetcher.rank_thresholds[1]) user_list[i].rating = "*" + String(user_list[i].rating);
	  }
	  _user_list = user_list;
      userListGrid.dataProvider = _user_list;
      for (i = 0; i < user_list.length; i++) {
        if (_user_list[i].name == login_name) {
          userListGrid.selectedIndex = i;
		  userListGrid.callLater(_scrollDownUser);
//		  userListGrid.scrollToIndex(i);
          break;
        }
      }
	  userListPanel.title = serverName + " : " + lan.lobby + " (" + _user_list.length + " players)";
//	  waiter_list.sortOn("rating", Array.NUMERIC | Array.DESCENDING);
	  _waiter_list = waiter_list;
	  waiterListGrid.dataProvider = _waiter_list;
    }

    private function _handleList(e:ServerMessageEvent):void{                                 //<<<<<< Handle LIST response
	  var game_list:Array = new Array();
	  var lines:Array = e.message.split("\n");
        for each(var line:String in lines) {
		  if (line.match(/^##\[LIST\] \+OK$/)) break;
          var tokens:Array = line.split(" ");
          var game:Object = {
			  'id':tokens[1], //line.substr(9),
			  'blackName':tokens[1].split("+")[2],
			  'whiteName':tokens[1].split("+")[3],
			  'blackRating':parseInt(tokens[3]),
			  'whiteRating':parseInt(tokens[4]),
			  'blackCountryCode':parseInt(tokens[5]),
			  'whiteCountryCode':parseInt(tokens[6]),
			  'watchers':parseInt(tokens[10]),
			  'watcher_names':'',
			  'blackTitle':"",
			  'whiteTitle':"",
			  'blackColor': tokens[8] == "true" ? 0x000000 : 0x999999,
			  'whiteColor': tokens[9] == "true" ? 0x000000 : 0x999999,
			  'blackDecoration': undefined,
			  'whiteDecoration': undefined,
			  'blackFlagFilter': tokens[8] == "true" ? filterDefault : filterGrey,
			  'whiteFlagFilter': tokens[9] == "true" ? filterDefault : filterGrey
			  }
		  if (tokens[7] == "created") {
			  continue;
		  } else if (tokens[7] == "game") {
			  game.status = parseInt(tokens[2]);
			  if (login_name.toLowerCase() == game.blackName && tokens[8] != "true") _status_disconnected = true;
			  else if (login_name.toLowerCase() == game.whiteName && tokens[9] != "true") _status_disconnected = true;
		  } else {
			  game.status = "End";
			  if (tokens[7] == "win") {
				  game.blackDecoration = "underline";
			  } else if (tokens[7] == "lose") {
				  game.whiteDecoration = "underline";
			  }
		  }
		  if (tokens[11]) {
			  game.opening = InfoFetcher.openingNameJp(tokens[11]);
			  game.opening_en = InfoFetcher.openingNameEn(tokens[11]);
		  }
		  var user:Object;
		  if ((user = _findPlayerFromList(game.blackName))) {
			game.blackWins = user.wins;
			game.blackLosses = user.losses;
			game.blackStreakBest = user.streak_best;
		  }
		  if ((user = _findPlayerFromList(game.whiteName))) {
			game.whiteWins = user.wins;
			game.whiteLosses = user.losses;
			game.whiteStreakBest = user.streak_best;
		  }
		  game.blackCountry = InfoFetcher.country_names[game.blackCountryCode];
		  game.blackFlagURL = DIRECTORY + "images/flags_s/" + String(game.blackCountryCode + 1000).substring(1) + ".gif";
		  game.whiteCountry = InfoFetcher.country_names[game.whiteCountryCode];
		  game.whiteFlagURL = DIRECTORY + "images/flags_s/" + String(game.whiteCountryCode + 1000).substring(1) + ".gif";
		  for (var i:int = 0; i < _infoFetcher.titleName.length; i++) {
				if (game.blackName.toLowerCase() == _infoFetcher.titleUser[i]) {
					game.blackTitle = _infoFetcher.titleName[i];
					if (_infoFetcher.titleAvatar[i] != "*") game.blackAvatar = _infoFetcher.titleAvatar[i];
				}
				if (game.whiteName.toLowerCase() == _infoFetcher.titleUser[i]) {
					game.whiteTitle = _infoFetcher.titleName[i];
					if (_infoFetcher.titleAvatar[i] != "*") game.whiteAvatar = _infoFetcher.titleAvatar[i];
				}
		  }
		  if (game.watchers > 0) {
			  i = 0;
			  for each (user in _user_list) {
				  if (game.id == user.monitor_game) {
					  game.watcher_names += (user.name + " (" + InfoFetcher.country_names3[user.country_code] + ")\n");
					  i += 1;
					  if (i >= game.watchers) break;
				  }
			  }
		  }
		  game.maxRating = Math.max(game.blackRating, game.whiteRating);
		  if (game.blackColor == 0x999999 || game.whiteColor == 0x999999) game.maxRating -= 3000;
		  if (game.blackRating == 0) {
			  game.blackRank = "-";
			  game.blackRankColor = 0x999999;
			  game.blackRating = 1000;
			if ((user = _findPlayerFromList(game.blackName))) game.blackRating = user.rating;
		  } else {
			game.blackRank = InfoFetcher.makeRankFromRating(game.blackRating);
			game.blackRankColor = InfoFetcher.makeColorFromRating(game.blackRating);
		  }
		  if (game.whiteRating == 0) {
			  game.whiteRank = "-";
			  game.whiteRankColor = 0x999999;
			  game.whiteRating = 1000;
			  if ((user = _findPlayerFromList(game.whiteName))) game.whiteRating = user.rating;
		  } else {
			  game.whiteRank = InfoFetcher.makeRankFromRating(game.whiteRating);
			  game.whiteRankColor = InfoFetcher.makeColorFromRating(game.whiteRating);
		  }
		  var game_info:Array = game.id.split("+")[1].match(/^([0-9a-z]+)_(.*)-([0-9]*)-([0-9]*)$/);
		  var total:int = parseInt(game_info[3]) / 60;
		  var hc:String;
		  if (game_info[1] == "r") {
			hc = "R";
		  } else if (game_info[1].match(/^hc/)) {
			hc = "HC";
			game.opening = InfoFetcher.gameTypeJp(game_info[1]);
			game.opening_en = InfoFetcher.gameTypeShort(game_info[1]);
		  } else {
			hc = "NR";
			if (game_info[1] != "nr") {
				game.opening = InfoFetcher.gameTypeJp(game_info[1]);
				game.opening_en = InfoFetcher.gameTypeShort(game_info[1]);
			}
		  }
		  if (game_info[2].match(/\-\-..$/)) {
			game.rule = InfoFetcher.fetchTournamentJp(game_info[2].substr(game_info[2].length - 2, 2));
			game.ruleTip = InfoFetcher.fetchTournamentEn(game_info[2].substr(game_info[2].length - 2, 2));
		  } else {
			game.rule = hc + ": " + ((total < 10) ? " " : "") + total + "-" + game_info[4];
			game.ruleTip = "";
		  }
		  var gameProxy:ObjectProxy = new ObjectProxy(game);
		  game_list.push(gameProxy);
        }
		game_list.sortOn("maxRating", Array.NUMERIC | Array.DESCENDING);
		for (i = 0; i < game_list.length; i++) game_list[i].gameNo = i + 1;
		_game_list = game_list;
		gameListGrid.dataProvider = _game_list;
    }

    private function _handleWatchers(e:ServerMessageEvent):void{
      var watchers:Array = e.message.split("\n");
      var watcher_list:Array = new Array();
      for each(var watcher_data:String in watchers){
        if(watcher_data.match(/^##\[WATCHERS\] \+OK$/)){
          break;
        }
        var watcher:Object = new Object();
        var match:Array = watcher_data.match(/^##\[WATCHERS\] (.*) (\d+) (\d+)$/);
        if(match){
          watcher.name = match[1];
		  watcher.rate = parseInt(match[2]);
		  watcher.country = InfoFetcher.country_names[parseInt(match[3])];
		  watcher.country3 = InfoFetcher.country_names3[parseInt(match[3])];
		  watcher.flagURL = DIRECTORY + "images/flags_ss/" + String(parseInt(match[3]) + 1000).substr(1) + ".png";
		  watcher.favorite = "";
		  watcher.favoriteWidth = 0;
		  if (watcher.name == login_name) {
			  watcher.favorite = "◆";
			  watcher.favoriteWidth = 11;
		  } else if (_favorite_list.indexOf(watcher.name.toLowerCase()) >= 0) {
			  watcher.favorite = "★";
			  watcher.favoriteWidth = 11;
		  }
          watcher_list.unshift(watcher);
        }
      }
      watcher_list.sortOn("rate", Array.NUMERIC | Array.DESCENDING);
	  _watcher_list = watcher_list;
      watcherListGrid.dataProvider = _watcher_list;
	  watcherListTitle.text = lan.watchers + " (" + _watcher_list.length +")";
    }
	
	private function _handleLobbyIn(e:ServerMessageEvent):void {
		var tokens:Array = e.message.split(",");
		var rank:String
		if (tokens[2] == "true") {
			rank = "A new player";
		} else {
			rank = "A " + InfoFetcher.makeRankFromRating(tokens[1]);
			for (var i:int = 0; i < _infoFetcher.titleUser.length; i++) {
			  if (_infoFetcher.titleUser[i] == tokens[0].toLowerCase()) {
				  rank = "The " + _infoFetcher.titleName[i];
				  break;
			  }
			}
		}
		var isFavorite:Boolean = _favorite_list.indexOf(tokens[0].toLowerCase()) >= 0;
		_writeUserMessage("  -  [" + tokens[0] + "] logged in. " + rank + " from " + InfoFetcher.country_names[tokens[3]] + ".\n", 1, "#008800", isFavorite);
		if (mainViewStack.selectedIndex == 1 && _chat_sound1_play) {
			if (isFavorite) _sound_door_open.play();
			else _sound_chat4.play();
		}
		var user:Object = {
			'name':tokens[0],
			'status':"", 'status2':"", 'opponent':"", 'game_name':"*", 'turn':0,
			'rating':(tokens[2] == "true" ? "*" : "") + tokens[1],
			'country_code':parseInt(tokens[3]),
			'titleName':"", 'titleSubName':"", 'monitor_game':"*", 'moves':0,
			'wins':parseInt(tokens[4]),
			'losses':parseInt(tokens[5]),
			'streak':parseInt(tokens[6]),
			'streak_best':parseInt(tokens[7]),
			'favorite':"",
			'favoriteWidth':0
		  }
		user.country = InfoFetcher.country_names[user.country_code];
		user.country3 = InfoFetcher.country_names3[user.country_code];
		user.flagURL = DIRECTORY + "images/flags_ss/" + String(user.country_code + 1000).substring(1) + ".png";
		if (_favorite_list.indexOf(user.name.toLowerCase()) >= 0) {
			user.favorite = "★";
			user.favoriteWidth = 11;
		}
		for (i = 0; i < _infoFetcher.titleUser.length; i++) {
			if (user.name.toLowerCase() == _infoFetcher.titleUser[i]) {
				user.titleName = _infoFetcher.titleName[i];
				user.titleSubName = _infoFetcher.titleSubName[i];
				if (_infoFetcher.titleAvatar[i] != "*") user.avatar = _infoFetcher.titleAvatar[i];
				break;
			}
		}
		if (user.wins + user.losses >= 10 || user.titleName != "") {
			user.rank = InfoFetcher.makeRankFromRating(user.rating);
			user.rankColor = InfoFetcher.makeColorFromRating(user.rating);
		} else {
			user.rank = "-";
			user.rankColor = 0xCCCCCC;
		}
		_user_list.push(user);
		userListGrid.dataProvider = _user_list;
		userListPanel.title = serverName + " : " + lan.lobby + " (" + _user_list.length + " players)";
	}
	
	private function _handleLobbyOut(e:ServerMessageEvent):void {
		if (mainViewStack.selectedIndex == 1) {
			var isFavorite:Boolean = _favorite_list.indexOf(e.message.toLowerCase()) >= 0;
//			_writeUserMessage("  -  " + e.message + " left.\n", 1, "#008800", isFavorite);
//			if (_chat_sound1_play && isFavorite) _sound_door_close.play();
			if (isFavorite) {
				_writeUserMessage("  -  " + e.message + " left.\n", 1, "#008800", true);
				if (_chat_sound1_play) _sound_door_close.play();
			}
		}
		for (var i:int = 0; i < _user_list.length; i++){
			if (_user_list[i].name == e.message) {
				_user_list.splice(i, 1);
				userListGrid.dataProvider = _user_list;
				break;
			}
		}
		for (i = 0; i < _waiter_list.length; i++){
			if (_waiter_list[i].name == e.message) {
				_waiter_list.splice(i, 1);
				waiterListGrid.dataProvider = _waiter_list;
				break;
			}
		}
		userListPanel.title = serverName + " : " + lan.lobby + " (" + _user_list.length + " players)";
	}
	
	private function _handleStart(e:ServerMessageEvent):void {
		if (mainViewStack.selectedIndex == 1) {
			var tokens:Array = e.message.split(",");
			_writeUserMessage("GAME STARTED: ▲" + tokens[0] + " vs △" + tokens[3] + "\n", 1, "#008800");
			if (_chat_sound1_play) {
				if (_favorite_list.indexOf(tokens[0].toLowerCase()) >= 0 || _favorite_list.indexOf(tokens[3].toLowerCase()) >= 0) _sound_game_start.play();
				else _sound_chat1.play();
			}
		}
		for (var i:int = 0; i < _user_list.length; i++){
			if (_user_list[i].name == tokens[0] || _user_list[i].name == tokens[3]) {
				_user_list[i].status2 = "G " + InfoFetcher.textBar(0);
			}
		}
		for (i = _waiter_list.length - 1; i >= 0; i--){
			if (_waiter_list[i].name == tokens[0] || _waiter_list[i].name == tokens[3]) _waiter_list.splice(i, 1);
		}
		waiterListGrid.dataProvider = _waiter_list;
	}
	
	private function _handleAdminMonitor(e:ServerMessageEvent):void {
		_adminLog += e.message;
		if (_adminLog.length > 20000) _adminLog = _adminLog.substr(1000);
		if (_adminPanelWindow) _adminPanelWindow.showLog(_adminLog);
	}
	
	//----------------------------------------------------------------------------------------------------------------------------- MATCH MAKING

	private function _handleChallenger(e:ServerMessageEvent):void {
	  if (_gameAccepted) {
		  _client.decline("Already starting a game.");
		  return;
	  }
      _sound_challenger.play();
      _challengerAlertWindow = ChallengerAlertWindow(PopUpManager.createPopUp(this, ChallengerAlertWindow, true));
      PopUpManager.centerPopUp(_challengerAlertWindow);
	  _challengerAlertWindow.challenger = e.message.split(",")[0];
	  _challengerAlertWindow.country = InfoFetcher.country_names[e.message.split(",")[1]];
	  _challengerAlertWindow.countryCode = String(parseInt(e.message.split(",")[1]) + 1000).substr(1);
	  _challengerAlertWindow.rate = e.message.split(",")[2];
	  _challengerAlertWindow.rank = InfoFetcher.makeRankFromRating(parseInt(e.message.split(",")[2]));
	  _challengerAlertWindow.rankColor = InfoFetcher.makeColorFromRating(parseInt(e.message.split(",")[2]));
      _challengerAlertWindow.addEventListener("accept", _handleChallengerAcceptButton);
	  _challengerAlertWindow.addEventListener("decline", _handleChallengerRejectButton);
	  _challengerAlertWindow.startTimer();
	}
	
	private function _handleChallengerAcceptButton(e:Event):void {
		_client.accept();
		_gameAccepted = true;
		_challengerAlertWindow = null;
	}
  
	private function _handleChallengerRejectButton(e:Event):void {
		_client.decline(e.target.declineComment);
		_challengerAlertWindow = null;
	}
	
	private function _handleDecline(e:ServerMessageEvent):void {
		_writeUserMessage(e.message + "\n", 1, "#008800", true);
		_challenging = false;
		if (_challengerAlertWindow) {
			_challengerAlertWindow.terminate();
			_challengerAlertWindow = null;
		}
	}
	
	private function _handleAccept(e:ServerMessageEvent):void {
		_gameAccepted = true;
		_writeUserMessage(e.message + "\n", 1, "#008800", true);
		if (_challengeUser) _client.seek(_challengeUser);
	}
  
   private function _handleGameSummary(e:ServerMessageEvent):void {
	  _gameAccepted = false;
	  _refresh();
	  _initPositionStr = "";
	  for each(var line:String in e.message.split("\n")) {
		  if (line.match(/^P[0-9\+\-]/)) _initPositionStr += line + "\n";
	  }
	  _client.agree();
  }

    private function _handleGameStarted(e:ServerMessageEvent):void {
	  _waiting = false;
	  _challenging = false;
	  _rematching = false;
	  if(_game_name && _monitoring){
        _client.monitorOff(_game_name);
        _monitoring = false;
		board.closeGame();
      } else if (board.viewing) {
		  board.closeGame();
		  chatMessage2.enabled = true;
		  board.viewing = false;
	  }
	  board.post_game = false;
	  board.isStudyHost = false;
	  for (var j:int = 0; j < 2 ; j++) {
		_player_infos[j] = _findPlayerFromList(_client.playerNames[j]);
	  }
      var match:Array = e.message.match(/^START:(.*)\+(.*)-([0-9]*)-([0-9]*)/);
      _game_name = e.message.split(":")[1];
	  board.kid = parseInt(e.message.split(":")[2]);
	  if (_game_name.split("+")[1].match(/^r_/)) {
		  board.gameType = "r";
	  } else if (_game_name.split("+")[1].match(/^nr_/)) {
		  board.gameType = "nr";
	  } else if (_game_name.split("+")[1].match(/^hc/)) {
		  board.gameType = "hc";
	  } else if (_game_name.split("+")[1].match(/^(va.+?)_/)) {
		  board.gameType = _game_name.split("+")[1].match(/^(va.+?)_/)[1];
	  }
	  if (board.gameType == "r") {
		  allowWatcherChatCheckbox.visible = false;
	  } else {
		  _allowWatcherChat = true;
		  allowWatcherChatCheckbox.selected = true;
		  allowWatcherChatCheckbox.visible = true;
	  }
	  if (board.gameType == "hc" || String(_player_infos[0].rating).match(/^\*/)) {
		  board.superior = Kyokumen.GOTE;
	  } else if (String(_player_infos[1].rating).match(/^\*/)) {
		  board.superior = Kyokumen.SENTE;
	  } else if (_player_infos[0].rating > _player_infos[1].rating) {
		  board.superior = Kyokumen.SENTE;
	  } else {
		  board.superior = Kyokumen.GOTE;
	  }
      board.startGame(_initPositionStr, _client.myTurn, _player_infos,match[3], match[4]);
	  _client.watchers(_game_name);
	  userMessage2.htmlText = "";
	  _writeUserMessage(_infoFetcher.gameMessage + "\n", 2, "#008800");
	  if (match[2].match(/\-\-..$/)) _imgUserMessage(DIRECTORY + "images/banners/" + match[2].substr(match[2].length - 2, 2) + ".jpg", 2);
      if(_client.myTurn == Kyokumen.SENTE){
        _writeUserMessage("You are Black " + (board.gameType == "hc" ? "(Handicap taker).\n" : "(Sente).\n"), 2, "#008800");
      } else {
        _writeUserMessage("You are White " + (board.gameType == "hc" ? "(Handicap giver).\n" : "(Gote).\n"), 2, "#008800");
      }
	  startButton.enabled = false;
      stopButton.enabled = false;
      closeButton.enabled = false;
      resignButton.enabled = true;
	  reverseButton.enabled = false;
	  greetButton.visible = true;
	  rematchButton.visible = false;
	  shareKifuButton2.visible = false;
      rewindAllButton.enabled = false;
      rewindOneButton.enabled = false;
      forwardOneButton.enabled = false;
      forwardAllButton.enabled = false;
      kifuDataGrid.selectable = false;
	  logoutButton.enabled = false;
      kifuDataGrid.dataProvider = board.kifu_list;
      mainViewStack.selectedIndex = 2;
	  radioKifuListen.selected = true;
	  radioKifuListen.enabled = false;
	  radioKifuReplay.enabled = false;
	  board.onListen = true;
	  sidePanel.setStyle('borderColor', undefined);
	  if (board.piece_type == 4) _sendAutoChat("Pieces set to Blind, Middle.");
	  else if (board.piece_type == 5) _sendAutoChat("Pieces set to Blind, Hard.");
	  else if (board.piece_type == 6) _sendAutoChat("Pieces set to Blind, Extreme.");
    }

    private function _handleReconnect(e:ServerMessageEvent):void {
	  _waiting = false;
	  _challenging = false;
	  _rematching = false;
	  board.post_game = false;
	  board.isStudyHost = false;
//	  for (var j:int = 0; j < 2 ; j++) {
//		_player_infos[j] = _findPlayerFromList(_client.playerNames[j]);
//	  }
	  var blackInfo:Object = {
		  'name':_watch_game.blackName,
		  'rating':_watch_game.blackRating,
		  'rank':_watch_game.blackRank,
		  'titleName':_watch_game.blackTitle,
		  'country_code':_watch_game.blackCountryCode,
		  'labelColor':_watch_game.blackColor,
		  'wins':_watch_game.blackWins,
		  'losses':_watch_game.blackLosses,
		  'streak_best':_watch_game.blackStreakBest,
		  'game_name':_game_name.split("+")[1]
	  }
	  var whiteInfo:Object = {
		  'name':_watch_game.whiteName,
		  'rating':_watch_game.whiteRating,
		  'rank':_watch_game.whiteRank,
		  'titleName':_watch_game.whiteTitle,
		  'country_code':_watch_game.whiteCountryCode,
		  'labelColor':_watch_game.whiteColor,
		  'wins':_watch_game.whiteWins,
		  'losses':_watch_game.whiteLosses,
		  'streak_best':_watch_game.whiteStreakBest,
		  'game_name':_game_name.split("+")[1]
	  }
	  _player_infos[0] = blackInfo;
	  _player_infos[1] = whiteInfo;

	  if (_game_name.split("+")[1].match(/^r_/)) {
		  board.gameType = "r";
	  } else if (_game_name.split("+")[1].match(/^nr_/)) {
		  board.gameType = "nr";
	  } else if (_game_name.split("+")[1].match(/^hc/)) {
		  board.gameType = "hc";
	  } else if (_game_name.split("+")[1].match(/^(va.+?)_/)) {
		  board.gameType = _game_name.split("+")[1].match(/^(va.+?)_/)[1];
	  }
	  if (board.gameType == "r") {
		  allowWatcherChatCheckbox.visible = false;
	  } else {
		  _allowWatcherChat = true;
		  allowWatcherChatCheckbox.selected = true;
		  allowWatcherChatCheckbox.visible = true;
	  }
	  if (board.gameType == "hc" || String(_player_infos[0].rating).match(/^\*/)) {
		  board.superior = Kyokumen.GOTE;
	  } else if (String(_player_infos[1].rating).match(/^\*/)) {
		  board.superior = Kyokumen.SENTE;
	  } else if (_player_infos[0].rating > _player_infos[1].rating) {
		  board.superior = Kyokumen.SENTE;
	  } else {
		  board.superior = Kyokumen.GOTE;
	  }
	  match = _game_name.split("+")[1].match(/\-(\d+)\-(\d+)$/);
	  var total:int = parseInt(match[1]); // parseInt(_game_name.split("+")[1].split("-")[1]);
	  var byoyomi:int = parseInt(match[2]); //parseInt(_game_name.split("+")[1].split("-")[2]);
	  var end_game:Boolean = false;
	  var result:String = "";
	  var moves:Array = new Array();
	  for each (var line:String in e.message.split("\n")) {
		  var match:Array;
		  if ((match = line.match(/^##\[RECONNECT\]\[(.+)\]\sTo_Move\:(\+|\-)$/))) {
			  board.kid = parseInt(match[1]);
			  _initPositionStr = "P0" + match[2] + "\n";
		  } else if ((match = line.match(/^##\[RECONNECT\]\[.+\]\s(P[0-9\+\-].*)$/))) {
			  _initPositionStr += match[1] + "\n";	  
		  } else if ((match = line.match(/^##\[RECONNECT\]\[.+\]\s([-+][0-9]{4}.{2}|%TORYO)$/))) {
			  var move_and_time:Object = new Object();
			  move_and_time.move = match[1];
			  moves.push(move_and_time);
		  } else if ((match = line.match(/^##\[RECONNECT\]\[.+\]\s(T.*)$/))) {
			  Object(moves[moves.length - 1]).time = match[1];
		  } else if (line.match(/#SENTE_WIN$/)) {
			  end_game = true;
			  result = _client.myTurn == Kyokumen.SENTE ? "WIN" : "LOSE";
		  } else if (line.match(/#GOTE_WIN$/)) {
			  end_game = true;
			  result = _client.myTurn == Kyokumen.SENTE ? "LOSE" : "WIN";
		  } else if (line.match(/#DRAW$/)) {
			  end_game = true;
			  result = "DRAW";
		  } else if ((match = line.match(/SINCE_LAST_MOVE:(\d+)/))) {
			  board.since_last_move = parseInt(match[1]);
		  }	  
	  }
	  radioKifuListen.selected = true;
	  radioKifuListen.enabled = false;
	  radioKifuReplay.enabled = false;
	  board.onListen = true;
	  sidePanel.setStyle('borderColor', undefined);
	  
	  board.startGame(_initPositionStr, _client.myTurn, _player_infos, total, byoyomi, moves);
	  
	  _client.watchers(_game_name);
	  userMessage2.htmlText = "";
	  _writeUserMessage(_infoFetcher.gameMessage + "\n", 2, "#008800");
	  _writeUserMessage("Reconnected to game.\n", 2, "#008800", true);
	  startButton.enabled = false;
      stopButton.enabled = false;
      closeButton.enabled = false;
      resignButton.enabled = true;
	  reverseButton.enabled = false;
	  greetButton.visible = true;
	  rematchButton.visible = false;
	  shareKifuButton2.visible = false;
      rewindAllButton.enabled = false;
      rewindOneButton.enabled = false;
      forwardOneButton.enabled = false;
      forwardAllButton.enabled = false;
      kifuDataGrid.selectable = false;
	  logoutButton.enabled = false;
      kifuDataGrid.dataProvider = board.kifu_list;
      mainViewStack.selectedIndex = 2;
	  if (board.piece_type == 4) _sendAutoChat("Pieces set to Blind, Middle.");
	  else if (board.piece_type == 5) _sendAutoChat("Pieces set to Blind, Hard.");
	  else if (board.piece_type == 6) _sendAutoChat("Pieces set to Blind, Extreme.");

	  if (end_game) {
		  var kifuMove:Object = new Object();
		  if (e.message.indexOf("#TIME_UP") >= 0) {
			board.timeout();
			_writeUserMessage((board.last_pos.turn == Kyokumen.SENTE ? "Black: " : "White: ") + "Time up.\n", 2, "#DD0088");
			kifuMove.num = board.kifu_list.length;
			kifuMove.move = (board.last_pos.turn == Kyokumen.SENTE ? "▲" : "△") + "Time up";
			kifuMove.moveKIF = "切れ負け";
			board.kifu_list.push(kifuMove);
		  } else if (e.message.indexOf("#DISCONNECT") >= 0) {
			  _writeUserMessage("Player disconnected.\n", 2, "#DD0088");
		  } else if(e.message.indexOf("#ILLEGAL_MOVE") >= 0){
			_writeUserMessage("Illegal Move.\n", 2, "#DD0088");
			kifuMove.num = board.kifu_list.length;
			kifuMove.move = "Illegal Move";
			kifuMove.moveKIF = "相手の反則にて勝ち";
			board.kifu_list.push(kifuMove);
		  } else if (e.message.indexOf("#RESIGN") >= 0) {
			  _writeUserMessage((board.last_pos.turn == Kyokumen.SENTE ? "Black" : "White")  + " resigned.\n", 2, "#DD0088");
		  } else if (e.message.indexOf("#OUTE_SENNICHITE") >= 0) {
			  _writeUserMessage("Illegal Perpetual Check.\n", 2, "#DD0088");
			  kifuMove.num = board.kifu_list.length;
			  kifuMove.move = "Perpetual Check";
			  kifuMove.moveKIF = "王手千日手";
			  board.kifu_list.push(kifuMove);		  
		  } else if (e.message.indexOf("#SENNICHITE") >= 0) {
			  _writeUserMessage("Sennichite. (Repetition)\n", 2, "#DD0088");
			  kifuMove.num = board.kifu_list.length;
			  kifuMove.move = "Repetition Draw";
			  kifuMove.moveKIF = "千日手";
			  board.kifu_list.push(kifuMove);
		  }
		  board.post_game = true;
		  radioKifuReplay.enabled = true;
		  radioKifuListen.enabled = true;
		  if (result == "LOSE") {
//			if (board.playerInfos[0].rank != "-" && board.playerInfos[1].rank == "-") _openGameResultWindow(-2);
//			else _openGameResultWindow(-1);
			board.infoBoxes[1].setStyle('borderThickness', 2);
			board.infoBoxes[1].setStyle('borderColor', 0xFF0000);
			_writeUserMessage("### You Lose ###\n", 2, "#DD0088", true);
			if (_end_sound_play) _sound_lose.play();
		  } else if (result == "WIN") {
//			board.isStudyHost = true;
//			if (board.playerInfos[0].rank == "-" && board.playerInfos[1].rank != "-") _openGameResultWindow(2);
//			else _openGameResultWindow(1);
			board.infoBoxes[0].setStyle('borderThickness', 2);
			board.infoBoxes[0].setStyle('borderColor', 0xFF0000);
			_writeUserMessage("### You Win ###\n", 2, "#DD0088", true);
			if (_end_sound_play) _sound_win.play();
		  } else if (result == "DRAW") {
//			if (board.my_turn == Kyokumen.GOTE) board.isStudyHost = true;
//			_openGameResultWindow(0);
			_writeUserMessage("### Draw ###\n", 2, "#DD0088", true);
			if (_end_sound_play) _sound_win.play();
		  }
//		  if (board.gameType == "hc") {
//			  if (board.my_turn == Kyokumen.GOTE) {
//				  board.isStudyHost = true;
//			  } else {
//				  board.isStudyHost = false;
//			  }
//		  }
//		  if (board.isStudyHost) {
//			_writeUserMessage("You are the host of Study Mode. Your board is shared.\n", 2, "#008800", true);
//			board.onListen = false;
//			radioKifuReplay.selected = true;
//			radioKifuListen.enabled = false;
//			sidePanel.setStyle('borderColor', _panelReplayColor);
//		  }
		  closeButton.enabled = true;
		  resignButton.enabled = false;
		  rematchButton.visible = true;
		  shareKifuButton2.visible = true;
		  rewindAllButton.enabled = true;
		  rewindOneButton.enabled = true;
		  forwardOneButton.enabled = true;
		  forwardAllButton.enabled = true;
		  startButton.enabled = true;
		  kifuDataGrid.dataProvider = board.kifu_list;
		  kifuDataGrid.scrollToIndex(board.kifu_list.length+1);
		  kifuDataGrid.selectable = true;
		  kifuDataGrid.selectedIndex = board.kifu_list.length;
//		  if (board.isStudyHost) _sendStudy();
		  board.endGame();
	  } else {
		  board.timers[board.my_turn == board.last_pos.turn ? 0 : 1].accumulateTime(board.since_last_move);
	  }
    }
	
    private function _handleGameEnd(e:ServerMessageEvent):void {
      var kifuMove:Object = new Object();
	  if (_disconnectAlertWindow) {
		  _disconnectAlertWindow.terminate();
		  _disconnectAlertWindow = null;
	  }
	  board.post_game = true;
      kifuMove.num = board.kifu_list.length;
      if (e.message.indexOf("TIME_UP") >= 0) {
		if (GameTimer.soundType == 2) _sound_timeup.play();
        board.timeout();
        //_writeUserMessage("Time up.\n",2);
		if (board.position.turn == board.my_turn) _sendAutoChat("Time out.");
        kifuMove.move = (board.position.turn == Kyokumen.SENTE ? "▲" : "△") + "Time up";
        kifuMove.moveKIF = "切れ負け";
        board.kifu_list.push(kifuMove);
	  } else if (e.message.indexOf("DISCONNECT") >= 0) {
        _writeUserMessage("Opponent disconnected.\n", 2, "#DD0088");
      } else if(e.message.indexOf("ILLEGAL_MOVE") >= 0){
        _writeUserMessage("Illegal Move.\n", 2, "#DD0088");
          kifuMove.move = "Illegal Move";
          kifuMove.moveKIF = "相手の反則にて勝ち";
          board.kifu_list.push(kifuMove);
      } else if (e.message.indexOf("RESIGN") >= 0) {
        _writeUserMessage((board.position.turn == board.my_turn ? "You" : "Opponent") + " resigned.\n", 2, "#DD0088");
      } else if (e.message.indexOf("OUTE_SENNICHITE") >= 0) {
        _writeUserMessage("Illegal Perpetual Check.\n", 2, "#DD0088");
		kifuMove.move = "Perpetual Check";
		kifuMove.moveKIF = "王手千日手";
		board.kifu_list.push(kifuMove);
      } else if (e.message.indexOf("SENNICHITE") >= 0) {
        _writeUserMessage("Sennichite. (Repetition)\n", 2, "#DD0088");
		kifuMove.move = "Repetition Draw";
		kifuMove.moveKIF = "千日手";
		board.kifu_list.push(kifuMove);
      }
	  radioKifuReplay.enabled = true;
	  radioKifuListen.enabled = true;
      if (e.message.indexOf("LOSE") >= 0) {
		if (board.playerInfos[0].rank != "-" && board.playerInfos[1].rank == "-") _openGameResultWindow(-2);
		else _openGameResultWindow(-1);
		board.infoBoxes[1].setStyle('borderThickness', 2);
		board.infoBoxes[1].setStyle('borderColor', 0xFF0000);
        _writeUserMessage("### You Lose ###\n", 2, "#DD0088", true);
        if (_end_sound_play) _sound_lose.play();
      } else if (e.message.indexOf("WIN") >= 0) {
		board.isStudyHost = true;
		if (board.playerInfos[0].rank == "-" && board.playerInfos[1].rank != "-") _openGameResultWindow(2);
		else _openGameResultWindow(1);
		board.infoBoxes[0].setStyle('borderThickness', 2);
		board.infoBoxes[0].setStyle('borderColor', 0xFF0000);
        _writeUserMessage("### You Win ###\n", 2, "#DD0088", true);
        if (_end_sound_play) _sound_win.play();
      } else if (e.message.indexOf("DRAW") >= 0) {
		if (board.my_turn == Kyokumen.GOTE) board.isStudyHost = true;
		_openGameResultWindow(0);
        _writeUserMessage("### Draw ###\n", 2, "#DD0088", true);
        if (_end_sound_play) _sound_win.play();
      }
	  if (board.gameType == "hc") {
		  if (board.my_turn == Kyokumen.GOTE) {
			  board.isStudyHost = true;
		  } else {
			  board.isStudyHost = false;
		  }
	  }
	  if (board.isStudyHost) {
		_writeUserMessage("You are the host of Study Mode. Your board is shared.\n", 2, "#008800", true);
		board.onListen = false;
		radioKifuReplay.selected = true;
		radioKifuListen.enabled = false;
		sidePanel.setStyle('borderColor', _panelReplayColor);
	  }
	  allowWatcherChatCheckbox.visible = false;
      closeButton.enabled = true;
      resignButton.enabled = false;
	  rematchButton.visible = true;
	  shareKifuButton2.visible = true;
      rewindAllButton.enabled = true;
      rewindOneButton.enabled = true;
      forwardOneButton.enabled = true;
      forwardAllButton.enabled = true;
	  startButton.enabled = true;
	  kifuDataGrid.scrollToIndex(0);
      kifuDataGrid.dataProvider = board.kifu_list;
      kifuDataGrid.selectable = true;
      kifuDataGrid.selectedIndex = board.kifu_list.length - 1;
      kifuDataGrid.callLater(_scrollDownKifu); //kifuDataGrid.scrollToIndex(board.kifu_list.length+1);
	  if (board.isStudyHost) _sendStudy();
      board.endGame();
	  _status_disconnected = false;
    }

	private function _openGameResultWindow(v:int):void {
	  _gameResultWindow = GameResultWindow(PopUpManager.createPopUp(board, GameResultWindow, false));
      PopUpManager.centerPopUp(_gameResultWindow);
	  _gameResultWindow.initWindow(board.playerInfos[board.my_turn], board.playerInfos[1 - board.my_turn], board.kifu_list.length < 5 ? "hoge+nr_hoge-0-30+hoge1+hoge2+111" : _game_name, v);
	}

    private function _handleMove(e:ServerMessageEvent):void {
	  board.clearArrows(Board.ARROWS_PUBLIC);
	  if (e.message.match(/%TORYO/)) {
		  var kifuMove:Object = new Object;
//		        _writeUserMessage((board.position.turn == board.my_turn ? "You" : "Opponent") + " resigned.\n", 2, "#DD0088");
			kifuMove.num = board.kifu_list.length;
			kifuMove.move = (board.position.turn == Kyokumen.SENTE ? "▲" : "△") + "Resign (" + e.message.split(",T")[1] + ")";
			kifuMove.moveKIF = "投了   ( " + int(e.message.split(",T")[1]/60) + ":" + e.message.split(",T")[1] % 60 + "/)";
			board.kifu_list.push(kifuMove);
	  } else {
		if (board.since_last_move > 0) {
			board.timers[board.my_turn == board.last_pos.turn ? 0 : 1].accumulateTime(- board.since_last_move);
			board.since_last_move = 0;
		}
		board.makeMove(e.message, true, true);
	  }
	  kifuDataGrid.dataProvider = board.kifu_list;
      kifuDataGrid.scrollToIndex(board.kifu_list.length + 1);
	  if (_impasseStatusWindow) {
		  board.position.calcImpasse();
		  _impasseStatusWindow.setStatus(board.position.impasseStatus, board.position.turn == board.my_turn ? board.my_turn : -1);
	  }
    }
  
//--------------------------------------------------------------------------------------------------------------------------------- CHAT 
    private function _handleChat(e:ServerMessageEvent):void {
		var sender:String = e.message.substr(8).match(/^\[(.+?)\]\s.*$/)[1];
		var match:Array;
		if ((match = e.message.match(/\[\#\#BROADCAST\](.+)$/))) {
			if (InfoFetcher.admins.indexOf(sender.toLowerCase()) >= 0) {
				_writeUserMessage("###BROADCAST###\n" + match[1] + "\n", 1, "#FF0000", true);
				_writeUserMessage("###BROADCAST###\n" + match[1] + "\n", 2, "#FF0000", true);
				_sound_chat3.play();
			}
			return;
		}
		if (_ignore_list.indexOf(sender.toLowerCase()) >= 0) return;
		if (_infoFetcher.banned.indexOf(sender.toLowerCase()) >= 0) return;
		if (_favorite_list.indexOf(sender.toLowerCase()) >= 0) {
			_writeUserMessage(e.message.substr(8), 1, "#DD7700");
		} else if (e.message.match(/\[auto\-chat\]/)) {
			_writeUserMessage(e.message.substr(8), 1, "#888888");
		} else if (sender == login_name) {
			_writeUserMessage(e.message.substr(8), 1, "#0033DD");
		} else {
			_writeUserMessage(e.message.substr(8), 1, "#000000");
		}
		if (mainViewStack.selectedIndex == 1 && _chat_sound1_play) {
//			if (e.message.match(/\[auto\-chat\]/)) {
//				if (_favorite_list.indexOf(sender.toLowerCase()) >= 0) _sound_door_open.play();
//				else _sound_chat4.play();
//			} else {
				_sound_chat1.play();
//			}
		}
	}
	
    private function _handleGameChat(e:ServerMessageEvent):void {
		if (!_game_name) return;
		var sender:String = e.message.substr(12).match(/^\[(.+?)\]\s.*$/)[1];
		var match:Array;
		if ((match = e.message.match(/\[\#\#HOVER\](\d+),(\d+)$/))) {
			if (sender != login_name && board.onListen) board.handleHover(match[1], match[2]);
		} else if ((match = e.message.match(/\[\#\#GRAB\](\d+),(\d+)$/))) {
			if (sender != login_name && board.onListen) board.handleGrab(match[1], match[2]);
		} else if ((match = e.message.match(/\[\#\#STUDY\](\d+)\/(.+)$/))) {
			_handleStudy(match[1], match[2]);
		} else if ((match = e.message.substr(12).match(/^\[.+\]\s\[##ARROW\]CLEAR$/))) {
			if (sender != login_name) board.clearArrows(Board.ARROWS_PUBLIC, sender);
		} else if ((match = e.message.substr(12).match(/^\[.+\]\s\[##ARROW\](.+),(.+),(.+),(.+),(.+),(.+)$/))) {
			if (_ignore_list.indexOf(sender.toLowerCase()) >= 0) return;
			if (!_accept_arrows && sender != login_name) return;
			if (_isDuringMyGame()) return; // (board.isPlayer && !board.post_game) return;
			if (board.post_game && !board.studyOn) return;
			if (sender == login_name) sender = "";
			if (board.isStudyHost || board.onListen) {
				board.addArrow(parseInt(match[1]), new Point(Number(match[2]), Number(match[3])), new Point(Number(match[4]), Number(match[5])), uint(match[6]), sender,Board.ARROWS_PUBLIC, true);
			} else {
				board.addArrow(parseInt(match[1]), new Point(Number(match[2]), Number(match[3])), new Point(Number(match[4]), Number(match[5])), uint(match[6]), sender,Board.ARROWS_PUBLIC);
			}
		} else if ((match = e.message.substr(12).match(/^\[.+\]\s\[##M_(IN|OUT)\](\d+),(\d+)$/))) {
			if (sender != login_name) {
				if (sender == board.name_labels[0].text) {
					if (match[1] == "OUT") {
						board.name_labels[0].setStyle("color", 0x555555);
					} else {
						board.name_labels[0].setStyle("color", 0x000000);
					}
				} else if (sender == board.name_labels[1].text) {
					if (match[1] == "OUT") {
						board.name_labels[1].setStyle("color", 0x555555);
					} else {
						board.name_labels[1].setStyle("color", 0x000000);
					}
				}
			}
			trace(sender + "-" + match[1] + "-" + match[2] + "-" + match[3]);
		} else if ((match = e.message.substr(12).match(/^\[.+\]\s\[##GIVEHOST\](.+)$/))) {
			if (match[1] == login_name) {
				board.isStudyHost = true;
				_writeUserMessage("You are the host of Study Mode. Your board is shared.\n", 2, "#008800", true);
				board.onListen = false;
				radioKifuReplay.selected = true;
				radioKifuListen.enabled = false;
				sidePanel.setStyle('borderColor', _panelReplayColor);
				_sendStudy();
			}
		} else if ((match = e.message.substr(12).match(/^\[(.+)\]\s\[##REMATCH\]$/))) {
			if (match[1] == board.playerInfos[0].name) {
				board.rematch[0] = true;
			} else if (match[1] == board.playerInfos[1].name) {
				board.rematch[1] = true;
			}
			if (board.post_game && board.rematch[0] && board.rematch[1]) {
				_writeUserMessage("Rematch Agreed.\n", 2, "#008800", true);
				board.rematch[0] == false;
				board.rematch[1] == false;
				trace(board.isPlayer);
				if (board.isPlayer) {
					_client.closeGame();
					board.closeGame();
					_rematching = true;
					_client.rematch(_game_name.split("+")[1], board.my_turn);
				}
			}
		} else {
			if (_ignore_list.indexOf(sender.toLowerCase()) >= 0) return;
			if (_infoFetcher.banned.indexOf(sender.toLowerCase()) >= 0) return;
			if (sender == board.playerInfos[0].name) {
				_writeUserMessage(e.message.substr(12), 2, "#000000"); if (_chat_sound2_play) _sound_chat2.play();
			} else if (sender == board.playerInfos[1].name) {
				_writeUserMessage(e.message.substr(12), 2, "#666666"); if (_chat_sound2_play) _sound_chat2.play();
			} else if (sender == login_name) {
				_writeUserMessage(e.message.substr(12), 2, "#0033DD"); if (_chat_sound2_play) _sound_chat2.play();
			} else if (_isDuringMyGame() && !_allowWatcherChat) {
			} else if (_favorite_list.indexOf(sender.toLowerCase()) >= 0) {
				_writeUserMessage(e.message.substr(12), 2, "#DD7700"); if (_chat_sound2_play) _sound_chat2.play();
			} else {
				_writeUserMessage(e.message.substr(12), 2, "#660000"); if (_chat_sound2_play) _sound_chat2.play();
			}
		}
    }
	
	private function _handlePrivateChat(e:ServerMessageEvent):void {
		var match:Array;
		match = e.message.substr(15).match(/^\[(.+?)\]\s(.+)$/);
		var name:String = match[1];
		var message:String = match[2];
		if ((match = e.message.match(/\[\#\#STUDY\](\d+)\/(.+)$/))) {
			_handleStudy(match[1], match[2]);
			return;
		}
		if (_ignore_list.indexOf(name.toLowerCase()) >= 0) return;
		if (_infoFetcher.banned.indexOf(name.toLowerCase()) >= 0) return;
		if (_pmAutoOpen && !_playerInfoWindows[name]) _openPlayerInfo(_findPlayerFromList(name));
		_writePmLog(name, message, "#FF0000");
		if (_playerInfoWindows[name]) {
			_playerInfoWindows[name].maximize();
			_playerInfoWindows[name].pmText = _pmLog[name];
			_playerInfoWindows[name].pmCheckBox.selected = true;
			_playerInfoWindows[name].togglePM();
			_playerInfoWindows[name].pmTextArea.setStyle('backgroundColor', 0xFFFFBB);
			_playerInfoWindows[name].callLater(_playerInfoWindows[name].scrollDown);
		} else if (mainViewStack.selectedIndex == 1 || mainViewStack.selectedIndex == 3) {
			_writeUserMessage("PM: " + e.message.substr(15), 1, "#FF0000");
		} else if (mainViewStack.selectedIndex == 2) {
			_writeUserMessage("PM: " + e.message.substr(15), 2, "#FF0000");
		}
		if (_chat_sound3_play) _sound_chat3.play();
		if (_leaving) {
			if (_findPlayerFromList(name)) {
				var hour:int = (_leaveMinutes - _leaveTimer.currentCount) / 60;
				var minute:int = (_leaveMinutes - _leaveTimer.currentCount) % 60;
				_sendPrivateChat(name, "(auto-reply) " + _leaveMessage + " (Will be back in " + hour + " hours " + minute + " minutes.)");
			}
		}
	}
	
	private function _handleStudy(base:int, branch:String):void {
		if (!board.studyOn) board.studyOn = true;
		board.clearArrows(Board.ARROWS_PUBLIC);
		if (board.isStudyHost) return;
		board.studyOrigin = base;
		if (branch == "*") {
			if (board.study_list.length > 0) board.study_list = new Array();
			if (!(board.post_game && board.onListen)) return;
			if (board.kifu_list_self.length > 0) {
				board.kifu_list_self = new Array();
				kifuDataGrid.dataProvider = board.kifu_list;
			}
			kifuDataGrid.selectedIndex = base;
			board.replayMoves(base, true);
			kifuDataGrid.scrollToIndex(kifuDataGrid.selectedIndex);
		} else {
			board.study_list = branch.split("/");
			if (!(board.post_game && board.onListen)) return;
			if (board.kifu_list_self.length > 0) board.kifu_list_self = new Array();
			for (var i:int = 0; i <= base; i++) board.kifu_list_self.push(board.kifu_list[i]);
			board.replayMoves(base, true);
			for (i = 0; i < board.study_list.length; i++) board.makeMove(board.study_list[i] + ",T0", false, false);
			kifuDataGrid.dataProvider = board.kifu_list_self;
			kifuDataGrid.selectedIndex = board.kifu_list_self.length - 1;
			kifuDataGrid.scrollToIndex(kifuDataGrid.selectedIndex);
		}
	}
	
	private function _handleOfflinePM(e:ServerMessageEvent):void {
		_writeUserMessage("<Offline Private Messages>\n", 1, "#FF0000");
		for each (var line:String in e.message.split("\n")) {
			var match:Array;
			if (line.match(/^##\[OFFLINE_PM\] \+OK$/)) break;
			if ((match = line.match(/^##\[OFFLINE_PM\](.+)$/))) _writeUserMessage(match[1] + "\n", 1, "#FF0000");
		}
	}
	
//--------------------------------------------------------------------------------------------------------------------------------- GAME ROOM 
	private function _handleEnter(e:ServerMessageEvent):void {
		if (e.message == board.playerInfos[0].name) {
			if (_disconnectAlertWindow) {
				_disconnectAlertWindow.terminate();
				_disconnectAlertWindow = null;
			}
			_writeUserMessage(e.message + " entered.\n", 2, "#000000", true);
			board.name_labels[board.my_turn].setStyle("color", 0x000000);
			if (_chat_sound2_play) _sound_door_open.play();
		} else if (e.message == board.playerInfos[1].name) {
			if (_disconnectAlertWindow) {
				_disconnectAlertWindow.terminate();
				_disconnectAlertWindow = null;
			}
			_writeUserMessage(e.message + " entered.\n", 2, "#666666", true);
			board.name_labels[1 - board.my_turn].setStyle("color", 0x000000);
			if (_chat_sound2_play) _sound_door_open.play();
		} else {
			if (mainViewStack.selectedIndex != 2) return;
			_writeUserMessage(e.message + " entered.\n", 2, "#008800");
			if (_chat_sound2_play && _favorite_list.indexOf(e.message.toLowerCase()) >= 0) _sound_door_open.play();
		}
		if (board.isStudyHost && board.post_game) _sendStudy(e.message);
	}
	
	private function _handleLeave(e:ServerMessageEvent):void {
		if (mainViewStack.selectedIndex != 2) return;
		if (board.playerInfos[0] == null) return;
		if (e.message == board.playerInfos[0].name) {
			_writeUserMessage(e.message + " left.\n", 2, "#000000", true);
			board.name_labels[board.my_turn].setStyle("color", 0x999999);
			if (_chat_sound2_play) _sound_door_close.play();
		} else if (e.message == board.playerInfos[1].name) {
			_writeUserMessage(e.message + " left.\n", 2, "#666666", true);
			board.name_labels[1 - board.my_turn].setStyle("color", 0x999999);
			if (_chat_sound2_play) _sound_door_close.play();
		} else {
			_writeUserMessage(e.message + " left.\n", 2, "#008800");
			if (_chat_sound2_play && _favorite_list.indexOf(e.message.toLowerCase()) >= 0) _sound_door_close.play();
			for (var i:int = 0; i < _watcher_list.length; i++){
				if (_watcher_list[i].name == e.message) {
					_watcher_list.splice(i, 1);
					watcherListGrid.dataProvider = _watcher_list;
					break;
				}
			}
		}
	}
	
	private function _handleDisconnect(e:ServerMessageEvent):void {
//		if (mainViewStack.selectedIndex != 2) return;
		if (board.playerInfos[0] == null) return;
		if (e.message == board.playerInfos[0].name) {
			_writeUserMessage(e.message + " disconnected.\n", 2, "#000000", true);
			board.name_labels[board.my_turn].setStyle("color", 0x999999);
			if (_chat_sound2_play) _sound_door_close.play();
		} else if (e.message == board.playerInfos[1].name) {
			_writeUserMessage(e.message + " disconnected.\n", 2, "#666666", true);
			board.name_labels[1 - board.my_turn].setStyle("color", 0x999999);
			if (_chat_sound2_play) _sound_door_close.play();
		}
		if (_isDuringMyGame() && e.message != login_name) _openDisconnectAlertWindow();
	}
	
	private function _openDisconnectAlertWindow():void {
	  _disconnectAlertWindow = DisconnectAlertWindow(PopUpManager.createPopUp(board, DisconnectAlertWindow, false));
      PopUpManager.centerPopUp(_disconnectAlertWindow);
	  _disconnectAlertWindow.addEventListener("declare", _handleDisconnectDeclare);
	  _disconnectAlertWindow.startTimer();
	}
	
	private function _handleDisconnectDeclare(e:Event):void {
		_client.declare();
	}

    private function _format_message(message:String):String{
      message = message.substr(8);
      var match:Array = message.match(/(\[.+?\]) ([^ ]+?\+[^ ]+?\-[0-9]+?\-[0-9]+?\+[^ ]+?\+[^ ]+?\+[0-9]*) (.*)/);
      if(match != null){
        message = match[1] + " " + match[3] + "\n";
      }
      return message;
    }

    private function _handleMonitor(e:ServerMessageEvent):void {
      var kifuMove:Object = new Object();
	  var end_game:Boolean = false;
	  board.clearArrows(Board.ARROWS_PUBLIC);
	  if (_watch_game != null) board.monitor(e.message, _watch_game);
	  if (_impasseStatusWindow) {
		  board.position.calcImpasse();
		  _impasseStatusWindow.setStatus(board.position.impasseStatus, -1);
	  }
      if(e.message.indexOf("#TIME_UP") >= 0){
		end_game = true;
        board.timeout();
        _writeUserMessage((board.last_pos.turn == Kyokumen.SENTE ? "Black: " : "White: ") + "Time up.\n", 2, "#DD0088");
		kifuMove.num = board.kifu_list.length;
        kifuMove.move = (board.last_pos.turn == Kyokumen.SENTE ? "▲" : "△") + "Time up";
        kifuMove.moveKIF = "切れ負け";
        board.kifu_list.push(kifuMove);
	  } else if (e.message.indexOf("#DISCONNECT") >= 0) {
		  end_game = true;
		  _writeUserMessage("Player disconnected.\n", 2, "#DD0088");
      } else if(e.message.indexOf("#ILLEGAL_MOVE") >= 0){
		end_game = true;
        _writeUserMessage("Illegal Move.\n", 2, "#DD0088");
		kifuMove.num = board.kifu_list.length;
		kifuMove.move = "Illegal Move";
		kifuMove.moveKIF = "相手の反則にて勝ち";
		board.kifu_list.push(kifuMove);
      } else if (e.message.indexOf("#RESIGN") >= 0) {
		  end_game = true;
		  _writeUserMessage((board.last_pos.turn == Kyokumen.SENTE ? "Black" : "White")  + " resigned.\n", 2, "#DD0088");
	  } else if (e.message.indexOf("#OUTE_SENNICHITE") >= 0) {
		  end_game = true;
          _writeUserMessage("Illegal Perpetual Check.\n", 2, "#DD0088");
		  kifuMove.num = board.kifu_list.length;
		  kifuMove.move = "Perpetual Check";
		  kifuMove.moveKIF = "王手千日手";
		  board.kifu_list.push(kifuMove);		  
      } else if (e.message.indexOf("#SENNICHITE") >= 0) {
		  end_game = true;
          _writeUserMessage("Sennichite. (Repetition)\n", 2, "#DD0088");
		  kifuMove.num = board.kifu_list.length;
		  kifuMove.move = "Repetition Draw";
		  kifuMove.moveKIF = "千日手";
		  board.kifu_list.push(kifuMove);
      }
	  if (board.onListen || !String(kifuDataGrid.selectedItem.num).match(/^\*/)) {
		  var i:int = kifuDataGrid.selectedIndex >= 0 ? kifuDataGrid.selectedIndex : 0;
		  kifuDataGrid.scrollToIndex(0);
		  kifuDataGrid.dataProvider = board.kifu_list;
		  kifuDataGrid.selectedIndex = board.onListen ? (board.kifu_list.length - 1) : i;
		  kifuDataGrid.callLater(_scrollDownKifu);
	  }
	  if (end_game) {
			board.post_game = true;
			radioKifuReplay.enabled = true;
			radioKifuListen.enabled = true;
			shareKifuButton2.visible = true;
			if (e.message.indexOf("#SENTE_WIN") >= 0) {
				board.infoBoxes[board.my_turn == Kyokumen.SENTE ? 0 : 1].setStyle('borderThickness', 2);
				board.infoBoxes[board.my_turn == Kyokumen.SENTE ? 0 : 1].setStyle('borderColor', 0xFF0000);
			} else if (e.message.indexOf("#GOTE_WIN") >= 0) {
				board.infoBoxes[board.my_turn == Kyokumen.GOTE ? 0 : 1].setStyle('borderThickness', 2);
				board.infoBoxes[board.my_turn == Kyokumen.GOTE ? 0 : 1].setStyle('borderColor', 0xFF0000);
			}
			_writeUserMessage("### Game End ###\n", 2, "#DD0088", true);
			if (_end_sound_play) _sound_win.play();
			board.endGame();
	  } else {
		  var match:Array;
		  if ((match = e.message.match(/SINCE_LAST_MOVE:(\d+)/))) {
			board.since_last_move = parseInt(match[1]);
			board.timers[board.my_turn == board.last_pos.turn ? 0 : 1].accumulateTime(board.since_last_move);
		  }
	  }
    }

	//=========================================================
	//                   CONTROLS for VIEWSTACK INDEX = 0
	//=========================================================
    private function _connectAndLogin():void {
	  var serverObj:Object = serverListGrid.selectedItem;
	  if (serverObj.alive == "NO") return;
	  serverName = serverObj.name;
	  if (serverName == "SATURN") {
		  Alert.show("SATURN is 3X4 server.\nUse 3X4 applet to enter.");
		  return;
	  }
	  userListPanel.titleIcon = serverObj.icon;
      trace("connecting.");
      loginMessage.text = "Connecting...";
      errorMessage.text = "";
	  _client.setServer(serverObj.host, parseInt(serverObj.port));
	  if (serverName == "MOON") _api.setHostToLocal();
      _client.connect();
    }
	
    private function _handleLogin(e:Event):void {
	  if (_infoFetcher.banned.indexOf(loginname.text.toLowerCase()) >= 0) return;
      _connectAndLogin();
    }
	
	private function _testLogin(i:int):void {
		loginname.text = "test" + i;
		password.text = "81dojo" + i;
		_connectAndLogin();
	}
	
	private function _handleReadServer(e:Event):void {
		for each (var server:Object in _servers) {
			for each (var data:Object in e.target.bufferData) {
				if (server.name == data.name) {
					if (data.population < 0) {
						server.population = "";
						server.alive = "NO";
					} else {
						if (server.name == "EARTH" && data.population <= 15) server.population = "15↓";
						else server.population = data.population;
						server.alive = "YES";
					}
					break;
				}
			}
		}
		serverListGrid.dataProvider = _servers;
		serverListGrid.selectedIndex = 0;
		if (_so.data.savelogin && _so.data.server) serverListGrid.selectedIndex = _so.data.server;
	}
	
	//=========================================================
	//                   CONTROLS for VIEWSTACK INDEX = 1
	//=========================================================
    private function _refresh(loadList:Boolean = true):void {
	  _keepAliveTimer.reset();
	  _keepAliveTimer.start();
      _client.who();
	  if (loadList) _client.list();
	  if (_game_name) _client.watchers(_game_name);
    }
	
    private function _newGameForm():void{
      _newGameWindow = NewGameForm(PopUpManager.createPopUp(this, NewGameForm, true));
      with (_newGameWindow) {
		_newGameWindow.x = mouseX;
		_newGameWindow.y = mouseY + 50;
        title = "Create new game";
		if (_so.data.rule_base != null) {
			timeSetting.selectedValue = _so.data.rule_base;
		} else {
			timeSetting.selectedValue = 1;
		}
		toggleTimeSelection();
		if (_so.data.rule_total) nonrated_total.selectedIndex = _so.data.rule_total;
		if (_so.data.rule_byoyomi) nonrated_byoyomi.selectedIndex = _so.data.rule_byoyomi;
		if (_so.data.rule_handicap) nonrated_handicap.selectedIndex = _so.data.rule_handicap;
		addEventListener(GameRuleEvent.RULE_SELECTED,_handleRuleSelected);
      }
    }
  
    private function _stopWaiting():void {
	  _waiting = false;
      _client.stopWaiting();
      _refresh(false);
      stopButton.enabled = false;
    }

	private function _showOptions():void {
	  _prev_piece_type = board.piece_type;
      _optionWindow = OptionDialog(PopUpManager.createPopUp(this, OptionDialog, true));
      PopUpManager.centerPopUp(_optionWindow);
	  _optionWindow.loadPieceSets(board.pieceSets);
      with (_optionWindow) {
        title = "Options";
		RadioGroup1.selectedValue = GameTimer.soundType;
        RadioGroup2.selectedValue = board.piece_type;
        pieceSoundCheckBox.selected = board.piece_sound_play;
        gameEndSoundCheckBox.selected = _end_sound_play;
        chatSound1CheckBox.selected = _chat_sound1_play;
        chatSound2CheckBox.selected = _chat_sound2_play;
		chatSound3CheckBox.selected = _chat_sound3_play;
		grabPieceCheckBox.selected = board.hold_piece;
		highlightMovableCheckBox.selected = board.highlight_movable;
		pmAutoOpenCheckBox.selected = _pmAutoOpen;
		acceptArrowsCheckBox.selected = _accept_arrows;
		arrowColorPicker.selectedColor = _arrow_color;
		ignoreList.dataProvider = _ignore_list;
		favoriteList.dataProvider = _favorite_list;
        OkButton.addEventListener("click", _handleOption);
		removeIgnoreButton.addEventListener("click", _handleRemoveIgnore);
		removeFavoriteButton.addEventListener("click", _handleRemoveFavorite);
		if (login_name == "guest") saveSettingsButton.enabled = false;
		saveSettingsButton.addEventListener("click", _handleSaveSettings);
		if (_so.data.optionTab) optionTab.selectedIndex = _so.data.optionTab;
      }
	  _optionWindow.drawArrow();
    }

     private function _waitForGame(total:int = 1500, byoyomi:int = 30, handicap:String = "r", tournament:String = ""):void {
	  if (_status_disconnected) {
		  Alert.show("You can only recconect to the game you disconnected from.\nIf your game is already over, re-login to clear your \"D\" status.","Error");
		  return;
	  }
      _client.waitForGame(total,byoyomi,handicap,tournament);
      _refresh(false);
      stopButton.enabled = true;
    }

	private function _logout():void {
		_client.logout();
	}

  private function _checkLobby():void {
	  userListPanel.setStyle('borderColor', _panelReplayColor);
	  mainViewStack.selectedIndex = 1;
	  backToGameButton.visible = true;
	  searchViewButton.enabled = false;
  }

  private function _backToGame():void {
	  userListPanel.setStyle('borderColor', undefined);
	  mainViewStack.selectedIndex = 2;
	  backToGameButton.visible = false;
	  searchViewButton.enabled = true;
  }
	
  private function _change_auto_scroll1():void {
	  _chat_auto_scroll1 = autoScrollCheck1.selected;
  }
 
  private function _mute(v:Boolean):void {
	  var trans:SoundTransform = new SoundTransform;
	  if (v) {
		  trans.volume = 0;
	  } else {
		  trans.volume = 1;
	  }
	  SoundMixer.soundTransform = trans;
	  muteCheck1.selected = v;
	  muteCheck2.selected = v;
  }
	 private function _leavePC():void{
		_leavePCWindow = LeavePCForm(PopUpManager.createPopUp(this, LeavePCForm, true));
		_leavePCWindow.x = mouseX;
		_leavePCWindow.y = mouseY + 50;
		_leavePCWindow.title = lan.set_autoreply;
		if (_so.data.leave_hours) _leavePCWindow.hoursCombo.selectedIndex = _so.data.leave_hours;
		if (_so.data.leave_minutes) _leavePCWindow.minutesCombo.selectedIndex = _so.data.leave_minutes;
		if (_so.data.leave_message) _leavePCWindow.messageText.text = _so.data.leave_message;
		_leavePCWindow.messageText.addEventListener(FlexEvent.ENTER, _leaveStart);
		_leavePCWindow.leaveButton.addEventListener(MouseEvent.CLICK, _leaveStart);
		_leavePCWindow.cancelButton.addEventListener(MouseEvent.CLICK, _leaveEnd);
	}
	
	private function _leaveStart(e:Event):void {
		_so.data.leave_hours = _leavePCWindow.hoursCombo.selectedIndex;
		_so.data.leave_minutes = _leavePCWindow.minutesCombo.selectedIndex;
		_so.data.leave_message = _leavePCWindow.messageText.text;
		_leaving = true;
		_leaveMinutes = 60 * e.target.parent.parent.hoursCombo.selectedItem.data + e.target.parent.parent.minutesCombo.selectedItem.data;
		_leaveTimer = new Timer(60000, _leaveMinutes);
		_leaveTimer.start();
		_leaveMessage = e.target.parent.parent.messageText.text;
	}
	
	private function _leaveEnd(e:Event):void {
		_leaving = false;
		if (_leaveTimer) _leaveTimer.stop();
	}
  
	//------------------------------------------------------------------------------------------------------------------------ LIST SELECTED
    private function _userSelected():void {
      var user:Object = userListGrid.selectedItem;
	  for (var i:int = 0; i < _game_list.length; i++) {
		  if (_game_list[i].blackName == user.name || _game_list[i].whiteName == user.name) {
			  gameListGrid.selectedIndex = i;
			  gameListGrid.scrollToIndex(i);
			  break;
		  }
		  if (user.monitor_game == _game_list[i].id) {
			  gameListGrid.selectedIndex = i;
			  gameListGrid.scrollToIndex(i);
			  break;
		  }
		  gameListGrid.selectedIndex = -1;
	  }
	  if (_game_name) return;
	  for (i = 0; i < _waiter_list.length; i++) {
		  if (_waiter_list[i].name == user.name) {
			  waiterListGrid.selectedIndex = i;
			  waiterListGrid.scrollToIndex(i);
			  break;
		  }
		  waiterListGrid.selectedIndex = -1;
	  }
    }
	
    private function _waiterSelected():void {
      var user:Object = waiterListGrid.selectedItem;
	  for (var i:int = 0; i < _user_list.length; i++) {
		  if (_user_list[i].name == user.name) {
			  userListGrid.selectedIndex = i;
			  userListGrid.scrollToIndex(i);
			  break;
		  }
		  userListGrid.selectedIndex = -1;
	  }
	  gameListGrid.selectedIndex = -1;
    }
	
    private function _gameSelected():void {
      var game:Object = gameListGrid.selectedItem;
	  for (var i:int = 0; i < _user_list.length; i++) {
		  if (_user_list[i].name == game.blackName || _user_list[i].name == game.whiteName) {
			  userListGrid.selectedIndex = i;
			  userListGrid.scrollToIndex(i);
			  break;
		  }
		  userListGrid.selectedIndex = -1;
	  }
	  waiterListGrid.selectedIndex = -1;
    }
	
	private function _holdRefresh():void {
	  _keepAliveTimer.reset();
	  _keepAliveTimer.start();
	}

	//------------------------------------------------------------------------------------------------------------------------ LIST SORT FUNCTIONS
	 private function _sortName(obj1:Object, obj2:Object):int {
		 if (obj1.favorite != "" && obj2.favorite == "") {
			 return -1;
		 } else if (obj1.favorite == "" && obj2.favorite != "") {
			 return 1;
		 } else {
			 if (obj1.name.toLowerCase() < obj2.name.toLowerCase()) {
				 return -1;
			 } else if (obj1.name.toLowerCase() > obj2.name.toLowerCase()) {
				 return 1;
			 } else {
				 return 0;
			 }
		 }
	 }

	 private function _sortCountry(obj1:Object, obj2:Object):int {
		 if (obj1.country < obj2.country) {
			 return -1;
		 } else if (obj1.country > obj2.country) {
			 return 1;
		 } else {
			 return 0;
		 }
	 }
	 
	 private function _sortRate(obj1:Object, obj2:Object):int {
		 if (Number(obj1.rate) < Number(obj2.rate)) {
			 return -1;
		 } else if (Number(obj1.rate) > Number(obj2.rate)) {
			 return 1;
		 } else {
			 return 0;
		 }
	 }

	private function _watchDialog():void {
		if (_game_name) return;
		_watch_game = gameListGrid.selectedItem;
		if (_watch_game.blackName == login_name || _watch_game.whiteName == login_name) {
			Alert.show("Reconnect to this game?", "Reconnect", Alert.YES | Alert.NO, gameListGrid, _reconnect);
		} else {
		    if (_status_disconnected) {
			    Alert.show("You can only recconect to the game you disconnected from.\nIf your game is already over, re-login to clear your \"D\" status.","Error");
			    return;
		    }
			Alert.show("Watch this game?", lan.watch, Alert.YES | Alert.NO, gameListGrid, _watch);
		}
//		Alert.yesLabel = lan.black;
//        Alert.noLabel = lan.white;
//		Alert.buttonWidth = 120;
//        Alert.show(lan.view_as,lan.watch,Alert.YES|Alert.NO,this,_watch);
        //set properties back to default.
//        Alert.yesLabel = "Yes";
//        Alert.noLabel = "No";
//        Alert.buttonWidth = 60;
	}
	
	private function _reconnect(e:CloseEvent):void {
		_watch_game = gameListGrid.selectedItem;
		if (_watch_game != null && e.detail == Alert.YES) {
			_game_name = _watch_game.id;
			_client.reconnect(_game_name);
		}
	}

    private function _watch(e:CloseEvent):void {
      _watch_game = gameListGrid.selectedItem;
      if (_watch_game != null) {
		 if (e.detail == Alert.YES) {
			board.my_turn = Kyokumen.SENTE;
		 } else {
			 return;
//			 board.my_turn = Kyokumen.GOTE;
		 }
		 _game_name = _watch_game.id;
		 var game_info:Array = _game_name.split("+")[1].match(/^([0-9a-z]+?)_(.*)-([0-9]*)-([0-9]*)$/);
		  if (game_info[1].match(/^hc/)) {
			  board.gameType = "hc";
		  } else {
			  board.gameType = game_info[1];
		  }
		 allowWatcherChatCheckbox.visible = false;
		 if (board.gameType == "hc" || String(_watch_game.blackRating).match(/^\*/)) {
			 board.superior = Kyokumen.GOTE;
		 } else if (String(_watch_game.whiteRating).match(/^\*/)) {
			 board.superior = Kyokumen.SENTE;
		 } else if (_watch_game.blackRating > _watch_game.whiteRating) {
			 board.superior = Kyokumen.SENTE;
		 } else {
			 board.superior = Kyokumen.GOTE;
		 }
		_monitoring = true;
		board.post_game = false;
		board.isStudyHost = false;
		_client.monitorOn(_game_name);
		_client.watchers(_game_name);
		  logoutButton.enabled = false;
		  userMessage2.htmlText = "";
		  if (board.gameType == "r") {
			  _writeUserMessage("This game is Rated.\nPlayers CANNOT see watcher's chat until the game ends.\nWatcher can PM to players, but it will be notified to others.\n", 2, "#008800", true);
		  } else {
			  _writeUserMessage("This game is Non-rated.\nPlayers CAN see watcher's chat even during game.\n", 2, "#008800", true);
		  }
		  if (game_info[2].match(/\-\-..$/)) _imgUserMessage(DIRECTORY + "images/banners/" + game_info[2].substr(game_info[2].length - 2, 2) + ".jpg", 2);
		  mainViewStack.selectedIndex = 2;
		  closeButton.enabled = true;
		  resignButton.enabled = false;
		  reverseButton.enabled = true;
		  greetButton.visible = false;
		  rematchButton.visible = false;
		  shareKifuButton2.visible = false;
		  rewindAllButton.enabled = true;
		  rewindOneButton.enabled = true;
		  forwardOneButton.enabled = true;
		  forwardAllButton.enabled = true;
		  kifuDataGrid.selectable = true;
		  kifuDataGrid.dataProvider = board.kifu_list;
		  radioKifuListen.selected = true;
		  radioKifuReplay.enabled = true;
		  radioKifuListen.enabled = true;
		  board.onListen = true;
		  sidePanel.setStyle('borderColor', undefined);
	  } else {
		  Alert.show("The game list has been refreshed.\nPlease select a game again.", lan.error, Alert.OK, gameListGrid);
	  }
    }

	private function _openPlayerInfo(user:Object):void {
	  if (!user) return;
	  kifuSearchPlayerText.text = user.name;
	  if (_playerInfoWindows[user.name]) {
		  _playerInfoWindows[user.name].x = Math.max(0, mouseX - 100);
		  _playerInfoWindows[user.name].y = Math.max(0, mouseY - 150);
		  _playerInfoWindows[user.name].maximize();
		  return;
	  }
	  _playerInfoWindows[user.name] = new PlayerInfoWindow();
	  _playerInfoWindows[user.name].x = Math.max(0, mouseX - 100);
	  _playerInfoWindows[user.name].y = Math.max(0, mouseY - 150);
	  PopUpManager.addPopUp(_playerInfoWindows[user.name], this, false);
	  _playerInfoWindows[user.name].pmText = _pmLog[user.name];
	  _playerInfoWindows[user.name].addEventListener("open_detail", _handlePlayerDetailOpen(user.name));
	  _playerInfoWindows[user.name].addEventListener("close_window", _handlePlayerInfoClose);
	  _playerInfoWindows[user.name].readUser(user);
	  if (_isDuringMyGame()) {
		  _playerInfoWindows[user.name].invite.enabled = false;
		  _playerInfoWindows[user.name].directMessage.enabled = false;
	  } else {
		  _playerInfoWindows[user.name].directMessage.addEventListener(FlexEvent.ENTER, _handleSendPrivateChat(user.name));
		  _playerInfoWindows[user.name].directMessage.setFocus();
	  }
	  if (user.name == login_name) {
		  _playerInfoWindows[user.name].selfCommands.includeInLayout = true;
		  _playerInfoWindows[user.name].selfCommands.visible = true;
		  if (user.wins + user.losses < 10) {
			  _playerInfoWindows[user.name].setRateButton.addEventListener(MouseEvent.CLICK, _setRate(user.name));
			  _playerInfoWindows[user.name].setRateButton.enabled = true;
			  _playerInfoWindows[user.name].setRateCombo.dataProvider = InfoFetcher.rank_names.slice(5, 17);
			  _playerInfoWindows[user.name].setRateCombo.selectedIndex = 7;
			  _playerInfoWindows[user.name].setRateCombo.enabled = true;
		  }
	  } else {
		  _playerInfoWindows[user.name].othersCommands.includeInLayout = true;
		  _playerInfoWindows[user.name].othersCommands.visible = true;
		  if (user.status == "game_waiting"  && user.game_name.indexOf(user.name) >= 0) {
			  _playerInfoWindows[user.name].challenge.addEventListener(MouseEvent.CLICK, _handleChallenge(user.name));
			  _playerInfoWindows[user.name].challenge.enabled = true;
		  }
		  if (user.status != "game") {
			  _playerInfoWindows[user.name].invite.addEventListener(MouseEvent.CLICK, _handleInvite(user.name));
			  _playerInfoWindows[user.name].invite.enabled = true;
		  }
		  _playerInfoWindows[user.name].favorite.addEventListener(MouseEvent.CLICK, _handleFavorite(user.name));
		  if (user.titleName != "admin") {
			  _playerInfoWindows[user.name].ignore.addEventListener(MouseEvent.CLICK, _handleIgnore(user.name));
			  _playerInfoWindows[user.name].ignore.enabled = true;
		  }
	  }
	  _playerInfoWindows[user.name].callLater(_playerInfoWindows[user.name].scrollDown);
	}
	
	private function _handlePlayerDetailOpen(name:String):Function {
		return function(e:Event):void {
			_openPlayerDetail(name);
		}
	}
	
	private function _openPlayerDetail(name:String):void {
		  _playerDetailWindow = PlayerDetailWindow(PopUpManager.createPopUp(this, PlayerDetailWindow, true));
		  PopUpManager.centerPopUp(_playerDetailWindow);
		  _api.playerDetail(name);
		  _api.loadHistory(name);
		  _playerDetailWindow.addEventListener("close_window", _handlePlayerDetailClose);
		  _playerDetailWindow.login = name;
		  var user:Object = _findPlayerFromList(name);
		  if (user) {
			  _playerDetailWindow.connection = "ONLINE";
			  _playerDetailWindow.title = user.mainTitle;
			  _playerDetailWindow.subTitle = user.subTitle;
			  _playerDetailWindow.avatar = user.avatar;
		  }
	}
	
	private function _handleLoadHistory(e:Event):void {
		if (!_playerDetailWindow) return;
		_gameHistories = new Array();
		for each (var history:Object in e.target.bufferData) {
			_gameHistories.push(history);
		}
		_playerDetailWindow.showHistory(_gameHistories);
	}
	
	private function _handlePlayerInfoClose(e:Event):void {
		_playerInfoWindows[e.target.nameLabel.text] = null;
	}

	private function _handlePlayerDetailClose(e:Event):void {
		_playerDetailWindow = null;
	}

    private function _handleSendChat1(e:FlexEvent):void {
	  if (e.target.text.match(/\[auto\-chat\]/)) {
		  Alert.show("You cannot imitate auto-chat.");
		  return;
	  }
	  var match:Array;
	  if ((match = e.target.text.match(/^@(.+?)\s(.+)$/))) {
		  _sendPrivateChat(match[1], match[2]);
	  } else {
		_client.chat(e.target.text);
	  }
      e.target.text = "";
    }
	
	private function _handleChallenge(name:String):Function {
		return function(e:MouseEvent):void {
		  if (_status_disconnected) {
			  Alert.show("You can only recconect to the game you disconnected from.\nIf your game is already over, re-login to clear your \"D\" status.","Error");
			  return;
		  }
		  if (_challenging) {
			  _writeUserMessage("You can only challenge one player at a time.\n", 1, "#008800");
			  return;
		  }
		  _challengeUser = _findPlayerFromList(name);
		  if (_challengeUser == null || !(_challengeUser.status2.match(/W/))) {
			  Alert.show("The opponent is not waiting for a game.", lan.error);
		  } else {
			var match:Array = _challengeUser.game_name.match(/^([0-9a-z]+?)_(.*)-([0-9]*)-([0-9]*)$/);
			var total:int = parseInt(match[3]) / 60 ;
			var rule:String = total + "min - " + match[4] + "sec";
			var hc:String = InfoFetcher.gameType(match[1]);
			Alert.yesLabel = lan.challenge;
			Alert.cancelLabel = lan.cancel;
			Alert.buttonWidth = 140;
			Alert.show("Opponent: " + name + "\nTime: " + rule + "\nGame type: " + hc,"Game Setting",Alert.YES|Alert.CANCEL, null,_handleChallengeAlert);
			//set properties back to default.
			Alert.yesLabel = "Yes";
			Alert.cancelLabel = "Cancel";
			Alert.buttonWidth = 60;
		  }    
		}
	}

    private function _handleChallengeAlert(e:CloseEvent):void{
      if (e.detail == Alert.YES) {
      _challenging = true;
      _writeUserMessage("Challenging..... (Must wait for 20 seconds max)\n", 1, "#008800");
      _client.challenge(_challengeUser.name);
      } else if (e.detail == Alert.CANCEL) {
      }
    }
	
	private function _handleInvite(name:String):Function {
		return function(e:MouseEvent):void{
			if (!_waiting) {
				Alert.show("Create a game first.", lan.error);
			} else {
				var match:Array = _client.waitingGamename.match(/^([0-9a-z]+?)_(.*)-([0-9]*)-([0-9]*)/);
				var rule:String = (parseInt(match[3]) / 60) + "min - " + match[4] + "sec";
				var hc:String = InfoFetcher.gameType(match[1]);
				_sendPrivateChat(name, "[auto-PM] INVITATION: I am waiting with " + rule + ", " + hc + ". Would you like a game with me?");
			}
		}
	}
	
	private function _handleFavorite(name:String):Function {
		return function(e:MouseEvent):void {
			if (_favorite_list.indexOf(name.toLowerCase()) >= 0) {
				Alert.show("Already in favorite list.");
				return;
			}
			_favorite_list.push(name.toLowerCase());
			Alert.show("Added to favorite list temporarily.\nGo to Option Window to set it permanent or cancel.");
		}
	}
	
	private function _handleIgnore(name:String):Function {
		return function(e:MouseEvent):void {
			if (_ignore_list.indexOf(name.toLowerCase()) >= 0) {
				Alert.show("Already in ignore list.");
				return;
			}
			_ignore_list.push(name.toLowerCase());
			Alert.show("Added to ignore list temporarily.\nGo to Option Window to set it permanent or cancel.");
		}
	}
	
	private function _setRate(name:String):Function {
		return function(e:MouseEvent):void {
			_client.setRate(InfoFetcher.rank_thresholds[_playerInfoWindows[name].setRateCombo.selectedIndex + 5]);
		}
	}
	
	private function _scrollDownUser():void {
		if (userListGrid.selectedItem) userListGrid.scrollToIndex(userListGrid.selectedIndex);
	}
	
	private function _openAdminPanel():void {
		  _adminPanelWindow = AdminPanelWindow(PopUpManager.createPopUp(this, AdminPanelWindow, false));
		  PopUpManager.centerPopUp(_adminPanelWindow);
		  _adminPanelWindow.adminCommandInput.addEventListener(FlexEvent.ENTER, _handleAdminSendCommand);
		  _adminPanelWindow.broadcastButton.addEventListener(MouseEvent.CLICK, _handleBroadcast);
		  _adminPanelWindow.showLog(_adminLog);
	}
	
	private function _handleAdminSendCommand(e:Event):void {
		_client.send(e.target.text);
		e.target.text = "";
	}
	
	private function _handleBroadcast(e:MouseEvent):void {
		_client.chat("[##BROADCAST]" + e.target.parent.parent.adminCommandInput.text);
	}
	
	//=========================================================
	//                       CONTROLS for VIEWSTACK INDEX = 2
	//=========================================================
	
	//------------------------------------------------------------------------------------------------------------------------ BUTTONS
	private function _resignAlert():void {
		if (board.my_turn == board.position.turn)
        Alert.show("","Resign?",Alert.YES|Alert.NO, controlPanel, _resign);
	}
	
    private function _resign(e:CloseEvent):void {
		if (e.detail == Alert.YES) {
			_client.gameChat(_game_name, "<(_ _)> 負けました。(Makemashita)");
			_client.resign();
		}
    }
	
	private function _greetMenu():void{
      _greetMenuWindow = GreetMenuWindow(PopUpManager.createPopUp(controlPanel, GreetMenuWindow, false));
      PopUpManager.centerPopUp(_greetMenuWindow);
      with (_greetMenuWindow) {
        title = "Make Japanese Greetings";
		greet1.addEventListener(MouseEvent.CLICK, _sendGreet);
		greet2.addEventListener(MouseEvent.CLICK, _sendGreet);
      }
    }
	
	private function _sendGreet(e:MouseEvent):void {
		_client.gameChat(_game_name, e.target.label);
	}
	
    private function _showImpasse():void {
		board.position.calcImpasse();
		_impasseStatusWindow =  ImpasseStatusWindow(PopUpManager.createPopUp(board, ImpasseStatusWindow, true));
		_impasseStatusWindow.addEventListener("close_window", _handleImpasseStatusClose);
		PopUpManager.centerPopUp(_impasseStatusWindow);
		_impasseStatusWindow.title = "Impasse Status";
		_impasseStatusWindow.kachiButton.addEventListener(MouseEvent.CLICK, _handleKachiDeclare);
		_impasseStatusWindow.setStatus(board.position.impasseStatus, (_isDuringMyGame() && board.position.turn == board.my_turn) ? board.my_turn : -1);
    }
	
	private function _handleImpasseStatusClose(e:Event):void {
		_impasseStatusWindow = null;
	}
	
	private function _handleKachiDeclare(e:MouseEvent):void {
		_client.kachi();
	}
	
	private function _rematch():void {
		if (_game_name && !board.rematch[board.my_turn]) {
			_sendAutoChat("Standing by for Rematch");
			_client.gameChat(_game_name, "[##REMATCH]");
		}
	}
	
    private function _closeGame():void {
	  if (_game_name) {
		  if (_monitoring) {
			  _client.monitorOff(_game_name);
			  _monitoring = false;
		  } else if (board.viewing) {
		  } else {
			  if (board.isStudyHost) _client.gameChat(_game_name, "[##GIVEHOST]" + board.playerInfos[board.playerInfos[0].name == login_name ? 1 : 0].name);
			  _client.closeGame();
		  }
          _game_name = null;
	  }
      board.closeGame();
	  if (board.viewing) {
		  mainViewStack.selectedIndex = 3;
		  chatMessage2.enabled = true;
		  board.viewing = false;
	  } else {
		  mainViewStack.selectedIndex = 1;
	  }
	  logoutButton.enabled = true;
      _refresh();
    }

    private function _handleSendChat2(e:FlexEvent):void {
	  if (e.target.text.match(/\[auto\-chat\]/)) {
		  Alert.show("You cannot imitate auto-chat.");
		  return;
	  }
	  var match:Array;
	  if ((match = e.target.text.match(/^@(.+?)\s(.+)$/))) {
		  _sendPrivateChat(match[1], match[2]);
	  } else {
		if (_game_name) _client.gameChat(_game_name, e.target.text);
	  }
      e.target.text = "";
    }

  private function _change_auto_scroll2():void {
	  _chat_auto_scroll2 = autoScrollCheck2.selected;
  }
  
	private function _clearArrows():void {
		if (board.isStudyHost || board.onListen) {
			if (board.clearArrows(Board.ARROWS_PUBLIC, "")) {
				_client.gameChat(_game_name, "[##ARROW]CLEAR");
			} else {
				board.clearArrows(Board.ARROWS_PUBLIC);
			}
			if (board.isStudyHost) board.clearArrows(Board.ARROWS_SELF);
		} else {
			board.clearArrows(Board.ARROWS_SELF);
		}
	}
	
	private function _shareKifu2():void {
		var kifu:Object = new Object();
		kifu.id = board.kid;
		kifu.opening = board.opening;
		kifu.black = board.playerInfos[0].name;
		kifu.white = board.playerInfos[1].name;
		kifu.blackRank = board.playerInfos[0].rank;
		kifu.whiteRank = board.playerInfos[1].rank;
		kifu.blackCountryCode = board.playerInfos[0].country_code;
		kifu.whiteCountryCode = board.playerInfos[1].country_code;
		if (!board.viewing) {
			for each (var game:Object in _game_list) {
				if (game.id == _game_name) {
					kifu.opening = game.opening_en;
					break;
				}
			}
		}
		_openKifuShareWindow(kifu, board.piece_type, board.my_turn, kifuDataGrid.selectedIndex);
	}
	
	private function _openKifuShareWindow(kifu:Object, pieceType:int = 0,  turn:int = 0, moves:int = 0):void {
		_kifuShareWindow = KifuShareWindow(PopUpManager.createPopUp(this, KifuShareWindow, true));
		PopUpManager.centerPopUp(_kifuShareWindow);
		_kifuShareWindow.kifu = kifu;
		_kifuShareWindow.moves = moves;
		_kifuShareWindow.turn = turn;
		_kifuShareWindow.pieceType = pieceType;
	}

	private function _gamePlayerInfo(e:MouseEvent):void {
	  _openPlayerInfo(_findPlayerFromList(e.target.text));
	}
	
  //------------------------------------------------------------------------------------------------------------------------ KIFU
  private function _toggleListen():void {
	  board.cancelSquareSelect();
	  if (radioKifuListen.selected) {
		  board.onListen = true;
		  sidePanel.setStyle('borderColor', undefined);
		  board.clearArrows(Board.ARROWS_SELF);
		  board.showArrows(Board.ARROWS_PUBLIC);
		  kifuDataGrid.scrollToIndex(0);
		  kifuDataGrid.dataProvider = board.kifu_list;
		  if (board.kifu_list_self.length > 0) board.kifu_list_self = new Array();
		  if (board.post_game && !board.isStudyHost) {
			  board.replayMoves(board.studyOrigin, true);
			  if (board.study_list.length > 0) {
				  for (var i:int = 0; i <= board.studyOrigin; i++) board.kifu_list_self.push(board.kifu_list[i]);
				  for (i = 0; i < board.study_list.length; i++) board.makeMove(board.study_list[i] + ",T0", false, false);
				  kifuDataGrid.dataProvider = board.kifu_list_self;
				  kifuDataGrid.selectedIndex = board.kifu_list_self.length - 1;
			  }	 else {
				  kifuDataGrid.selectedIndex = board.studyOrigin;
			  }
		  }
		  if (_monitoring && !board.post_game) {
			  board.replayMoves(board.kifu_list.length - 1, true);
			  kifuDataGrid.selectedIndex = board.kifu_list.length - 1;
		  }
		  kifuDataGrid.callLater(_scrollDownKifu);
	  } else {
		  board.onListen = false;
		  sidePanel.setStyle('borderColor', _panelReplayColor);
		  if (!board.isStudyHost){
			board.eraseArrows(Board.ARROWS_PUBLIC);
			board.showArrows(Board.ARROWS_SELF);
		  }
		  if (board.post_game && !board.isStudyHost) {
			board.replayMoves(kifuDataGrid.selectedIndex, true);
		  }
	  }
  }
  
  private function _saveKIF():void {
	  var date_time:String = _game_name.split("+")[4];
	  var fileReference:FileReference = new FileReference();
	  fileReference.save(Jcode.getInstance().UTF8toSJIS(_formatKIF()), "81Dojo-" + date_time.substr(0,4) + "-" + date_time.substr(4,2) + "-" + date_time.substr(6,2) + "-" + date_time.substr(8,2) + "-" + date_time.substr(10,2)  + ".kif");
  }
 
	private function _formatKIF():String{
		  var KIFDataText:String = "";
		  KIFDataText += "開始日時：" + _game_name.split("+")[4].substr(0,4) + "/" + _game_name.split("+")[4].substr(4,2) + "/" + _game_name.split("+")[4].substr(6,2) + "\r\n";
		  KIFDataText += "場所：81-Dojo (" + VERSION +")\r\n";
		  KIFDataText += InfoFetcher.gameTypeKIF(_game_name.split("+")[1].match(/^([0-9a-z]+?)_/)[1]) + "\r\n";
		  KIFDataText += "先手：" + board.playerInfos[0].name + "\r\n";
		  KIFDataText += "後手：" + board.playerInfos[1].name + "\r\n";
		  KIFDataText += "手数----指手---------消費時間--\r\n";
		  for (var i:int = 1; i < board.kifu_list.length ; i++) {
			for (var j:int = 1; j <= 4 - String(i).length; j++) KIFDataText += " ";
			KIFDataText += String(i) + " ";
			KIFDataText += board.kifu_list[i].moveKIF + "\r\n";
		  }
		  return KIFDataText;
	}
	
  private function kifuListSelected():void {
	board.cancelSquareSelect();
	var n:int = kifuDataGrid.selectedIndex;
	radioKifuReplay.selected = true;
	if (board.onListen) {
		board.onListen = false;
		sidePanel.setStyle('borderColor', _panelReplayColor);
		board.eraseArrows(Board.ARROWS_PUBLIC);
	}
	board.clearArrows(Board.ARROWS_SELF);
	if (String(kifuDataGrid.selectedItem.num).match(/^\*/)) {
		board.replayMoves(n, false);
	} else {
		if (board.kifu_list_self.length > 0) {
			board.kifu_list_self = new Array();
			kifuDataGrid.scrollToIndex(0);
			kifuDataGrid.dataProvider = board.kifu_list;
			kifuDataGrid.selectedIndex = n;
			kifuDataGrid.scrollToIndex(n);
			if (board.isStudyHost) _sendAutoChat("Quit study mode.");
		}
		board.replayMoves(n, true);
	}
	if (board.isStudyHost) _sendStudy();
  }
    
  private function replayByButton(i:int):void {
	board.cancelSquareSelect();
	board.clearArrows(Board.ARROWS_SELF);
    switch (i) {
      case -2:
		kifuDataGrid.selectedIndex = 0;
        break;
      case -1:
		if (kifuDataGrid.selectedIndex > 0) kifuDataGrid.selectedIndex--;
        break;
	  case 1:
      case 2:
		if (kifuDataGrid.selectedIndex < kifuDataGrid.dataProvider.length - 1 ) {
			if (i == 1) {
				kifuDataGrid.selectedIndex++;
			} else {
				kifuDataGrid.selectedIndex = kifuDataGrid.dataProvider.length;
			}
		} else {
			if (!board.post_game && !board.onListen && !board.viewing && !String(kifuDataGrid.selectedItem.num).match(/^\*/)) {
				radioKifuListen.selected = true;
				_toggleListen();
			}
			return;
		}
    }
	radioKifuReplay.selected = true;
	if (board.onListen) {
		board.onListen = false;
		sidePanel.setStyle('borderColor', _panelReplayColor);
		board.eraseArrows(Board.ARROWS_PUBLIC);
	}
	var n:int = kifuDataGrid.selectedIndex;
	if (String(kifuDataGrid.selectedItem.num).match(/^\*/)) {
		board.replayMoves(n, false);
		if (board.isStudyHost) _sendStudy();
	} else {
		if (board.kifu_list_self.length > 0) {
			board.kifu_list_self = new Array();
			kifuDataGrid.scrollToIndex(0);
			kifuDataGrid.dataProvider = board.kifu_list;
			kifuDataGrid.selectedIndex = n;
			if (board.isStudyHost) _sendAutoChat("Quit study mode.");
		}
		board.replayMoves(n, true);
		if (board.isStudyHost) _sendStudy();
	}
	kifuDataGrid.scrollToIndex(n);
  }
	
	private function _scrollDownKifu():void {
		if (kifuDataGrid.selectedItem) {
			kifuDataGrid.scrollToIndex(kifuDataGrid.selectedIndex);
		} else {
			kifuDataGrid.scrollToIndex(kifuDataGrid.dataProvider.length - 1);
		}
	}
	
 	//------------------------------------------------------------------------------------------------------------------------ MOUSE DETECTION
	private function _hoverPiece(x:int, y:int):void {
		_client.gameChat(_game_name, "[##HOVER]" + x + "," + y);
	}
	
	private function _grabPiece(x:int, y:int):void {
		_client.gameChat(_game_name, "[##GRAB]" + x + "," + y);
	}
	
	private function _rollOver(e:MouseEvent):void {
		if (_isDuringMyGame() && !board.viewing && board.gameType == "r") _client.gameChat(_game_name, "[##M_IN]" + int(e.stageX) + "," + int(e.stageY));
	}
	
	private function _rollOut(e:MouseEvent):void {
		if (_isDuringMyGame() && !board.viewing && board.gameType == "r") _client.gameChat(_game_name, "[##M_OUT]0,0");
	}

	private function _playerInfoFromText(textArea:TextArea):void {
		var selectedText:String = textArea.text.substring(textArea.selectionBeginIndex, textArea.selectionEndIndex);
		var match:Array;
		if ((match = selectedText.match(/^\[(.+)\]$/))) _openPlayerInfo(_findPlayerFromList(match[1]));
	}
	
	//=========================================================
	//                       CONTROLS for VIEWSTACK INDEX = 3
	//=========================================================

	private function _rankingTabChange():void {
		var country_code:String = "";
		switch (rankingTabNavigator.selectedIndex) {
			case 0:
				if (_ranking_rate_list) {country_code = _ranking_rate_list[0].country_code;} break;
			case 1:
				if (_ranking_streak_list) {country_code = _ranking_streak_list[0].country_code;} break;
			case 2:
				if (_ranking_percentage_list) {country_code = _ranking_percentage_list[0].country_code;} break;
			case 3:
				if (_ranking_wins_list) {country_code = _ranking_wins_list[0].country_code;} break;
			case 4:
				if (_ranking_total_list) {country_code = _ranking_total_list[0].country_code;} break;
		}
		if (country_code == "") {
			rankingFlagLoader.source = "";
		} else {
			rankingFlagLoader.source = DIRECTORY + "images/flags_m/" + country_code + ".swf";
		}
	}
	
	private function _sendKifuSearch():void {
		if (kifuSearchPlayerText.text && kifuSearchFromChooser.selectedDate && kifuSearchToChooser.selectedDate) {
			kifuSearchGrid.dataProvider = null;
			var fromDate:Date = new Date("2010/9/20");
			if (kifuSearchFromChooser.selectedDate > fromDate) fromDate = kifuSearchFromChooser.selectedDate;
			_api.kifuSearch(kifuSearchPlayerText.text.toLowerCase(), fromDate, kifuSearchToChooser.selectedDate);
			searchAccordion.enabled = false;
		}
	}
	
	private function _handleSearchNotFound(e:Event):void {
		searchAccordion.enabled = true;
	}
	
	private function _handleKifuSearch(e:Event):void {
		searchAccordion.enabled = true;
		_kifu_search_list = new Array();
		var hc:String;
		var match:Array;
		for each (var kifu:Object in e.target.bufferData) {
			match = kifu.game_id.split("+")[1].match(/^([0-9a-z]+?)_.+\-(\d+)\-(\d+)$/);
			if (match[1] == "r") {
				hc = "R";
			} else if (match[1] == "nr") {
				hc = "NR";
			} else if (match[1].match(/^(hc|va|mini)/)) {
				if (match[1].match(/^vazoo/)) continue;
				hc = "* " + InfoFetcher.gameTypeShort(match[1]);
			}
			kifu.rule = hc + ": " + parseInt(match[2])/60 + "-" + parseInt(match[3])
			kifu.black = kifu.game_id.split("+")[2];
			kifu.white = kifu.game_id.split("+")[3];
			kifu.date = kifu.game_id.split("+")[4].substr(0, 4) + "-" + kifu.game_id.split("+")[4].substr(4, 2) + "-" + kifu.game_id.split("+")[4].substr(6, 2);
			trace(kifu.game_id + " " + kifu.result);
			if (kifu.result.match(/summary/)) {
				if (kifu.result.match(new RegExp(kifuSearchPlayerText.text + " win", "i"))) {
					kifu.winner = "WIN";
				} else if (kifu.result.match(new RegExp(kifuSearchPlayerText.text + " lose", "i"))) {
					kifu.winner = "LOSE";
				} else {
					kifu.winner = "DRAW";
				}
				var summaries:Array = kifu.result.split(":");
				kifu.moves = summaries[4] ? summaries[4] : "-";
				kifu.opening = summaries[5] ? InfoFetcher.openingNameEn(summaries[5]) : "";
				kifu.opening_jp = summaries[5] ? InfoFetcher.openingNameJp(summaries[5]) : "";
				if (summaries[6]) {
					kifu.blackRankColor = String(summaries[6]).match(/^\*/) ? 0x999999 : InfoFetcher.makeColorFromRating(summaries[6].split(",")[0]);
					kifu.blackRank = String(summaries[6]).match(/^\*/) ? "-" : InfoFetcher.makeRankFromRating(summaries[6].split(",")[0]);
					kifu.blackCountryCode = parseInt(summaries[6].split(",")[1]);
					kifu.blackFlagURL = DIRECTORY + "images/flags_ss/" + String(kifu.blackCountryCode + 1000).substr(1) + ".png";
					kifu.blackCountry = InfoFetcher.country_names[kifu.blackCountryCode];
				} else kifu.blackRankColor = 0xFFFFFF;
				if (summaries[7]) {
					kifu.whiteRankColor = String(summaries[7]).match(/^\*/) ? 0x999999 : InfoFetcher.makeColorFromRating(summaries[7].split(",")[0]);
					kifu.whiteRank = String(summaries[7]).match(/^\*/) ? "-" : InfoFetcher.makeRankFromRating(summaries[7].split(",")[0]);
					kifu.whiteCountryCode = parseInt(summaries[7].split(",")[1]);
					kifu.whiteFlagURL = DIRECTORY + "images/flags_ss/" + String(kifu.whiteCountryCode + 1000).substr(1) + ".png";
					kifu.whiteCountry = InfoFetcher.country_names[kifu.whiteCountryCode];
				} else kifu.whiteRankColor = 0xFFFFFF;
				_kifu_search_list.push(kifu);
			}
		}
		kifuSearchGrid.dataProvider = _kifu_search_list;
	}
	
	private function _kifuSearchSelected():void {
		if (kifuSearchGrid.selectedItem) {
			searchAccordion.enabled = false;
			board.opening = kifuSearchGrid.selectedItem.opening;
			board.kid = kifuSearchGrid.selectedItem.id;
			_api.kifuDetail(kifuSearchGrid.selectedItem.id);
		}
	}
	
	private function _shareKifu3():void {
		var kifu:Object = kifuSearchGrid.selectedItem;
		if (kifu) {
			_openKifuShareWindow(kifu);
		} else {
			Alert.show("Highlight the kifu first.", lan.error);
		}
	}
	
	private function _handleKifuDetail(e:Event):void {
		searchAccordion.enabled = true;
		board.viewing = true;
		board.my_turn = Kyokumen.SENTE;
		_game_name = e.target.kifuContents.split("\n")[4].substring(7);
		var blackRate:String;
		var whiteRate:String;
		if (e.target.kifuContents.split("\n")[5].match(/^I\+(\d+),/)) blackRate = e.target.kifuContents.split("\n")[5].match(/^I\+(\d+),/)[1];
		else blackRate = "0";
		if (e.target.kifuContents.split("\n")[6].match(/^I\-(\d+),/)) whiteRate = e.target.kifuContents.split("\n")[6].match(/^I\-(\d+),/)[1];
		else whiteRate = "0";
		if (_game_name.split("+")[1].match(/^hc/) || blackRate.match(/^\*/)) {
		  board.superior = Kyokumen.GOTE;
		} else if (whiteRate.match(/^\*/)) {
		  board.superior = Kyokumen.SENTE;
		} else if (parseInt(blackRate) > parseInt(whiteRate)) {
		  board.superior = Kyokumen.SENTE;
		} else {
		  board.superior = Kyokumen.GOTE;
		}
		if (_game_name.split("+")[1].match(/^r_/)) {
		  board.gameType = "r";
		} else if (_game_name.split("+")[1].match(/^nr_/)) {
		  board.gameType = "nr";
		} else if (_game_name.split("+")[1].match(/^hc/)) {
		  board.gameType = "hc";
		} else if (_game_name.split("+")[1].match(/^(mini|va.+?)_/)) {
		  board.gameType = _game_name.split("+")[1].match(/^(mini|va.+?)_/)[1];
		}
		allowWatcherChatCheckbox.visible = false;
		board.startView(e.target.kifuContents);
		resignButton.enabled = false;
		reverseButton.enabled = true;
		greetButton.visible = false;
		rematchButton.visible = false;
		shareKifuButton2.visible = true;
		userMessage2.htmlText = "";
		kifuDataGrid.selectable = true;
		rewindAllButton.enabled = true;
		rewindOneButton.enabled = true;
		forwardAllButton.enabled = true;
		forwardOneButton.enabled = true;
		radioKifuReplay.enabled = true;
		radioKifuReplay.selected = true;
		sidePanel.setStyle('borderColor', _panelReplayColor);
		radioKifuListen.enabled = false;
		chatMessage2.enabled = false;
		mainViewStack.selectedIndex = 2;
		kifuDataGrid.dataProvider = board.kifu_list;
		kifuDataGrid.selectedIndex = 0;
		board.replayMoves(0, true);
		if (_viewerAlone) {
			if (this.parameters["moves"]) {
				kifuDataGrid.selectedIndex = this.parameters["moves"];
				board.replayMoves(this.parameters["moves"], true);
				kifuDataGrid.scrollToIndex(kifuDataGrid.selectedIndex);
				kifuDataGrid.callLater(_scrollDownKifu);
			}
			if (this.parameters["turn"]) {
				if (this.parameters["turn"] == 1) board.flipBoard();
			}
			if (this.parameters["piece"]) board.setPieceType(this.parameters["piece"]);
		}
		_writeUserMessage("81-Dojo Kifu Viewer\n", 2, "#008800", true);
		if (_viewerAlone) {
			closeButton.enabled = false;
			checkLobbyButton.enabled = false;
			_writeUserMessage("Register to 81-Dojo and play shogi with this graphical interface!\n", 2, "#008800");
			_writeUserMessage("( http://81dojo.com/ )\n", 2, "#008800");
		} else {
			closeButton.enabled = true;
		}
		_writeUserMessage("\nStarted Time: " + e.target.kifuContents.split("\n")[7].substr(12) + "\n", 2, "#000000");
	}
	
	private function _handlePlayerSearchEnter(e:FlexEvent):void {
		_sendPlayerSearch();
	}
	
	private function _sendPlayerSearch():void {
		if (playerSearchNameText.text) {
			playerSearchGrid.dataProvider = null;
			searchAccordion.enabled = false;
			_api.playerSearch(playerSearchNameText.text.toLowerCase());
		}
	}
	
	private function _handlePlayerSearch(e:Event):void {
		searchAccordion.enabled = true;
		_player_search_list = new Array();
		for each (var player:Object in e.target.bufferData) {
			player.country = InfoFetcher.country_names[InfoFetcher.country_codes[player.country_id - 1]];
			player.total = parseInt(player.wins) + parseInt(player.losses);
			player.percentage = (100 * player.wins / Math.max(1, player.total)).toFixed(1);
			player.flagURL = DIRECTORY + "images/flags_s/" + String(InfoFetcher.country_codes[player.country_id - 1] + 1000).substring(1) + ".gif";
			player.rank = InfoFetcher.makeRankFromRating(player.rate);
			player.created_at = player.created_at.split(" ")[0];
			player.updated_at = player.updated_at.split(" ")[0];
			for (var i:int = 0; i < _infoFetcher.titleUser.length; i++) {
				  if (player.login == _infoFetcher.titleUser[i]) {
					  player.title = _infoFetcher.titleName[i];
					  break;
				  }
			}
			_player_search_list.push(player);
		}
		playerSearchGrid.dataProvider = _player_search_list;
	}

	private function _handlePlayerDetail(e:Event):void {
		if (_playerDetailWindow) _playerDetailWindow.loadPlayerDetail(e.target.bufferData[0]);
	}
	
	private function _sendRankingSearch():void {
		searchAccordion.enabled = false;
		var type:String;
		switch (rankingTabNavigator.selectedIndex) {
			case 0:
				type = "rate"; break;
			case 1:
				type = "streak"; break;
			case 2:
				type = "percentage"; break;
			case 3:
				type = "wins"; break;
			case 4:
				type = "total"; break;
		}
		_api.rankingSearch(type);
	}
	
	private function _handleRankingSearch(e:Event):void {
		searchAccordion.enabled = true;
		var listed:Boolean = true;
		switch (String(e.target.bufferXML.@item)) {
			case "wins":
				_ranking_wins_list = new Array(); break;
			case "rate":
				_ranking_rate_list = new Array(); break;
			case "total":
				_ranking_total_list = new Array(); break;
			case "streak":
				_ranking_streak_list = new Array(); break;
			case "percentage":
				_ranking_percentage_list = new Array(); break;
		}
		var num:int = 0;
		for each (var playerXML:XML in e.target.bufferXML.player) {
			num += 1;
			var player:Object = {
				'number':num,
				'login':String(playerXML.login),
				'country_code':String(InfoFetcher.country_codes[parseInt(playerXML.country_id)-1] + 1000).substring(1),
				'country':InfoFetcher.country_names[InfoFetcher.country_codes[parseInt(playerXML.country_id)-1]],
				'wins':parseInt(playerXML.wins),
				'losses':parseInt(playerXML.losses),
				'total':parseInt(playerXML.wins) + parseInt(playerXML.losses),
				'percentage':(100 * parseInt(playerXML.wins) / Math.max(1, parseInt(playerXML.wins) + parseInt(playerXML.losses))).toFixed(1),
				'streak_best':parseInt(playerXML.streak_best),
				'rate':parseInt(playerXML.rate),
				'rank':InfoFetcher.makeRankFromRating(parseInt(playerXML.rate))
			}
			player.flagURL = DIRECTORY + "images/flags_s/" + player.country_code + ".gif";
			for (var i:int = 0; i < _infoFetcher.titleUser.length; i++) {
				  if (player.login == _infoFetcher.titleUser[i]) {
					  player.title = _infoFetcher.titleName[i];
					  break;
				  }
			}
			if (_infoFetcher.cheaters.indexOf(player.login) >= 0) { // Temporarily
				listed = false;
				num -= 1;
			}
			if (listed) {
				switch (String(e.target.bufferXML.@item)) {
					case "wins":
						_ranking_wins_list.push(player); break;
					case "rate":
						_ranking_rate_list.push(player); break;
					case "total":
						_ranking_total_list.push(player); break;
					case "streak":
						_ranking_streak_list.push(player); break;
					case "percentage":
						_ranking_percentage_list.push(player); break;
				}
			}
			listed = true;
		}
		winRankingGrid.dataProvider = _ranking_wins_list;
		totalRankingGrid.dataProvider = _ranking_total_list;
		streakRankingGrid.dataProvider = _ranking_streak_list;
		percentageRankingGrid.dataProvider = _ranking_percentage_list;
		rateRankingGrid.dataProvider = _ranking_rate_list;
		_rankingTabChange();
	}

	//=========================================================
	//                   OTHER EVENT HANDLERS for SMALL WINDOWS
	//=========================================================
	
	//--------------------------------------------------------------------------------------------------------------------------------- CREATE GAME
    private function _handleRuleSelected(e:GameRuleEvent):void {
	  _so.data.rule_base = _newGameWindow.timeSetting.selectedValue;
	  _so.data.rule_total = _newGameWindow.nonrated_total.selectedIndex;
	  _so.data.rule_byoyomi = _newGameWindow.nonrated_byoyomi.selectedIndex;
	  _so.data.rule_handicap = _newGameWindow.nonrated_handicap.selectedIndex;
      _waitForGame(e.total, e.byoyomi, e.handicap, e.tournament);
	  _waiting = true;
    }

	//--------------------------------------------------------------------------------------------------------------------------------- OPTION WINDOW
    private function _handleOption(e:Event):void {
	  GameTimer.soundType = int(_optionWindow.RadioGroup1.selectedValue);
      board.setPieceType(int(_optionWindow.RadioGroup2.selectedValue));
      board.piece_sound_play = _optionWindow.pieceSoundCheckBox.selected;
      _end_sound_play = _optionWindow.gameEndSoundCheckBox.selected;
      _chat_sound1_play = _optionWindow.chatSound1CheckBox.selected;
      _chat_sound2_play = _optionWindow.chatSound2CheckBox.selected;
	  _chat_sound3_play = _optionWindow.chatSound3CheckBox.selected;
	  board.hold_piece = _optionWindow.grabPieceCheckBox.selected;
	  board.highlight_movable = _optionWindow.highlightMovableCheckBox.selected;
	  _pmAutoOpen = _optionWindow.pmAutoOpenCheckBox.selected;
	  _accept_arrows = _optionWindow.acceptArrowsCheckBox.selected;
	  _arrow_color = _optionWindow.arrowColorPicker.selectedColor;
	  _so.data.optionTab = _optionWindow.optionTab.selectedIndex;
	  if (_isDuringMyGame()) {
		  if (board.piece_type >= 5 && board.piece_type != _prev_piece_type) {
			  if (board.piece_type == 5) _sendAutoChat("Pieces set to Blind, Middle.");
			  else if (board.piece_type == 6) _sendAutoChat("Pieces set to Blind, Hard.");
			  else if (board.piece_type == 7) _sendAutoChat("Pieces set to Blind, Extreme.");
		  } else if (board.piece_type <= 4 && _prev_piece_type >= 5) {
			  _sendAutoChat("Pieces set to Normal.");
		  }
	  }
    }
	
	private function _handleSaveSettings(e:Event):void {
		var urlVariables:URLVariables = new URLVariables();
		_handleOption(e);
		urlVariables.name = login_name.toLowerCase();
		urlVariables.pieceSound = board.piece_sound_play;
		urlVariables.endSound = _end_sound_play;
		urlVariables.chatSound1 = _chat_sound1_play;
		urlVariables.chatSound2 = _chat_sound2_play;
		urlVariables.chatSound3 = _chat_sound3_play;
		urlVariables.grabPiece = board.hold_piece;
		urlVariables.pmAutoOpen = _pmAutoOpen;
		urlVariables.acceptArrow = _accept_arrows;
		urlVariables.arrowColor = _arrow_color;
		urlVariables.ignoreList = _ignore_list.join("/");
		urlVariables.favoriteList = _favorite_list.join("/");
		urlVariables.byoyomi = GameTimer.soundType;
		urlVariables.pieceType = board.piece_type;
		urlVariables.pieceType34 = board.piece_type34;
		urlVariables.highlightMovable = board.highlight_movable;
		_infoFetcher.writeSettings(urlVariables);
	}
	
	private function _handleRemoveIgnore(e:Event):void {
		if (!_optionWindow) return;
		if (_optionWindow.ignoreList.selectedIndex >= 0) {
			_ignore_list.splice(_optionWindow.ignoreList.selectedIndex, 1);
			_optionWindow.ignoreList.dataProvider = _ignore_list;
		}
	}
	
	private function _handleRemoveFavorite(e:Event):void {
		if (!_optionWindow) return;
		if (_optionWindow.favoriteList.selectedIndex >= 0) {
			_favorite_list.splice(_optionWindow.favoriteList.selectedIndex, 1);
			_optionWindow.favoriteList.dataProvider = _favorite_list;
		}
	}
	
	private function _handleLoadOption(e:Event):void {
		board.piece_sound_play = _infoFetcher.userSettings.pieceSound;
		_end_sound_play = _infoFetcher.userSettings.endSound;
		_chat_sound1_play = _infoFetcher.userSettings.chatSound1;
		_chat_sound2_play = _infoFetcher.userSettings.chatSound2;
		_chat_sound3_play = _infoFetcher.userSettings.chatSound3;
		board.hold_piece = _infoFetcher.userSettings.grabPiece;
		_pmAutoOpen = _infoFetcher.userSettings.pmAutoOpen;
		_accept_arrows = _infoFetcher.userSettings.acceptArrow;
		_arrow_color = _infoFetcher.userSettings.arrowColor;
		if (_infoFetcher.userSettings.ignoreList != "") _ignore_list = _infoFetcher.userSettings.ignoreList.split("/");
		if (_infoFetcher.userSettings.favoriteList != "") _favorite_list = _infoFetcher.userSettings.favoriteList.split("/");
		GameTimer.soundType = _infoFetcher.userSettings.byoyomi;
		board.setPieceType(_infoFetcher.userSettings.pieceType);
		board.piece_type34 = _infoFetcher.userSettings.pieceType34;
		board.highlight_movable = _infoFetcher.userSettings.highlightMovable;
	}
	
	//--------------------------------------------------------------------------------------------------------------------------------- PLAYER INFO WINDOW
	private function _handleSendPrivateChat(name:String):Function {
		return function(e:FlexEvent):void {
			_sendPrivateChat(name, e.target.text);
			e.target.text = "";
		}
	}
	
	//=========================================================
	//                       OTHERS
	//=========================================================
	
    private function _handleKeepAlive(e:Event):void {
	  _refresh();
//  	  if (mainViewStack.selectedIndex == 1) bulletin.flip();
    }

    private function _writeUserMessage(message:String, n:int, colorCode:String, bold:Boolean = false):void {
		var match:Array;
		message = message.replace(/</g, "&lt;");
//		if ((match = message.match(/\s(https?\:\/\/[^\"]+?)\s/))) message = message.replace(/\shttps?\:\/\/[^\"]+?\s/, " <u><a href=\"" + match[1] + "\" target=\"_blank\">" + match[1] + "</a></u> ");
		if ((match = message.match(/(https?\:\/\/[^\"^\s^\\]+)/))) message = message.replace(/https?\:\/\/[^\"^\s^\\]+/, "<u><a href=\"" + match[1] + "\" target=\"_blank\">" + match[1] + "</a></u>");
		message = "<font color='" + colorCode + "'>" + (bold ? "<b>" : "") + message + (bold ? "</b>" : "") + "</font>";
		message = message.replace(/\\n/g, "\n");
		switch (n) {
			case 1:
				_userMessageScrollPos1 = userMessage1.verticalScrollPosition
				userMessage1.htmlText += message;
				userMessage1.callLater(_scrollDown1);
				break;
			case 2:
				_userMessageScrollPos2 = userMessage2.verticalScrollPosition
				userMessage2.htmlText += message;
				userMessage2.callLater(_scrollDown2);
				break;		
		}
    }
	
	private function _imgUserMessage(src:String, n:int):void {
		switch (n) {
			case 1:
				userMessage1.htmlText += "<img src=\"" + src + "\" align=\"right\">";
				break;
			case 2:
				userMessage2.htmlText += "<img src=\"" + src + "\" align=\"right\">";
				break;
		}
	}
	
    private function _writePmLog(name:String, message:String, colorCode:String, bold:Boolean = false):void {
		var match:Array;
		message = message.replace(/</g, "&lt;");
		if ((match = message.match(/(https?\:\/\/[^\"^\s]+)/))) message = message.replace(/https?\:\/\/[^\"^\s]+/, "<u><a href=\"" + match[1] + "\" target=\"_blank\">" + match[1] + "</a></u>");
		message = "<font color='" + colorCode + "'>" + (bold ? "<b>" : "") + message + (bold ? "</b>" : "") + "</font>";
		if (!_pmLog[name]) _pmLog[name] = "";
		_pmLog[name] += message + "\n";
		trace(message);
    }

    private function _scrollDown1():void{
      if (_chat_auto_scroll1) userMessage1.verticalScrollPosition = userMessage1.maxVerticalScrollPosition;
	  else userMessage1.verticalScrollPosition = _userMessageScrollPos1;
    }

	private function _scrollDown2():void{
      if (_chat_auto_scroll2) userMessage2.verticalScrollPosition = userMessage2.maxVerticalScrollPosition;
	  else userMessage2.verticalScrollPosition = _userMessageScrollPos2;
    }

    private function _playerMove(from:Point, to:Point, promote:Boolean):void {
	  var str:String = board.position.generateMovementFromCoordinates(from, to, promote).toCSA();
	  if (!board.onListen) {
		  board.clearArrows(Board.ARROWS_SELF);
		  board.cancelSquareSelect();
		  if (board.isStudyHost) {
			  if (!String(kifuDataGrid.selectedItem.num).match(/^\*/)) _sendAutoChat("Launched study mode at #" + kifuDataGrid.selectedIndex);
		  }
		  var n:int = kifuDataGrid.selectedIndex;
		  if (board.kifu_list_self.length == 0) {
			for (var i:int = 0; i <= n; i++) board.kifu_list_self.push(board.kifu_list[i]);
		  }
		  while (board.kifu_list_self.length - 1 > n) board.kifu_list_self.pop();
		  if (board.post_game || board.viewing) {
			  board.makeMove(str + ",T0", false, true);
		  } else {
			  board.makeMove(str + ",T0", false, false);
		  }
		  kifuDataGrid.dataProvider = board.kifu_list_self;
		  kifuDataGrid.selectedIndex = board.kifu_list_self.length - 1;
		  kifuDataGrid.scrollToIndex(board.kifu_list_self.length - 1);
		  if (board.isStudyHost) _sendStudy();
	  } else {
		  _client.move(str);
	  }
    }
	
	private function _addMyArrow(fromType:int, from:Point, to:Point):void {
		if (board.isStudyHost || board.onListen) {
			_client.gameChat(_game_name, "[##ARROW]" + fromType + "," + from.x + "," + from.y + "," + to.x + "," + to.y + ",0x" + _arrow_color.toString(16));
		} else {
			board.addArrow(fromType, from, to, _arrow_color, "", Board.ARROWS_SELF, true);
		}
	}
	
	private function _sendStudy(sendTo:String = null):void {
		var str:String = "";
		for (var i:int = kifuDataGrid.selectedIndex; i >= 0; i--) {
			if (String(kifuDataGrid.dataProvider[i].num).match(/^\*/)) {
				str = "/" + kifuDataGrid.dataProvider[i].moveStr.split(",")[0] + str;
			} else {
				str = kifuDataGrid.dataProvider[i].num + str;
				break;
			}
		}
		if (!str.match(/\//)) str += "/*";
		str = "[##STUDY]" + str;
		if (sendTo) {
			_client.privateChat(sendTo, str);
		} else {
			_client.gameChat(_game_name, str);
		}
	}

    private function _checkTimeout():void {
		if (board.last_pos.turn == board.my_turn) {
			board.clientTimeout();
			_client.checkTimeout();
		} else {
			if (_disconnectAlertWindow) {
				_disconnectAlertWindow.declare();
				_disconnectAlertWindow = null;
			}
		}
    }
	
	private function _checkTimerLag():void {
		_writeUserMessage("Your timer is lagging by more than 5 sec due to CPU load. Time-up loss can occur earlier than your timer hits zero.", 2, "#FF0000", true);
		_sound_chat3.play();
	}
	
	private function _findPlayerFromList(str:String):Object {
		for (var i:int = 0; i < _user_list.length; i++) {
			if (_user_list[i].name == str) return _user_list[i];
		}
		return null;
	}
	
	private function _sendPrivateChat(sendTo:String, message:String):void {
		if (!_isDuringMyGame()) {
			var user:Object = _findPlayerFromList(sendTo);
			if (user && user.status == "game") {
				if  (_game_name && _monitoring && sendTo == board.playerInfos[0].name) {
					_client.privateChat(board.playerInfos[1].name, "[auto-PM] Sent private message to Black.");
					_client.gameChat(_game_name, "[auto-chat&PM] Sent private message to Black.");
				} else if (_game_name && _monitoring && sendTo == board.playerInfos[1].name) {
					_client.privateChat(board.playerInfos[0].name, "[auto-chat] Sent private message to White.");
					_client.gameChat(_game_name, "[auto-chat&PM] Sent private message to White.");
				} else {
					Alert.show("User is now playing.");
					return;
				}
			}
			_client.privateChat(sendTo, message);
			_writePmLog(sendTo, message, "#0033DD");
			if (_playerInfoWindows[sendTo]) {
				_playerInfoWindows[sendTo].pmText = _pmLog[sendTo];
				_playerInfoWindows[sendTo].pmCheckBox.selected = true;
				_playerInfoWindows[sendTo].togglePM();
				_playerInfoWindows[sendTo].callLater(_playerInfoWindows[sendTo].scrollDown);
				if (_chat_sound3_play) _sound_chat1.play();
			} else if (mainViewStack.selectedIndex == 1) {
				_writeUserMessage("PM To " + sendTo + ": " + message + "\n", 1, "#0033DD");
				if (_chat_sound1_play) _sound_chat1.play();
			} else {
				_writeUserMessage("PM To " + sendTo + ": " + message + "\n", 2, "#0033DD");
				if (_chat_sound2_play) _sound_chat2.play();
			}
		}
	}
  
  private function _sendAutoChat(str:String):void {
    if (_game_name) {
      _client.gameChat(_game_name, "[auto-chat] " + str);
    } else {
	  _client.chat("[auto-chat] " + str);
	}
  }
  
  private function _isDuringMyGame():Boolean {
	  return board.inGame;
//	  if (_game_name && board.isPlayer && !board.post_game) return true;
//	  return false;
  }
  
	//=========================================================
	//                       MXML PART
	//=========================================================
  
    ]]>
  </mx:Script>
  <mx:Component id="serverListRenderer">
	  <mx:HBox verticalAlign="middle" paddingLeft="2" paddingRight="0" height="100%" horizontalScrollPolicy="off">
		<mx:Image source="{data.icon}" width="25" height="25" />
		<mx:Label text="{data.name}" textAlign="left" paddingLeft="-9" paddingRight="-7" fontSize="10" width="80" />
	  </mx:HBox>
  </mx:Component>
  <mx:Component id="gameListBlackRenderer">
	  <mx:HBox horizontalAlign="left" paddingLeft="0" paddingRight="0" height="100%" horizontalScrollPolicy="off">
		<mx:Label text="{data.blackRank}" textAlign="right" width="40" paddingLeft="-9" paddingRight="-7" color="{data.blackRankColor}"/>
		<mx:Image filters="{[data.blackFlagFilter]}" source="{data.blackFlagURL}" width="27" height="17" toolTip="{data.blackCountry}"/>
		<mx:Label paddingLeft="-7" paddingRight="-7" text="{data.blackName}" color="{data.blackColor}" textDecoration="{data.blackDecoration}" width="85" textAlign="left" />
	  </mx:HBox>
  </mx:Component>
  <mx:Component id="gameListWhiteRenderer">
	  <mx:HBox horizontalAlign="right"  paddingLeft="0" paddingRight="0" height="100%" horizontalScrollPolicy="off">
		<mx:Label paddingLeft="-7" paddingRight="-7" text="{data.whiteName}" color="{data.whiteColor}" textDecoration="{data.whiteDecoration}" width="85" textAlign="right" />
		<mx:Image filters="{[data.whiteFlagFilter]}" source="{data.whiteFlagURL}" width="27" height="17" toolTip="{data.whiteCountry}" />
		<mx:Label text="{data.whiteRank}" textAlign="left" width="40" paddingLeft="-7" paddingRight="-9" color="{data.whiteRankColor}" />
	  </mx:HBox>
  </mx:Component>
  <mx:Component id="playerListNameRenderer">
	  <mx:HBox verticalAlign="middle" paddingLeft="3" paddingRight="0" height="100%" horizontalScrollPolicy="off">
		<mx:Label text="{data.favorite}" paddingLeft="-2" paddingRight="-13" width="{data.favoriteWidth}" color="#DD7700" />
		<mx:Label text="{data.name}" paddingLeft="-10" paddingRight="-7" width="120" />
	  </mx:HBox>
  </mx:Component>
  <mx:Component id="playerListCountryRenderer">
	  <mx:HBox verticalAlign="middle" paddingLeft="3" paddingRight="0" height="100%" horizontalScrollPolicy="off">
		<mx:Image source="{data.flagURL}" width="16" height="13" toolTip="{data.country}" />
		<mx:Label text="{data.country3}" textAlign="center" paddingLeft="-9" paddingRight="-7" width="18" toolTip="{data.country}" />
	  </mx:HBox>
  </mx:Component>
  <mx:Component id="waiterListNameRenderer">
	  <mx:HBox paddingLeft="2" paddingRight="0" height="100%" horizontalScrollPolicy="off">
		<mx:Image source="{data.flagURL}" width="27" height="17" toolTip="{data.country}" />
		<mx:Label text="■" paddingLeft="-6" paddingRight="-9" width="5" color="{data.rankColor}" />
		<mx:Label text="{data.name}" paddingLeft="-8" paddingRight="-7" width="100" />
	  </mx:HBox>
  </mx:Component>
  <mx:Component id="rankRenderer">
		<mx:Label text="{data.rank}" color="{data.rankColor}" paddingLeft="-8" paddingRight="-7" />
  </mx:Component>
  <mx:Component id="kifuSearchBlackRenderer">
	  <mx:HBox verticalAlign="middle" paddingLeft="2" paddingRight="0" height="100%" horizontalScrollPolicy="off">
		<mx:Image source="{data.blackFlagURL}" width="16" height="13" toolTip="{data.blackCountry}" />
		<mx:Label text="■" paddingLeft="-7" paddingRight="-9" width="5" color="{data.blackRankColor}" fontSize="9" />
		<mx:Label text="{data.black}" paddingLeft="-9" paddingRight="-7" width="80" />
	  </mx:HBox>
  </mx:Component>
  <mx:Component id="kifuSearchWhiteRenderer">
	  <mx:HBox verticalAlign="middle" paddingLeft="2" paddingRight="0" height="100%" horizontalScrollPolicy="off">
		<mx:Image source="{data.whiteFlagURL}" width="16" height="13" toolTip="{data.whiteCountry}" />
		<mx:Label text="■" paddingLeft="-7" paddingRight="-9" width="5" color="{data.whiteRankColor}" fontSize="9" />
		<mx:Label text="{data.white}" paddingLeft="-9" paddingRight="-7" width="80" />
	  </mx:HBox>
  </mx:Component>
  <mx:Fade id="hideLogin" alphaFrom="1.0" alphaTo="0.0" duration="1000" />
  <mx:ViewStack id="mainViewStack" creationPolicy="all" width="100%" height="100%">
<!-- =============================================================
                  VIEWSTACK INDEX = 0
================================================================== -->
    <mx:VBox id="loginBox" horizontalAlign="center" verticalAlign="middle" width="100%" height="100%" fontSize="11" hideEffect="{hideLogin}" verticalGap="4">
	  <mx:HBox width="672" horizontalAlign="right" horizontalGap="0" paddingBottom="0" paddingTop="0" paddingRight="0" paddingLeft="0">
		<mx:Label text="|" paddingLeft="-2" paddingRight="-11" />
		<mx:LinkButton paddingTop="-2" paddingBottom="0"  label="My Account" click="navigateToURL(new URLRequest('http://account.81dojo.com/'), 'quote')"/>
		<mx:Label text="|" paddingLeft="-2" paddingRight="-11" />
		<mx:LinkButton paddingTop="-2" paddingBottom="0"  label="81Dojo Top" click="navigateToURL(new URLRequest('http://81dojo.com/'), 'quote')"/>
		<mx:Label text="|" paddingLeft="-2" paddingRight="-11" />
	  </mx:HBox>
	  <mx:Image id="titleBanner" source="{DIRECTORY}images/81Dojo.jpg"/>
	  <mx:Label paddingTop="-2" paddingBottom="0" text="{VERSION}"/>
	  <mx:Spacer height="-10"/>
      <mx:Label paddingTop="-3" text="(powered by shogi-server and 81SquareUniverse.com)"/>
	  <mx:HBox verticalAlign="middle" horizontalGap="35" >
		  <mx:Form paddingBottom="0">
			<mx:FormItem label="{lan.language}" paddingTop="-2">
				<eightyOneSquare:LanguageSelector id="languageSelector"/>
			</mx:FormItem>
			<mx:FormItem label="{lan.loginname}" paddingTop="-2">
				<mx:TextInput id="loginname" width="150"/>
			</mx:FormItem>
			<mx:FormItem label="{lan.password}" paddingTop="-2">
				<mx:TextInput id="password" width="150" displayAsPassword="true"/>
			</mx:FormItem>
			<mx:FormItem label="" paddingTop="-2">
				<mx:CheckBox label="{lan.save_login_info}" id="savelogin" selected="false" />
			</mx:FormItem>
			<mx:FormItem paddingTop="-2">
				<mx:Button id="loginButton" label="{lan.login}" y="400" />
			</mx:FormItem>
			<mx:FormItem>
				<mx:Label paddingTop="-2" paddingBottom="0"  id="loginMessage" fontSize="10" />
				<mx:Label paddingTop="-2" paddingBottom="0"  id="errorMessage" color="#ff6666" fontSize="10" />
			</mx:FormItem>
		  </mx:Form>
		  <mx:DataGrid id="serverListGrid" sortableColumns="false" height="155">
			 <mx:columns>
			  <mx:DataGridColumn itemRenderer="{serverListRenderer}" headerText="{lan.server}" width="90" paddingLeft="0" />
			  <mx:DataGridColumn dataField="description" headerText="Description" width="80" paddingLeft="0" />
			  <mx:DataGridColumn dataField="population" headerText="Player" width="45" paddingLeft="0" textAlign="center" />
			  <mx:DataGridColumn dataField="alive" headerText="Alive" width="45" paddingLeft="0" textAlign="center" />
			 </mx:columns>
		  </mx:DataGrid>
	  </mx:HBox>
      <!-- <mx:LinkButton paddingTop="-2" label="Sign Up" fontSize="15" click="navigateToURL(new URLRequest('http://81dojo.dyndns.org:8000'), 'quote')" /> -->
      <mx:Label paddingTop="5" text="(c) Chief Programmer: Kota" fontSize="14" />
	  <mx:HBox paddingTop="-3">
		  <mx:Label text=" " doubleClickEnabled="true" doubleClick="_testLogin(1);"/>
		  <mx:Label text=" " doubleClickEnabled="true" doubleClick="_testLogin(2);"/>
		  <mx:Label text="(c) Administrative Co-programmer: Hidetchi" fontSize="12"/>
		  <mx:Label text=" " doubleClickEnabled="true" doubleClick="_testLogin(3);"/>
		  <mx:Label text=" " doubleClickEnabled="true" doubleClick="_testLogin(4);"/>
	  </mx:HBox>
	  <mx:Label paddingTop="10"  paddingBottom="0" text="- Materials -" fontSize="10" />
	  <mx:LinkButton paddingTop="-2" paddingBottom="0" label="CC Resources for Shogi Applications by muchonovski" click="navigateToURL(new URLRequest('http://www.muchonov.com/bona/'), 'quote')"/>
	  <mx:Spacer height="-10"/>
      <mx:LinkButton paddingTop="-2" paddingBottom="0"  label="www.otosozai.com - ONGAKUSITU" click="navigateToURL(new URLRequest('http://www.otosozai.com/'), 'quote')"/>
	  <mx:Spacer height="-10"/>
	  <mx:LinkButton paddingTop="-2" paddingBottom="0"  label="National flag and Road sign Mt." click="navigateToURL(new URLRequest('http://nflagrsign.xrea.jp/'), 'quote')"/>
    </mx:VBox>
<!-- =============================================================
                  VIEWSTACK INDEX = 1
================================================================== -->
	<mx:HBox paddingTop="10" paddingLeft="10">
    <mx:VBox fontSize="11">
      <mx:Panel id="userListPanel" titleStyleName="header81" width="975" height="560" paddingLeft="10" paddingTop="10" status="{VERSION}" horizontalScrollPolicy="off" verticalScrollPolicy="off" backgroundColor="#FFFFEE">
      <mx:HBox>
        <mx:Button id="refreshButton" icon="@Embed('images/icon_refresh.png')" toolTip="{lan.refresh}" click="_refresh();"/>
		<mx:Button id="searchViewButton" icon="@Embed('images/icon_search.png')" toolTip="{lan.search}" click="mainViewStack.selectedIndex=3;" />
        <mx:Button id="startButton" label="{lan.wait}" click="_newGameForm();"/>
        <mx:Button id="stopButton" label="{lan.stop}" click="_stopWaiting()" enabled="false" />
<!--        <mx:Button id="challengeButton" label="{lan.challenge}" enabled="false" toolTip="Double Click the Opponent to Challenge!!!" /> -->
		<mx:Button id="optionButton1" icon="@Embed('images/icon_gear.png')" toolTip="{lan.options}" click="_showOptions();" enabled="true"/>
		<mx:CheckBox id="muteCheck1" paddingRight="-8" click="_mute(muteCheck1.selected)" toolTip="{lan.mute}"/>
		<mx:Image source="@Embed('images/icon_mute.png')" click="_mute(!muteCheck1.selected)" toolTip="{lan.mute}"/>
		<mx:Button id="leaveButton" label="{lan.leave}" click="_leavePC();"/>
		<mx:Button id="logoutButton" label="{lan.logout}" click="_logout()"/>
		<mx:Button id="backToGameButton" label="{lan.back_to_game}" click="_backToGame();" visible="false" color="#FF0000" />
		<mx:Button id="adminButton" label="" click="_openAdminPanel();" visible="false"/>
      </mx:HBox>
	  <mx:HBox>
		<mx:VDividedBox liveDragging="true">
			<mx:DataGrid id="userListGrid" width="360" height="363" headerHeight="21" change="_userSelected();" rowHeight="20" doubleClickEnabled="true" doubleClick="_openPlayerInfo(userListGrid.selectedItem);" paddingTop="0" paddingBottom="0" verticalAlign="middle" click="_holdRefresh();">
			 <mx:columns>
			  <mx:DataGridColumn headerStyleName="header81" dataField="status2" headerText="{lan.status_short}" width="32" paddingLeft="0" paddingRight="0" textAlign="center" />
			  <mx:DataGridColumn headerStyleName="header81" dataField="titleName" headerText="{lan.title}" showDataTips="true" dataTipField="titleSubName" width="53" paddingLeft="0" textAlign="center" />
			  <mx:DataGridColumn headerStyleName="header81" itemRenderer="{rankRenderer}" headerText="{lan.rank}" width="49" paddingLeft="0" textAlign="center" sortable="false" />
			  <mx:DataGridColumn headerStyleName="header81" itemRenderer="{playerListNameRenderer}" headerText="{lan.name}" width="130" paddingLeft="1" sortCompareFunction="_sortName" />
			  <mx:DataGridColumn headerStyleName="header81" itemRenderer="{playerListCountryRenderer}" headerText="{lan.country}" width="65" paddingLeft="2" sortCompareFunction="_sortCountry" />
			  <mx:DataGridColumn headerStyleName="header81" dataField="rating" headerText="{lan.rate}" width="49" paddingRight="3" paddingLeft="0" textAlign="right" sortable="false" />
			 </mx:columns>
			</mx:DataGrid>
			<mx:DataGrid id="waiterListGrid" width="360" height="102" headerHeight="21" change="_waiterSelected();" rowHeight="20" doubleClickEnabled="true" doubleClick="_openPlayerInfo(_findPlayerFromList(waiterListGrid.selectedItem.name));" paddingTop="0" paddingBottom="0" verticalAlign="middle" click="_holdRefresh();">
			 <mx:columns>
			  <mx:DataGridColumn headerStyleName="header81" itemRenderer="{waiterListNameRenderer}" headerText="{lan.waiter}" width="120" paddingLeft="2" sortable="false" />
<!--			  <mx:DataGridColumn dataField="country3" headerText="{lan.country_short}" width="30" paddingLeft="0" textAlign="center" showDataTips="true" dataTipField="country" /> -->
			  <mx:DataGridColumn headerStyleName="header81" dataField="rating" headerText="{lan.rate}" width="35" paddingRight="3" textAlign="right" sortable="false" />
			  <mx:DataGridColumn headerStyleName="header81" dataField="time" dataTipField="timeTip" headerText="{lan.thinking_time}" width="40" paddingLeft="0" textAlign="center" showDataTips="true" />
			  <mx:DataGridColumn headerStyleName="header81" dataField="rated" headerText="R?" width="25" paddingLeft="0" textAlign="center" />
			  <mx:DataGridColumn headerStyleName="header81" dataField="handicap" headerText="{lan.handicap}" width="60" paddingLeft="0" textAlign="center" />
			 </mx:columns>
			</mx:DataGrid>
		</mx:VDividedBox>
		<mx:VBox>
			<mx:VDividedBox dividerRelease="userMessage1.callLater(_scrollDown1);" liveDragging="true">
				<mx:DataGrid id="gameListGrid" width="570" height="220" headerHeight="21" change="_gameSelected();" rowHeight="20" doubleClickEnabled="true" doubleClick="_watchDialog();" paddingTop="0" paddingBottom="0" verticalAlign="middle" click="_holdRefresh();">
				 <mx:columns>
				  <mx:DataGridColumn headerStyleName="header81" dataField="gameNo" headerText="No." width="23" paddingLeft="0" textAlign="center" sortable="false" />
<!--				  <mx:DataGridColumn dataField="blackRank" headerText="" width="55" paddingRight="2" textAlign="right" /> -->
<!--				  <mx:DataGridColumn dataField="blackFlagURL" headerText="" paddingLeft="0" paddingRight="0" itemRenderer="mx.controls.Image" width="27" resizable="false" /> -->
				  <mx:DataGridColumn headerStyleName="header81" itemRenderer="{gameListBlackRenderer}" headerText="{lan.black}(▲)" width="172" paddingLeft="0" paddingRight="0" textAlign="center" sortable="false" />
				  <mx:DataGridColumn headerStyleName="header81" itemRenderer="{gameListWhiteRenderer}" headerText="{lan.white}(△)" width="172" paddingLeft="0" paddingRight="0" textAlign="center" sortable="false" />
<!--				  <mx:DataGridColumn dataField="whiteFlagURL" headerText="" paddingLeft="0" paddingRight="0" itemRenderer="mx.controls.Image" width="27" resizable="false" /> -->
<!--				  <mx:DataGridColumn dataField="whiteRank" headerText="" width="55" paddingLeft="2" /> -->
				  <mx:DataGridColumn headerStyleName="header81" dataField="rule" dataTipField="ruleTip" headerText="{lan.rule}" width="78" paddingLeft="3" showDataTips="true" />
				  <mx:DataGridColumn headerStyleName="header81" dataField="status" headerText="{lan.status_short}" width="35" paddingLeft="0" textAlign="center" />
				  <mx:DataGridColumn headerStyleName="header81" dataField="watchers" headerText="{lan.monitor}" paddingLeft="0" textAlign="center" showDataTips="true" dataTipField="watcher_names" />
				  <mx:DataGridColumn fontFamily="Meiryo UI" dataField="opening" headerText="{lan.opening_short}" width="55" showDataTips="true" dataTipField="opening_en" paddingLeft="0" textAlign="center" />
				 </mx:columns>
				</mx:DataGrid>
				<mx:TextArea id="userMessage1" wordWrap="true" editable="false" width="570" height="215" fontSize="12" doubleClickEnabled="true" doubleClick="_playerInfoFromText(userMessage1);" fontFamily="Meiryo UI" leading="0" />
			</mx:VDividedBox>
			<mx:HBox>
				<mx:Label text="{lan.chat}"/>
				<mx:TextInput id="chatMessage1" width="430" fontFamily="Meiryo UI" />
				<mx:CheckBox id="autoScrollCheck1" label="{lan.auto_scroll}" selected="true" click="_change_auto_scroll1();" />
			</mx:HBox>
		</mx:VBox>
	  </mx:HBox>
      </mx:Panel>
<!--	  <mx:HBox paddingTop="5" fontSize="14" fontWeight="bold" width="975" horizontalAlign="center">
		  <mx:VBox horizontalAlign="center">
			  <mx:Label text="Los Angeles"/>
			  <mx:SWFLoader source="http://www.clocklink.com/clocks/5003-blue.swf?TimeZone=USA_LosAngeles" width="300" height="25"/>
		  </mx:VBox>
		  <mx:VBox horizontalAlign="center">
			  <mx:Label text="UTC"/>
			  <mx:SWFLoader source="http://www.clocklink.com/clocks/5003-green.swf?TimeZone=GMT" width="300" height="25"/>
		  </mx:VBox>
		  <mx:VBox horizontalAlign="center">
			  <mx:Label text="Tokyo"/>
			  <mx:SWFLoader source="http://www.clocklink.com/clocks/5003-red.swf?TimeZone=GMT0900" width="300" height="25"/>
		  </mx:VBox>
	  </mx:HBox> -->
<!--	  <mx:Label text="BAN" doubleClickEnabled="true" doubleClick="_client.send('%%BAN ' + chatMessage1.text);"/>
	  <mx:Label text="DEBAN" doubleClickEnabled="true" doubleClick="_client.send('%%DEBAN ' + chatMessage1.text);"/>
		<mx:Label text="MAINTENANCE" doubleClickEnabled="true" doubleClick="_client.send('%%MAINTENANCE ' + chatMessage1.text);"/>
	  <mx:Label text="GHOST" doubleClickEnabled="true" doubleClick="_client.send('%%GHOST ' + chatMessage1.text);"/> -->
	  <eightyOneSquare:WorldClockGadget id="clock" width="975" height="59"/>
    </mx:VBox>
	<eightyOneSquare:BulletinGadget id="bulletin" paddingLeft="8" />
	</mx:HBox>
<!-- =============================================================
                  VIEWSTACK INDEX = 2
================================================================== -->
    <mx:HBox id="boardBox">
	<mx:Panel width="100%" height="100%" headerHeight="0" backgroundColor="#FFcccc" borderThicknessBottom="0" borderThicknessLeft="0" borderThicknessRight="0" borderThicknessTop="0" paddingLeft="0" paddingRight="0" backgroundAlpha="0">
	<mx:HBox paddingLeft="3" paddingTop="3" horizontalGap="2">
      <mx:VBox verticalGap="0">
      <eightyOneSquare:Board id="board" width="782" height="474"/> 
      <mx:HBox horizontalGap="2">
        <mx:Panel id="messagePanel" fontSize="11" title="Message Panel" width="444" height="200" headerHeight="22" borderThicknessLeft="8" borderThicknessRight="8">
        <mx:TextArea id="userMessage2" wordWrap="true" editable="false" width="428" height="168" fontSize="12" doubleClickEnabled="true" doubleClick="_playerInfoFromText(userMessage2);" fontFamily="Meiryo UI" leading="0" />
        </mx:Panel>
        <mx:Panel id="controlPanel" fontSize="11" title="Control Panel" status="{VERSION}" width="336" height="200" verticalAlign="middle" paddingLeft="8" headerHeight="22" horizontalScrollPolicy="off" borderThicknessLeft="8" borderThicknessRight="8">
          <mx:HBox width="300">			
            <mx:Button id="resignButton" label="{lan.resign}" click="_resignAlert();"/>
            <mx:Button id="impasseButton" label="{lan.impasse}" click="_showImpasse();"/>
			  <mx:HBox width="100%" horizontalAlign="right">
				<mx:Button id="reverseButton" icon="@Embed('images/icon_flip.png')" toolTip="{lan.flip}" click="board.flipBoard();"/>
				<mx:Button id="closeButton" icon="@Embed('images/icon_door.png')" toolTip="{lan.close_game}" click="_closeGame();" enabled="false"/>           
			  </mx:HBox>
		  </mx:HBox>
          <mx:HBox width="300" horizontalAlign="right">
			<mx:Button id="shareKifuButton2" icon="@Embed('images/icon_share.png')" toolTip="{lan.share}" click="_shareKifu2();"/>
			<mx:Button id="rematchButton" icon="@Embed('images/icon_finger.png')" toolTip="{lan.rematch}" click="_rematch();"/>
			<mx:HBox width="100%" horizontalAlign="right" horizontalScrollPolicy="off" horizontalGap="5">
				<mx:Button id="rewindAllButton" label="|&lt;" enabled="false" click="replayByButton(-2);"/>
				<mx:Button id="rewindOneButton" label="&lt;" enabled="false" click="replayByButton(-1);"/>    
				<mx:Button id="forwardOneButton" label=">" enabled="false" click="replayByButton(1);"/>
				<mx:Button id="forwardAllButton" label=">|" enabled="false" click="replayByButton(2);"/>
			</mx:HBox>
          </mx:HBox>
		 <mx:HBox width="300" horizontalAlign="right">
			<mx:Button label="{lan.clear_arrows}" click="_clearArrows();"/>
		 </mx:HBox>
		 <mx:Spacer height="-20"/>
		 <mx:HBox verticalAlign="bottom">
			<mx:Label text="{lan.chat}"/>
			<mx:Button id="greetButton" icon="@Embed('images/icon_greet.png')" toolTip="{lan.greet}" click="_greetMenu();"/>
		 </mx:HBox>
		 <mx:TextInput id="chatMessage2" width="300" fontFamily="Meiryo UI" />
		 <mx:HBox>
			<mx:CheckBox id="autoScrollCheck2" label="{lan.auto_scroll}" selected="true" click="_change_auto_scroll2();" />
			<mx:Button id="optionButton2" icon="@Embed('images/icon_gear.png')" toolTip="{lan.options}" click="_showOptions();"/>
			<mx:CheckBox id="muteCheck2" paddingRight="-8" toolTip="{lan.mute}" click="_mute(muteCheck2.selected)"/>
			<mx:Image source="@Embed('images/icon_mute.png')" click="_mute(!muteCheck2.selected)" toolTip="{lan.mute}"/>
			<mx:Button id="checkLobbyButton" label="{lan.check_lobby}" enabled="true" click="_checkLobby();" />
		</mx:HBox>
        </mx:Panel>
      </mx:HBox>
      </mx:VBox>
        <mx:Panel id="sidePanel" title="Side Panel" width="176" height="674" headerHeight="22" horizontalScrollPolicy="off" verticalScrollPolicy="off" borderThicknessLeft="8" borderThicknessRight="8">
		  <mx:HBox paddingBottom="-2" horizontalGap="2">
			<mx:Label id="watcherListTitle" text="{lan.watchers}" fontWeight="bold" paddingRight="0" />
			<mx:Button id="refreshWatchersButton" icon="@Embed('images/icon_refresh.png')" toolTip="{lan.refresh}" fontSize="9" click="_refresh();"/>
			<mx:CheckBox id="allowWatcherChatCheckbox" toolTip="Allow Watcher Chat" click="_allowWatcherChat = allowWatcherChatCheckbox.selected;"/>
		  </mx:HBox>
		  <mx:VDividedBox dividerRelease="kifuDataGrid.callLater(_scrollDownKifu);" liveDragging="true">
			<mx:DataGrid id="watcherListGrid" width="160" height="152" rowHeight="20" headerHeight="21" doubleClickEnabled="true" doubleClick="_openPlayerInfo(_findPlayerFromList(watcherListGrid.selectedItem.name));" paddingTop="0" paddingBottom="0" verticalAlign="middle">
			 <mx:columns>
			  <mx:DataGridColumn itemRenderer="{playerListNameRenderer}" headerText="{lan.name}" width="72" paddingLeft="2" sortCompareFunction="_sortName" />
			  <mx:DataGridColumn itemRenderer="{playerListCountryRenderer}" headerText="{lan.country_short}" width="51" paddingLeft="2" sortCompareFunction="_sortCountry" />
			  <mx:DataGridColumn dataField="rate" headerText="{lan.rate}" width="37" paddingLeft="0" paddingRight="0" textAlign="right" sortCompareFunction="_sortRate" sortDescending="true" />
			 </mx:columns>
			</mx:DataGrid>
			<mx:VBox height="453">
				<mx:HBox paddingBottom="3">
					<mx:Label text="{lan.kifu}" fontWeight="bold"/>
					<mx:Button id="kifuCopyButton" icon="@Embed('images/icon_copy.png')" toolTip="{lan.copy}" click="System.setClipboard(_formatKIF());"/>
					<mx:Button id="kifuSaveButton" icon="@Embed('images/icon_save.png')" toolTip="{lan.save}" click="_saveKIF();" />
				</mx:HBox>
				  <mx:HBox paddingLeft="2" paddingTop="-3">
						<mx:RadioButtonGroup id="RadioGroupKifu" change="_toggleListen();" />
						<mx:RadioButton id="radioKifuReplay" groupName="RadioGroupKifu" label="{lan.replay}" />
						<mx:RadioButton id="radioKifuListen" groupName="RadioGroupKifu" label="{lan.listen}" />
				  </mx:HBox>
				<mx:DataGrid id="kifuDataGrid" sortableColumns="false" width="160" height="100%" change="kifuListSelected();" selectable="false" fontSize="10" rowHeight="20">
				 <mx:columns>
				  <mx:DataGridColumn headerText="No." dataField="num" width="35" textAlign="right" paddingRight="3" paddingLeft="0" />
				  <mx:DataGridColumn dataField="move"/>
				 </mx:columns>
				</mx:DataGrid>
			</mx:VBox>
		  </mx:VDividedBox>
        </mx:Panel>
	</mx:HBox>
	</mx:Panel>
    </mx:HBox>
<!-- =============================================================
                  VIEWSTACK INDEX = 3
================================================================== -->
	<mx:VBox paddingLeft="10" paddingTop="10">
    <mx:Panel id="searchPanel" title="{lan.search_panel}" paddingLeft="10" paddingTop="10" paddingBottom="10" paddingRight="10">
	  <mx:HBox>
		<mx:Accordion id="searchAccordion" width="820" height="560" selectedIndex="2">
			<mx:HBox label="{lan.kifu_search}" paddingTop="8" paddingLeft="8" width="820" height="530">
				<mx:VBox>
					<mx:HBox>
						<mx:Button id="searchKifuButton" icon="@Embed('images/icon_search.png')" toolTip="{lan.search}" click="_sendKifuSearch();" />
						<mx:Button id="shareKifuButton3" icon="@Embed('images/icon_share.png')" toolTip="Share" click="_shareKifu3();" fontSize="11" />
						<mx:Button label="{lan.close_search}" click="mainViewStack.selectedIndex=1;" fontSize="11" />
					</mx:HBox>
					<mx:HBox>
						<mx:Label text="{lan.name}"/>
						<mx:TextInput id="kifuSearchPlayerText" width="90" />
					</mx:HBox>
					<mx:Label text="From"/>
					<mx:DateChooser id="kifuSearchFromChooser" showToday="false" />
					<mx:Label text="To"/>
					<mx:DateChooser id="kifuSearchToChooser" showToday="false" />
				</mx:VBox>
				<mx:DataGrid id="kifuSearchGrid" width="615" height="470" rowHeight="21" headerHeight="21" doubleClickEnabled="true" doubleClick="_kifuSearchSelected();" paddingTop="0" paddingBottom="0" verticalAlign="middle">
					<mx:columns>
					<mx:DataGridColumn dataField="winner" headerText="{lan.result}" width="45" textAlign="center" paddingLeft="0" />
					<mx:DataGridColumn itemRenderer="{kifuSearchBlackRenderer}" headerText="{lan.black}" width="100" paddingLeft="0" />
					<mx:DataGridColumn itemRenderer="{kifuSearchWhiteRenderer}" headerText="{lan.white}" width="100" paddingLeft="0" />
					<mx:DataGridColumn dataField="rule" headerText="{lan.rule}" width="110" paddingLeft="2" />
					<mx:DataGridColumn dataField="opening" headerText="{lan.opening}" width="120" paddingLeft="2" />
					<mx:DataGridColumn dataField="moves" headerText="{lan.moves}" width="45" textAlign="center" paddingLeft="0" />
					<mx:DataGridColumn dataField="date" headerText="{lan.game_date}"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:HBox>
			<mx:VBox label="{lan.player_search}" paddingTop="10" paddingLeft="10" width="800" height="530">
				<mx:HBox>
					<mx:Label text="{lan.name}"/>
					<mx:TextInput id="playerSearchNameText"/>
					<mx:Button id="searchPlayerButton" icon="@Embed('images/icon_search.png')" toolTip="{lan.search}" click="_sendPlayerSearch();" />
					<mx:Button label="{lan.close_search}" click="mainViewStack.selectedIndex=1;" fontSize="11" />
				</mx:HBox>
				<mx:DataGrid id="playerSearchGrid" width="755" height="440" rowHeight="21">
					<mx:columns>
					<mx:DataGridColumn dataField="title" headerText="{lan.title}" width="50" textAlign="center" paddingLeft="0" />
					<mx:DataGridColumn dataField="rank" headerText="{lan.rank}" width="45" textAlign="center" paddingLeft="0" />
					<mx:DataGridColumn dataField="login" headerText="{lan.name}" width="95" />
					<mx:DataGridColumn dataField="flagURL" headerText="" paddingLeft="0" paddingRight="0" itemRenderer="mx.controls.Image" width="27" resizable="false" />
					<mx:DataGridColumn dataField="country" headerText="{lan.country}" width="80" />
					<mx:DataGridColumn dataField="rate" headerText="{lan.rate}" width="50" textAlign="right" paddingRight="5" />
					<mx:DataGridColumn dataField="wins" headerText="{lan.win}" width="43" textAlign="right" paddingRight="5" />
					<mx:DataGridColumn dataField="losses" headerText="{lan.loss}" width="43" textAlign="right" paddingRight="5" />
					<mx:DataGridColumn dataField="total" headerText="{lan.total}" width="43" textAlign="right" paddingRight="5" />
					<mx:DataGridColumn dataField="percentage" headerText="{lan.percentage_short}" width="50" textAlign="right" paddingRight="5" />
					<mx:DataGridColumn dataField="streak_best" headerText="{lan.streak_short}" width="50" textAlign="right" paddingRight="5" />
					<mx:DataGridColumn dataField="created_at" headerText="{lan.signed_up}" width="90" />
					<mx:DataGridColumn dataField="updated_at" headerText="{lan.last_updated}"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:VBox>
			<mx:HBox label="{lan.view_rankings}" horizontalAlign="center" paddingTop="10" paddingLeft="10" width="700" height="530">
				<mx:VBox horizontalAlign="center" paddingRight="20">
					<mx:SWFLoader id="rankingFlagLoader" width="56" height="44"/>
					<mx:Button id="searchRankingButton" icon="@Embed('images/icon_search.png')" toolTip="{lan.search}" click="_sendRankingSearch();" />
					<mx:Button label="{lan.close_search}" click="mainViewStack.selectedIndex=1;" fontSize="11" />
				</mx:VBox>
				<mx:TabNavigator id="rankingTabNavigator" paddingTop="8" paddingLeft="8" width="580" height="480" change="_rankingTabChange();">
					<mx:VBox label="{lan.rate}">
						<mx:DataGrid id="rateRankingGrid" width="550" height="440" rowHeight="21" sortableColumns="false">
							<mx:columns>
							<mx:DataGridColumn dataField="number" headerText="No." width="28" textAlign="center" />
							<mx:DataGridColumn dataField="rate" headerText="{lan.rate}" width="55" textAlign="right" paddingRight="5" fontWeight="bold" fontSize="12" />
							<mx:DataGridColumn dataField="login" headerText="{lan.name}" width="100" />
							<mx:DataGridColumn dataField="flagURL" headerText="" paddingLeft="0" paddingRight="0" itemRenderer="mx.controls.Image" width="27" resizable="false" />
							<mx:DataGridColumn dataField="country" headerText="{lan.country}" width="80" />
							<mx:DataGridColumn dataField="title" headerText="{lan.title}" width="55" textAlign="center" paddingLeft="0" />
							<mx:DataGridColumn dataField="rank" headerText="{lan.rank}" width="45" textAlign="center" paddingLeft="0" />
							<mx:DataGridColumn dataField="wins" headerText="{lan.win}" width="45" textAlign="right" paddingRight="5" />
							<mx:DataGridColumn dataField="losses" headerText="{lan.loss}" width="45" textAlign="right" paddingRight="5" />
							<mx:DataGridColumn dataField="percentage" headerText="{lan.percentage_short}" textAlign="right" paddingRight="5" />
							</mx:columns>
						</mx:DataGrid>
					</mx:VBox>
					<mx:VBox label="{lan.streak}">
						<mx:DataGrid id="streakRankingGrid" width="550" height="440" rowHeight="21" sortableColumns="false">
							<mx:columns>
							<mx:DataGridColumn dataField="number" headerText="No." width="28" textAlign="center" />
							<mx:DataGridColumn dataField="streak_best" headerText="{lan.streak_short}" width="55" textAlign="right" paddingRight="5" fontWeight="bold" fontSize="12" />
							<mx:DataGridColumn dataField="login" headerText="{lan.name}" width="100" />
							<mx:DataGridColumn dataField="flagURL" headerText="" paddingLeft="0" paddingRight="0" itemRenderer="mx.controls.Image" width="27" resizable="false" />
							<mx:DataGridColumn dataField="country" headerText="{lan.country}" width="80" />
							<mx:DataGridColumn dataField="title" headerText="{lan.title}" width="55" textAlign="center" paddingLeft="0" />
							<mx:DataGridColumn dataField="rank" headerText="{lan.rank}" width="45" textAlign="center" paddingLeft="0" />
							<mx:DataGridColumn dataField="wins" headerText="{lan.win}" width="45" textAlign="right" paddingRight="5" />
							<mx:DataGridColumn dataField="losses" headerText="{lan.loss}" width="45" textAlign="right" paddingRight="5" />
							<mx:DataGridColumn dataField="rate" headerText="{lan.rate}" textAlign="right" paddingRight="5"/>
							</mx:columns>
						</mx:DataGrid>
					</mx:VBox>
					<mx:VBox label="{lan.percentage}">
						<mx:DataGrid id="percentageRankingGrid" width="550" height="440" rowHeight="21" sortableColumns="false">
							<mx:columns>
							<mx:DataGridColumn dataField="number" headerText="No." width="28" textAlign="center" />
							<mx:DataGridColumn dataField="percentage" headerText="{lan.percentage_short}" width="55" textAlign="right" paddingRight="5" fontWeight="bold" fontSize="12" />
							<mx:DataGridColumn dataField="login" headerText="{lan.name}" width="100" />
							<mx:DataGridColumn dataField="flagURL" headerText="" paddingLeft="0" paddingRight="0" itemRenderer="mx.controls.Image" width="27" resizable="false" />
							<mx:DataGridColumn dataField="country" headerText="{lan.country}" width="80" />
							<mx:DataGridColumn dataField="title" headerText="{lan.title}" width="55" textAlign="center" paddingLeft="0" />
							<mx:DataGridColumn dataField="rank" headerText="{lan.rank}" width="45" textAlign="center" paddingLeft="0" />
							<mx:DataGridColumn dataField="wins" headerText="{lan.win}" width="45" textAlign="right" paddingRight="5" />
							<mx:DataGridColumn dataField="losses" headerText="{lan.loss}" width="45" textAlign="right" paddingRight="5" />
							<mx:DataGridColumn dataField="rate" headerText="{lan.rate}" textAlign="right" paddingRight="5"/>
							</mx:columns>
						</mx:DataGrid>
					</mx:VBox>
					<mx:VBox label="{lan.wins}">
						<mx:DataGrid id="winRankingGrid" width="550" height="440" rowHeight="21" sortableColumns="false">
							<mx:columns>
							<mx:DataGridColumn dataField="number" headerText="No." width="28" textAlign="center" />
							<mx:DataGridColumn dataField="wins" headerText="{lan.win}" width="55" textAlign="right" paddingRight="5" fontWeight="bold" fontSize="12" />
							<mx:DataGridColumn dataField="login" headerText="{lan.name}" width="100" />
							<mx:DataGridColumn dataField="flagURL" headerText="" paddingLeft="0" paddingRight="0" itemRenderer="mx.controls.Image" width="27" resizable="false" />
							<mx:DataGridColumn dataField="country" headerText="{lan.country}" width="80" />
							<mx:DataGridColumn dataField="title" headerText="{lan.title}" width="55" textAlign="center" paddingLeft="0" />
							<mx:DataGridColumn dataField="rank" headerText="{lan.rank}" width="45" textAlign="center" paddingLeft="0" />
							<mx:DataGridColumn dataField="total" headerText="{lan.total}" width="45" textAlign="right" paddingRight="5" />
							<mx:DataGridColumn dataField="percentage" headerText="{lan.percentage_short}" width="45" paddingRight="5" textAlign="right" />
							<mx:DataGridColumn dataField="rate" headerText="{lan.rate}" textAlign="right" paddingRight="5"/>
							</mx:columns>
						</mx:DataGrid>
					</mx:VBox>
					<mx:VBox label="{lan.total_games}">
						<mx:DataGrid id="totalRankingGrid" width="550" height="440" rowHeight="21" sortableColumns="false">
							<mx:columns>
							<mx:DataGridColumn dataField="number" headerText="No." width="28" textAlign="center" />
							<mx:DataGridColumn dataField="total" headerText="{lan.total}" width="55" textAlign="right" paddingRight="5" fontWeight="bold" fontSize="12" />
							<mx:DataGridColumn dataField="login" headerText="{lan.name}" width="100" />
							<mx:DataGridColumn dataField="flagURL" headerText="" paddingLeft="0" paddingRight="0" itemRenderer="mx.controls.Image" width="27" resizable="false" />
							<mx:DataGridColumn dataField="country" headerText="{lan.country}" width="80" />
							<mx:DataGridColumn dataField="title" headerText="{lan.title}" width="55" textAlign="center" paddingLeft="0" />
							<mx:DataGridColumn dataField="rank" headerText="{lan.rank}" width="45" textAlign="center" paddingLeft="0" />
							<mx:DataGridColumn dataField="wins" headerText="{lan.win}" width="45" textAlign="right" paddingRight="5" />
							<mx:DataGridColumn dataField="losses" headerText="{lan.loss}" width="45" textAlign="right" paddingRight="5" />
							<mx:DataGridColumn dataField="rate" headerText="{lan.rate}" textAlign="right" paddingRight="5" />
							</mx:columns>
						</mx:DataGrid>
					</mx:VBox>
				</mx:TabNavigator>
			</mx:HBox>
		</mx:Accordion>
	  </mx:HBox>
    </mx:Panel>
    </mx:VBox>
  </mx:ViewStack>
</mx:Application>

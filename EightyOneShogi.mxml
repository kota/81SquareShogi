<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" backgroundColor="0xcccc77" creationComplete="{initApp()}" xmlns:eightyOneSquare="*" frameRate="24">
	<mx:Style>
		Alert {
			fontSize : 13px;
		}
	</mx:Style>
	<mx:Script>
    <![CDATA[
    import flash.display.*;
	import flash.events.Event;
	import flash.events.MouseEvent;
	import flash.events.TimerEvent;
	import flash.media.SoundTransform;
	import flash.net.URLVariables;
	import flash.utils.Timer;
    import mx.events.FlexEvent;
    import mx.events.CloseEvent;
    import flash.media.Sound;
    import mx.controls.*;
    import mx.managers.PopUpManager;
    import mx.core.IFlexDisplayObject;
    import CsaShogiClient;
	import InfoFetcher;
    import Board;
	import GameTimer;
    import ChallengeForm;
    import GameRuleEvent;
    import mx.utils.StringUtil;
	
	private const VERSION:String = "ver.2010/10/03";

    private var _client:CsaShogiClient;
    [Bindable]
    private var _game_name:String;
    private var _user_list:Array;
	private var _waiter_list:Array;
	private var _game_list:Array;
    private var _login_name:String;
	private var _player_infos:Array = new Array;
	private var _watch_game:Object;
    private var _monitoring:Boolean;
    private var _challenging:Boolean = false;
	[Bindable]
	private var _lastChatTime:String;

    [Embed(source = "/sound/win.mp3")]
    private var Sound_win:Class;
    private var _sound_win:Sound = new Sound_win();
    [Embed(source = "/sound/lose.mp3")]
    private var Sound_lose:Class;
    private var _sound_lose:Sound = new Sound_lose();
    [Embed(source = "/sound/chat_board.mp3")]
    private var Sound_chat1:Class;
    private var _sound_chat1:Sound = new Sound_chat1();
    [Embed(source = "/sound/chat_board.mp3")]
    private var Sound_chat2:Class;
    private var _sound_chat2:Sound = new Sound_chat2();
    [Embed(source = "/sound/chat_namecall.mp3")]
    private var Sound_chat3:Class;
    private var _sound_chat3:Sound = new Sound_chat3();
    [Embed(source = "/sound/challenger.mp3")]
    private var Sound_challenger:Class;
    private var _sound_challenger:Sound = new Sound_challenger();
    private var _end_sound_play:Boolean = true;
    private var _chat_sound1_play:Boolean = true;
    private var _chat_sound2_play:Boolean = true;
	private var _chat_auto_scroll1:Boolean = true;
	private var _chat_auto_scroll2:Boolean = true;
	private var _regExpCalled:RegExp;
	private var _ur_total_selected:int = 3;
	private var _ur_byoyomi_selected:int = 4;
	private var _ur_handicap_selected:int = 0;
	private var _userMessageScrollPos1:int;
	private var _userMessageScrollPos2:int;
	private var _post_game:Boolean = true;
	private var _initPositionStr:String;
    private var _keepAliveTimer:Timer;
	private var _challengerTicker:Timer;
	private var _infoFetcher:InfoFetcher;
	
    private var _optionWindow:OptionDialog;
	private var _newGameWindow:NewGameForm; 
    private var _playerInfoWindow:PlayerInfoWindow;
	private var _challengerAlertWindow:ChallengerAlertWindow;
	private var _gameResultWindow:GameResultWindow;

    private function initApp():void
    {
      trace("application initialized..");
      _client = new CsaShogiClient();
      board.setMoveCallback(_playerMove);
      board.setTimeoutCallback(_checkTimeout);
      chatMessage1.addEventListener(FlexEvent.ENTER,_handleSendChat1);
      chatMessage2.addEventListener(FlexEvent.ENTER,_handleSendChat2);
      loginname.addEventListener(FlexEvent.ENTER,_handleLogin);
      password.addEventListener(FlexEvent.ENTER, _handleLogin);
	  board.name_labels[0].addEventListener(MouseEvent.DOUBLE_CLICK, _gamePlayerInfo);
	  board.name_labels[1].addEventListener(MouseEvent.DOUBLE_CLICK, _gamePlayerInfo);
	  _challengerTicker = new Timer(1000);
	  _challengerTicker.addEventListener(TimerEvent.TIMER, _challengerTickHandler);
	  _infoFetcher = new InfoFetcher();
      _user_list = new Array();
      userListGrid.dataProvider = _user_list;
    }

    private function _connectAndLogin():void{
      trace("connecting.");
      _client.addEventListener(CsaShogiClient.CONNECTED,_handleConnected);
      _client.addEventListener(CsaShogiClient.LOGIN,_handleLoggedIn);
      _client.addEventListener(CsaShogiClient.LOGIN_FAILED, _handleLoginFailed);
	  _client.addEventListener(CsaShogiClient.LOGOUT_COMPLETED, _handleLogout);
      _client.addEventListener(CsaShogiClient.GAME_STARTED,_handleGameStarted);
      _client.addEventListener(CsaShogiClient.GAME_END,_handleGameEnd);
      _client.addEventListener(CsaShogiClient.CHAT, _handleChat);
	  _client.addEventListener(CsaShogiClient.GAMECHAT, _handleGameChat);
      _client.addEventListener(CsaShogiClient.MOVE,_handleMove);
      _client.addEventListener(CsaShogiClient.WHO,_handleWho);
      _client.addEventListener(CsaShogiClient.MONITOR,_handleMonitor);
      _client.addEventListener(CsaShogiClient.LIST, _handleList);
      _client.addEventListener(CsaShogiClient.GAME_SUMMARY, _handleGameSummary);
      _client.addEventListener(CsaShogiClient.REJECT, _handleReject);
      _client.addEventListener(CsaShogiClient.WATCHERS, _handleWatchers);
      loginMessage.text = "Connecting...";
      errorMessage.text = "";
      _client.connect();
    } 

    private function _handleKeepAlive(e:Event):void {
	  _refresh();
    }

    private function _handleLogin(e:Event):void{
      _connectAndLogin();
    }
	
	private function _testLogin(i:int):void {
		loginname.text = "test" + i;
		password.text = "81dojo" + i;
		_connectAndLogin();
	}
	
	private function _localLogin():void {
		_client.setHostToLocal();
		loginButton.setStyle("color", '#FF0000');
	}
	
	private function _logout():void {
		_client.logout();
	}
	
	private function _handleLogout(e:ServerMessageEvent):void {
		_keepAliveTimer.stop();
		loginMessage.text = "logged out successfully";
		titleBanner.source = "http://www.81squareuniverse.com/dojo/images/81Dojo_bye.jpg";
		loginButton.enabled = false;
		mainViewStack.selectedIndex = 0;
	}
    
    private function _handleConnected(e:Event):void{
      loginMessage.text = "Logging in...";
      _client.login(loginname.text, password.text);
      _login_name = loginname.text;
	  _regExpCalled = new RegExp("@" + _login_name.toLowerCase(), "i");
    } 

    private function _handleLoggedIn(e:Event):void{
      loginMessage.text = "Logged in Successfully";
      mainViewStack.selectedIndex = 1;
	  _infoFetcher.addEventListener("loadComplete", _handleLoadOption);
	  _infoFetcher.loadSettings(_login_name.toLowerCase());
      _keepAliveTimer = new Timer(30000);
      _keepAliveTimer.addEventListener(TimerEvent.TIMER,_handleKeepAlive);
	  _refresh();
	  _writeUserMessage(_infoFetcher.initMessage + "\n\n", 1);
	  if (VERSION != _infoFetcher.newestVer) _writeUserMessage("CAUTION: This version is old! The newest is " + _infoFetcher.newestVer + ". Please reload!\n", 1);
	  if (_chat_sound1_play) _sound_chat1.play();
    }

    private function _handleLoginFailed(e:ServerMessageEvent):void{
      loginMessage.text = "";
      errorMessage.text = e.message;
    }

    private function _handleChat(e:ServerMessageEvent):void{
		var mNum:int = _messageAudible(e.message);
        _writeUserMessage(_format_message(e.message), mNum);
		if (mNum == 1 && mainViewStack.selectedIndex == 1 && _chat_sound1_play) {
			if (e.message.match(_regExpCalled)) {
				_sound_chat3.play();
			} else {
				_sound_chat1.play();
			}
		} else if (mNum == 2 && _chat_sound2_play) {
			if (e.message.match(_regExpCalled)) {
				_sound_chat3.play();
			} else {
				_sound_chat1.play();
			}
		}
    }
	
    private function _handleGameChat(e:ServerMessageEvent):void {
		_writeUserMessage(e.message.substr(12), 2);
		if (_chat_sound2_play){
			if (e.message.match(_regExpCalled)) {
				_sound_chat3.play();
			} else {
				_sound_chat1.play();
			}
		}
    }

    private function _format_message(message:String):String{
      message = message.substr(8);
      var match:Array = message.match(/(\[.+?\]) ([^ ]+?\+[^ ]+?\-[0-9]+?\-[0-9]+?\+[^ ]+?\+[^ ]+?\+[0-9]*) (.*)/);
      if(match != null){
        message = match[1] + " " + match[3] + "\n";
      }
      return message;
    }

    private function _messageAudible(message:String):int{
		var sender_name:String = message.match(/\#\#\[CHAT\]\[(.*)\]/)[1];
        var match:Array = message.match(/\#\#\[CHAT\]\[(.*)\] ([^ ]+?\+[^ ]+?\-[0-9]+?\-[0-9]+?\+[^ ]+?\+[^ ]+?\+[0-9]*) (.*)/);
        if(match != null){
          var game_name:String = match[2];
          if (_game_name && _game_name == game_name) {
			  if (board.inGame) {
				  if (_isPlayer(sender_name)) return 2;
				  else return 0;
			  } else return 2;
          } else return 0;
        } else return 1;
          //No game id => public chat.
    }

    private function _isPlayer(user_name:String):Boolean{
      return board.playerNames != null && board.playerNames[0] == user_name || board.playerNames[1] == user_name
    }

    private function _handleMove(e:ServerMessageEvent):void {
      board.makeMove(e.message);
      kifuDataGrid.dataProvider = board.kifu_list;
      kifuDataGrid.scrollToIndex(board.kifu_list.length+1);
    }
  
  private function _handleGameSummary(e:ServerMessageEvent):void {
	  _initPositionStr = "";
	  for each(var line:String in e.message.split("\n")) {
		  if (line.match(/^P[0-9\+\-]/)) _initPositionStr += line + "\n";
	  }
    if (_challenging) {
      _client.agree();
    } else {
	  _refresh();
	  var challengerName:String = _login_name == e.message.split("\n")[0] ? e.message.split("\n")[1] : e.message.split("\n")[0];
      _sound_challenger.play();
	  _challengerTicker.reset();
	  _challengerTicker.start();
      _challengerAlertWindow = ChallengerAlertWindow(PopUpManager.createPopUp(this, ChallengerAlertWindow, true));
      PopUpManager.centerPopUp(_challengerAlertWindow);
      with(_challengerAlertWindow){
        title = "Here comes a new challenger!!";
		remainTime = 20;
		user = _findPlayerFromList(challengerName);
        acceptButton.addEventListener("click", _handleChallengerAcceptButton);
		rejectButton.addEventListener("click", _handleChallengerRejectButton);
      }
    }
  }
  
  private function _handleChallengerAcceptButton(e:MouseEvent):void {
	  _challengerTicker.reset();
	  _client.agree();
  }
  
  private function _handleChallengerRejectButton(e:MouseEvent):void {
	  _challengerTicker.reset();
	  _client.reject();
  }
	
	private function _challengerTickHandler(e:TimerEvent):void {
		_challengerAlertWindow.remainTime -= 1
		if (_challengerAlertWindow.remainTime <= 0) {
			_challengerTicker.reset();
			_client.reject();
			PopUpManager.removePopUp(_challengerAlertWindow);
		}
	}
  
  private function _handleReject(e:ServerMessageEvent):void {
	if (_challenging) {
		_writeUserMessage("Rejected by the opponent.\n", 1);
		_challenging = false;
	}
  }

    private function _handleWatchers(e:ServerMessageEvent):void{
      var watchers:Array = e.message.split("\n");
      var watcher_list:Array = new Array();
      for each(var watcher_data:String in watchers){
        if(watcher_data.match(/^##\[WATCHERS\] \+OK$/)){
          break;
        }
        var watcher:Object = new Object();
        var match:Array = watcher_data.match(/^##\[WATCHERS\] (.*) (\d+) (\d+)$/);
        if(match){
          watcher.name = match[1];
		  watcher.rating = parseInt(match[2]);
		  watcher.country = _infoFetcher.country_names3[parseInt(match[3])];
          watcher_list.unshift(watcher);
        }
      }
      watcherListGrid.dataProvider = watcher_list;
	  watcherListTitle.text = "Watchers (" + watcher_list.length +")";
    }

    private function _handleGameStarted(e:ServerMessageEvent):void {
	  _challenging = false;
	  if(_game_name && _monitoring){
        _client.monitorOff(_game_name);
        _monitoring = false;
		board.closeGame();
      }
	  _post_game = false;
	  for (var j:int = 0; j < 2 ; j++) {
		_player_infos[j] = _findPlayerFromList(_client.playerNames[j]);
	  }
      var match:Array = e.message.match(/^START:(.*)\+(.*)-([0-9]*)-([0-9]*)/);
      _game_name = e.message.substr(6);
	  if (_game_name.split("+")[1].match(/^hc/)) {
		  board.superior = Kyokumen.GOTE;
	  } else if (_player_infos[0].rating > _player_infos[1].rating) {
		  board.superior = Kyokumen.SENTE;
	  } else {
		  board.superior = Kyokumen.GOTE;		  
	  }
      board.startGame(_initPositionStr, _client.myTurn, _client.playerNames, _player_infos,match[3], match[4]);
	  _client.watchers(_game_name);
      userMessage2.text = _infoFetcher.gameMessage + "\n\n";
      if(_client.myTurn == Kyokumen.SENTE){
        _writeUserMessage("You are Black " + (_game_name.split("+")[1].match(/^hc/) ? "(Handicap taker).\n" : "(Sente).\n"),2);
      } else {
        _writeUserMessage("You are White " + (_game_name.split("+")[1].match(/^hc/) ? "(Handicap giver).\n" : "(Gote).\n"),2);
      }
	  startButton.enabled = false;
      stopButton.enabled = false;
      closeButton.enabled = false;
      resignButton.enabled = true;
      rewindAllButton.enabled = false;
      rewindOneButton.enabled = false;
      forwardOneButton.enabled = false;
      forwardAllButton.enabled = false;
      kifuDataGrid.selectable = false;
	  logoutButton.enabled = false;
      kifuDataGrid.dataProvider = board.kifu_list;
      mainViewStack.selectedIndex = 2;
    }

    private function _handleGameEnd(e:ServerMessageEvent):void {
      var kifuMove:Object = new Object();
	  _post_game = true;
      kifuMove.num = board.kifu_list.length;
      if(e.message.indexOf("TIME_UP") >= 0){
        board.timeout();
        //_writeUserMessage("Time up.\n",2);
		if (board.position.turn == board.my_turn) _sendAutoChat("Time out.");
        kifuMove.move = (board.position.turn == Kyokumen.SENTE ? "▲" : "△") + "Time up";
        kifuMove.moveKIF = "切れ負け";
        board.kifu_list.push(kifuMove);
	  } else if (e.message.indexOf("DISCONNECT") >= 0) {
        _writeUserMessage("Opponent disconnected.\n",2);
      } else if(e.message.indexOf("ILLEGAL_MOVE") >= 0){
        _writeUserMessage("Illegal Move.\n",2);
          kifuMove.move = "Illegal Move";
          kifuMove.moveKIF = "相手の反則にて勝ち";
          board.kifu_list.push(kifuMove);
      } else if (e.message.indexOf("RESIGN") >= 0) {
        _writeUserMessage((board.position.turn == board.my_turn ? "You" : "Opponent") + " resigned.\n",2);
//		if (board.position.turn == board.my_turn) _sendAutoChat("I resign.");
        kifuMove.move = (board.position.turn == Kyokumen.SENTE ? "▲" : "△") + "Resign";
        kifuMove.moveKIF = "投了";
        board.kifu_list.push(kifuMove);
      } else if (e.message.indexOf("OUTE_SENNICHITE") >= 0) {
        _writeUserMessage("Illegal Perpetual Check.\n", 2);
		kifuMove.move = "Perpetual Check";
		kifuMove.moveKIF = "王手千日手";
		board.kifu_list.push(kifuMove);
      } else if (e.message.indexOf("SENNICHITE") >= 0) {
        _writeUserMessage("Sennichite. (Repetition)\n", 2);
		kifuMove.move = "Repetition Draw";
		kifuMove.moveKIF = "千日手";
		board.kifu_list.push(kifuMove);
      }
      if(e.message.indexOf("LOSE") >= 0){
		_openGameResultWindow(-1);
        _writeUserMessage("### You Lose ###\n",2);
        if (_end_sound_play) _sound_lose.play();
      } else if(e.message.indexOf("WIN") >= 0){
		_openGameResultWindow(1);
        _writeUserMessage("### You Win ###\n",2);
        if (_end_sound_play) _sound_win.play();
      } else if(e.message.indexOf("DRAW") >=0){
		_openGameResultWindow(0);
        _writeUserMessage("### Draw ###\n",2);
        if (_end_sound_play) _sound_win.play();
      }
      closeButton.enabled = true;
      resignButton.enabled = false;
      kifuCopyButton.enabled = true;
      rewindAllButton.enabled = true;
      rewindOneButton.enabled = true;
      forwardOneButton.enabled = true;
      forwardAllButton.enabled = true;
	  startButton.enabled = true;
      kifuDataGrid.dataProvider = board.kifu_list;
      kifuDataGrid.scrollToIndex(board.kifu_list.length+1);
      kifuDataGrid.selectable = true;
      kifuDataGrid.selectedIndex = board.kifu_list.length;
      board.endGame();
    }
	
	private function _openGameResultWindow(v:int):void {
	  _gameResultWindow = GameResultWindow(PopUpManager.createPopUp(this, GameResultWindow, false));
      PopUpManager.centerPopUp(_gameResultWindow);
	  _gameResultWindow.initWindow(v);
	}

    private function _handleWho(e:ServerMessageEvent):void{
      var users:Array = e.message.split("\n");
      var user_list:Array = new Array();
	  var waiter_list:Array = new Array();
      for each(var user_data:String in users){
        if(user_data.match("##[WHO] +OK") != null){
          break;
        }
        trace("user_data:" + user_data);
        var match:Array = user_data.match(/\#\#\[WHO\] (.*) x1 (.*)/);
        if(match != null){
          var user:Object = {
			  'name':match[1],
			  'status':StringUtil.trim(match[2].split(" ")[0]),
			  'status2':"",
			  'opponent':"",
			  'game_name':match[2].split(" ")[1],
			  'turn':match[2].split(" ")[2],
			  'rating':parseInt(match[2].split(" ")[3]),
			  'country_code':parseInt(match[2].split(" ")[4]),
			  'titleName':"",
			  'monitor_game':match[2].split(" ")[6],
			  'moves':match[2].split(" ")[7],
			  'wins':match[2].split(" ")[8],
			  'losses':match[2].split(" ")[9], 
			  'streak':match[2].split(" ")[10], 
			  'streak_best':match[2].split(" ")[11], 
			  'medals':0
			  }
		  user.country = _infoFetcher.country_names[user.country_code];
		  user.opponent = match[2].split(" ")[5] == "*" ? "" : match[2].split(" ")[5];
		  user.wins = match[2].split(" ")[8];
		  user.losses = match[2].split(" ")[9]; 
		  user.streak = match[2].split(" ")[10]; 
		  user.streak_best = match[2].split(" ")[11]; 
		  if (user.monitor_game != "*") user.status2 = "M ";
          if(user.status == "game_waiting" || user.status == "game" || user.status == "post_game"){
            var game_info:Array = user.game_name.match(/^([0-9a-z]+)_(.*)-([0-9]*)-([0-9]*)/);
            var total:int = parseInt(game_info[3]) / 60;
			var hc:String;
			if (game_info[1] == "r") {
				hc = "R";
			} else if (game_info[1].match(/^hc/)) {
				hc = "HC";
			} else {
				hc = "NR";
			}
            user.rule = hc + ": " + total + "-" + game_info[4];
            if(user.status == "game_waiting"){
              user.status2 += "W";
            } else if (user.status == "post_game") {
				user.status2 = "P"; // + (user.turn == "+" ? "▲" : "△");
			} else {
              user.status2 = "G"; // + (user.turn == "+" ? "▲" : "△) " + user.moves;
            }
          }
          user_list.push(user);
        }
      }

	  for (var j:int = 0; j < _infoFetcher.titleUser.length; j++) {
		  for (var i:int = 0; i < user_list.length; i++) {
			  if (user_list[i].name.toLowerCase() == _infoFetcher.titleUser[j]) {
				  user_list[i].titleName = _infoFetcher.titleName[j];
				  if (_infoFetcher.titleName[j] == "livebot") {
					  user_list[i].rating = 3000;
				  }
				  break;
			  }
		  }
	  }
	  for (i = 0; i < user_list.length; i++) {
		  user_list[i].rank = _infoFetcher.makeRankFromRating(user_list[i].rating);
		  if (user_list[i].rating >= 1090) user_list[i].medals += 1;
		  if (user_list[i].wins >= 10) user_list[i].medals += 1;
		  if (user_list[i].streak_best >= 5) user_list[i].medals += 1;
		  if ((user_list[i].wins + user_list[i].losses >= 10) && ((user_list[i].wins/(user_list[i].wins + user_list[i].losses)) >= 0.7)) user_list[i].medals += 1;
		  if (user_list[i].titleName != "") user_list[i].medals += 1;
		  if (user_list[i].status2.match(/W/)) {
			  user = {
				  'name':user_list[i].name,
				  'rating':user_list[i].rating,
				  'game_name': user_list[i].game_name,
				  'country':_infoFetcher.country_names3[user_list[i].country_code]
				  }
		  	  game_info = user.game_name.match(/^([0-9a-z]+)_(.*)-([0-9]*)-([0-9]*)/);
			  total = parseInt(game_info[3]) / 60;
			  if (game_info[1] == "r") {
				  user.rated = "R"
			  } else {
				  user.rated = "NR"
			  }
			  user.handicap = InfoFetcher.gameTypeShort(game_info[1]);
			  user.time = total + "-" + game_info[4] ;
			  waiter_list.push(user);
		  }
	  }

      user_list.sortOn("rating", Array.NUMERIC | Array.DESCENDING);
	  _user_list = user_list;
      userListGrid.dataProvider = _user_list;
      for (i = 0; i < user_list.length; i++) {
        if (_user_list[i].name == _login_name) {
          userListGrid.selectedIndex = i;
		  userListGrid.scrollToIndex(i + 1);
          break;
        }
      }
	  userListPanel.title = "Main Lobby (" + _user_list.length + " players)";
	  
	  waiter_list.sortOn("rating", Array.NUMERIC | Array.DESCENDING);
	  _waiter_list = waiter_list;
	  waiterListGrid.dataProvider = _waiter_list;
    }

    private function _writeUserMessage(message:String, n:int):void {
		switch (n) {
			case 0:
				break;
			case 1:
				var nowDate:Date = new Date(); 
				_lastChatTime = "Last chat receive: " + nowDate.getHours().toString() + ":" + (100 + nowDate.getMinutes()).toString().substr(1);
				_userMessageScrollPos1 = userMessage1.verticalScrollPosition
				userMessage1.text += message;
				userMessage1.callLater(_scrollDown1);
				break;
			case 2:
				_userMessageScrollPos2 = userMessage2.verticalScrollPosition
				userMessage2.text += message;
				userMessage2.callLater(_scrollDown2);
				break;		
		}
    }

    private function _scrollDown1():void{
      if (_chat_auto_scroll1) userMessage1.verticalScrollPosition = userMessage1.maxVerticalScrollPosition;
	  else userMessage1.verticalScrollPosition = _userMessageScrollPos1;
    }

	private function _scrollDown2():void{
      if (_chat_auto_scroll2) userMessage2.verticalScrollPosition = userMessage2.maxVerticalScrollPosition;
	  else userMessage2.verticalScrollPosition = _userMessageScrollPos2;
    }
    
    private function _waitForGame(total:int=1500,byoyomi:int=30,handicap:String="r"):void{
      _client.waitForGame(total,byoyomi,handicap);
      _refresh();
      stopButton.enabled = true;
    }
    
    private function _showOptions():void{
      _optionWindow = OptionDialog(PopUpManager.createPopUp(this, OptionDialog, false));
      PopUpManager.centerPopUp(_optionWindow);
      with(_optionWindow){
        title = "Options";
		RadioGroup1.selectedValue = GameTimer.soundType;
        RadioGroup2.selectedValue = board.piece_type;
        pieceSoundCheckBox.selected = board.piece_sound_play;
        gameEndSoundCheckBox.selected = _end_sound_play;
        chatSound1CheckBox.selected = _chat_sound1_play;
        chatSound2CheckBox.selected = _chat_sound2_play;
        OkButton.addEventListener("click", _handleOption);
		saveSettingsButton.addEventListener("click", _handleSaveSettings);
      }
    }
    
    private function _handleOption(e:Event):void {
	  GameTimer.soundType = int(_optionWindow.RadioGroup1.selectedValue);
      board.setPieceType(int(_optionWindow.RadioGroup2.selectedValue));
      board.piece_sound_play = _optionWindow.pieceSoundCheckBox.selected;
      _end_sound_play = _optionWindow.gameEndSoundCheckBox.selected;
      _chat_sound1_play = _optionWindow.chatSound1CheckBox.selected;
      _chat_sound2_play = _optionWindow.chatSound2CheckBox.selected;
    }
	
	private function _handleSaveSettings(e:Event):void {
		var urlVariables:URLVariables = new URLVariables();
		_handleOption(e);
		urlVariables.name = _login_name.toLowerCase();
		urlVariables.pieceSound = board.piece_sound_play;
		urlVariables.endSound = _end_sound_play;
		urlVariables.chatSound1 = _chat_sound1_play;
		urlVariables.chatSound2 = _chat_sound2_play;
		urlVariables.byoyomi = GameTimer.soundType;
		urlVariables.pieceType = board.piece_type;
		_infoFetcher.writeSettings(urlVariables);
	}
	
	private function _handleLoadOption(e:Event):void {
		board.piece_sound_play = _infoFetcher.userSettings.pieceSound;
		_end_sound_play = _infoFetcher.userSettings.endSound;
		_chat_sound1_play = _infoFetcher.userSettings.chatSound1;
		_chat_sound2_play = _infoFetcher.userSettings.chatSound2;
		GameTimer.soundType = _infoFetcher.userSettings.byoyomi;
		board.setPieceType(_infoFetcher.userSettings.pieceType);
	}

    private function _challengeForm():void{
      var user:Object = waiterListGrid.selectedItem;
      if (user != null) {
        var match:Array = user.game_name.match(/^([0-9a-z]+)_(.*)-([0-9]*)-([0-9]*)/);
        var total:int = parseInt(match[3]) / 60 ;
        var rule:String = total + "min - " + match[4] + "sec";
		var hc:String = InfoFetcher.gameType(match[1]);
        Alert.yesLabel = "Challenge";
        Alert.noLabel = "Offer your setting";
        Alert.buttonWidth = 140;
        Alert.show("Opponent: " + match[2] + "\nTime: " + rule + "\nGame type: " + hc,"Game Setting",Alert.YES|Alert.CANCEL,this,_handleChallengeAlert);
        //set properties back to default.
        Alert.yesLabel = "Yes";
        Alert.noLabel = "No";
        Alert.buttonWidth = 60;
      }    
    }

    private function _handleChallengeAlert(e:CloseEvent):void{
      var user:Object = waiterListGrid.selectedItem;
      if (e.detail == Alert.YES) {
      _challenging = true;
      _writeUserMessage("Challenging..... (Must wait for 20 seconds max)\n",1);
         _client.challenge(user);
    } else if (e.detail == Alert.CANCEL) {
      } else {
        var challengeWindow:ChallengeForm = ChallengeForm(PopUpManager.createPopUp(this, ChallengeForm, true));
        PopUpManager.centerPopUp(challengeWindow);
        challengeWindow.title = "Challenge to " + user.name;
        challengeWindow.challengeButton.addEventListener("click",_challenge);
      }
      challengeButton.enabled = false;
    }

    private function _newGameForm():void{
      _newGameWindow = NewGameForm(PopUpManager.createPopUp(this, NewGameForm, true));
      PopUpManager.centerPopUp(_newGameWindow);
      with(_newGameWindow){
        title = "Create new game";
		nonrated_total.selectedIndex = _ur_total_selected;
		nonrated_byoyomi.selectedIndex = _ur_byoyomi_selected;
		nonrated_handicap.selectedIndex = _ur_handicap_selected;
		addEventListener(GameRuleEvent.RULE_SELECTED,_handleRuleSelected);
      }
    }
  
    private function _stopWaiting():void {
      _client.stopWaiting();
      _refresh();
      stopButton.enabled = false;
    }

    private function _handleRuleSelected(e:GameRuleEvent):void {
	  _ur_total_selected = _newGameWindow.nonrated_total.selectedIndex;
	  _ur_byoyomi_selected = _newGameWindow.nonrated_byoyomi.selectedIndex;
	  _ur_handicap_selected = _newGameWindow.nonrated_handicap.selectedIndex;
      _waitForGame(e.total,e.byoyomi,e.handicap);
    }

    private function _challenge(e:Event):void{
      var user:Object = userListGrid.selectedItem;
      if(user != null){
        _client.challenge(user);
      }
	  challengeButton.enabled = false;
    }

    private function _refresh():void {
	  _keepAliveTimer.reset();
	  _keepAliveTimer.start();
      _client.who();
	  _client.list();
	  if (_game_name) _client.watchers(_game_name);
	  challengeButton.enabled = false;
	  watchButton.enabled = false;
    }

    private function _resign():void{
      if (board.my_turn == board.position.turn) {
        _client.resign();
      }
    }

    private function _who():void{
      _client.who();
    }

    private function _closeGame():void {
	  if (_game_name) {
		  if (_monitoring) {
			  _client.monitorOff(_game_name);
			  _monitoring = false;
		  } else {
			  _client.closeGame();
		  }
          _sendAutoChat("I have left this room.");
          _game_name = null;		  
	  }
      board.closeGame();
      mainViewStack.selectedIndex = 1;
      challengeButton.enabled = false;
      watchButton.enabled = false;
	  logoutButton.enabled = true;
      _refresh();
    }
    
    private function _showImpasse():void {
      Alert.show("Black: " + board.position.calcImpasse(Kyokumen.SENTE) + " points\nWhite: " + board.position.calcImpasse(Kyokumen.GOTE) + " points", "Points for Impasse", Alert.OK);
    }

    private function _userSelected():void {
	  if (_game_name) return;
      var user:Object = userListGrid.selectedItem;
	  for (var i:int = 0; i < _waiter_list.length; i++) {
		  if (_waiter_list[i].name == user.name) {
			  waiterListGrid.selectedIndex = i;
			  break;
		  }
		  waiterListGrid.selectedIndex = -1;
	  }
	  for (i = 0; i < _game_list.length; i++) {
		  if (_game_list[i].blackName == user.name || _game_list[i].whiteName == user.name) {
			  gameListGrid.selectedIndex = i;
			  break;
		  }
		  gameListGrid.selectedIndex = -1;
	  }
	  _waiterSelected();
	  _gameSelected();
    }
	
    private function _waiterSelected():void {
	  if (_game_name) return;
      var user:Object = waiterListGrid.selectedItem;
	  if (!user) {
		  challengeButton.enabled = false;
		  return;
	  }
      if(user != null && user.name != _login_name){
        challengeButton.enabled = true;
      } else {
		challengeButton.enabled = false;
	  }
	  for (var i:int = 0; i < _user_list.length; i++) {
		  if (_user_list[i].name == user.name) {
			  userListGrid.selectedIndex = i;
			  break;
		  }
		  userListGrid.selectedIndex = -1;
	  }
    }
	
    private function _gameSelected():void {
	  if (_game_name) return;
      var game:Object = gameListGrid.selectedItem;
	  if (!game) {
		  watchButton.enabled = false;
		  return;
	  }
      if(game != null){
        watchButton.enabled = true;
      } else {
		watchButton.enabled = false;
	  }
	  if (userListGrid.selectedItem.name == game.blackName || userListGrid.selectedItem.name == game.whiteName) return;
	  for (var i:int = 0; i < _user_list.length; i++) {
		  if (_user_list[i].name == game.blackName || _user_list[i].name == game.whiteName) {
			  userListGrid.selectedIndex = i;
			  break;
		  }
		  userListGrid.selectedIndex = -1;
	  }
    }

    private function _playerMove(from:Point,to:Point,promote:Boolean):void{
      _client.move(board.position.generateMovementFromCoordinates(from, to, promote).toCSA());
    }

    private function _checkTimeout():void {
	  board.clientTimeout();
      _client.checkTimeout();
    }

    private function _handleList(e:ServerMessageEvent):void{
	  var game_list:Array = new Array();
	  var lines:Array = e.message.split("\n");
        for each(var line:String in lines) {
		  if (line.match(/^##\[LIST\] \+OK$/)) break;
          var tokens:Array = line.split(" ");
          var game:Object = {
			  'id':tokens[1], //line.substr(9),
			  'blackName':tokens[1].split("+")[2],
			  'whiteName':tokens[1].split("+")[3],
			  'blackRating':parseInt(tokens[3]),
			  'whiteRating':parseInt(tokens[4]),
			  'blackCountryCode':parseInt(tokens[5]),
			  'whiteCountryCode':parseInt(tokens[6]),
			  'watchers':parseInt(tokens[10]),
			  'blackTitle':"",
			  'whiteTitle':"",
			  'blackMedals':0,
			  'whiteMedals':0
			  }
		  if (_findPlayerFromList(game.blackName)) game.blackMedals = _findPlayerFromList(game.blackName).medals;
		  if (_findPlayerFromList(game.whiteName)) game.whiteMedals = _findPlayerFromList(game.whiteName).medals;
		  game.blackCountry = _infoFetcher.country_names3[game.blackCountryCode];
		  game.blackFlagURL = "http://www.81squareuniverse.com/dojo/images/flags_s/" + String(game.blackCountryCode + 1000).substring(1) + ".gif";
		  game.whiteCountry = _infoFetcher.country_names3[game.whiteCountryCode];
		  game.whiteFlagURL = "http://www.81squareuniverse.com/dojo/images/flags_s/" + String(game.whiteCountryCode + 1000).substring(1) + ".gif";
		  if (tokens[7] == "true") {
			  game.status = parseInt(tokens[2]);
		  } else {
			  game.status = "P";
			  if (tokens[8] == "true") game.status += "▲";
			  if (tokens[9] == "true") game.status += "△";
		  }
		  for (var i:int = 0; i < _infoFetcher.titleName.length; i++) {
				if (game.blackName.toLowerCase() == _infoFetcher.titleUser[i]) {
					game.blackTitle = _infoFetcher.titleName[i];
					if (game.blackTitle == "livebot") game.blackRating = 3000;
				}
				if (game.whiteName.toLowerCase() == _infoFetcher.titleUser[i]) {
					game.whiteTitle = _infoFetcher.titleName[i];
					if (game.whiteTitle == "livebot") game.whiteRating = 3000;
				}
		  }
		  game.maxRating = Math.max(game.blackRating, game.whiteRating);
		  if (game.status == "P" || game.status == "P▲" || game.status == "P△") game.maxRating -= 3000;
		  game.blackRank = _infoFetcher.makeRankFromRating(game.blackRating);
		  game.whiteRank = _infoFetcher.makeRankFromRating(game.whiteRating);
		  var game_info:Array = game.id.split("+")[1].match(/^([0-9a-z]+)_(.*)-([0-9]*)-([0-9]*)/);
		  var total:int = parseInt(game_info[3]) / 60;
		  var hc:String;
		  if (game_info[1] == "r") {
			hc = "R";
		  } else if (game_info[1].match(/^hc/)) {
			hc = "HC";
		  } else {
			hc = "NR";
		  }
		  game.rule = hc + ": " + total + "-" + game_info[4];
		  game_list.push(game);
        }
		game_list.sortOn("maxRating", Array.NUMERIC | Array.DESCENDING);
		for (i = 0; i < game_list.length; i++) game_list[i].gameNo = i + 1;
		_game_list = game_list;
		gameListGrid.dataProvider = _game_list;
    }

    private function _handleMonitor(e:ServerMessageEvent):void {
      var kifuMove:Object = new Object();
	  var end_game:Boolean = false;
      if(e.message.indexOf("#TIME_UP") >= 0){
		end_game = true;
        board.timeout();
        _writeUserMessage((board.position.turn == Kyokumen.SENTE ? "Black: " : "White: ") + "Time up.\n", 2);
		kifuMove.num = board.kifu_list.length;
        kifuMove.move = (board.position.turn == Kyokumen.SENTE ? "▲" : "△") + "Time up";
        kifuMove.moveKIF = "切れ負け";
        board.kifu_list.push(kifuMove);
	  } else if (e.message.indexOf("#DISCONNECT") >= 0) {
		  end_game = true;
		  _writeUserMessage("Player disconnected.\n", 2);
      } else if(e.message.indexOf("#ILLEGAL_MOVE") >= 0){
		end_game = true;  
        _writeUserMessage("Illegal Move.\n", 2);
		kifuMove.num = board.kifu_list.length;
		kifuMove.move = "Illegal Move";
		kifuMove.moveKIF = "反則負け";
		board.kifu_list.push(kifuMove);
      } else if (e.message.indexOf("#RESIGN") >= 0) {
		  end_game = true;
		  _writeUserMessage((board.position.turn == Kyokumen.SENTE ? "Black" : "White")  + " resigned.\n", 2);
	  } else if (e.message.indexOf("#OUTE_SENNICHITE") >= 0) {
		  end_game = true;
          _writeUserMessage("Illegal Perpetual Check.\n", 2);
		  kifuMove.num = board.kifu_list.length;
		  kifuMove.move = "Perpetual Check";
		  kifuMove.moveKIF = "王手千日手";
		  board.kifu_list.push(kifuMove);		  
      } else if (e.message.indexOf("#SENNICHITE") >= 0) {
		  end_game = true;
          _writeUserMessage("Sennichite. (Repetition)\n", 2);
		  kifuMove.num = board.kifu_list.length;
		  kifuMove.move = "Repetition Draw";
		  kifuMove.moveKIF = "千日手";
		  board.kifu_list.push(kifuMove);
      }
	  if (end_game) {
		  _post_game = true;
			_writeUserMessage("### Game End ###\n",2);
			if (_end_sound_play) _sound_win.play();
			kifuCopyButton.enabled = true;
			rewindAllButton.enabled = true;
			rewindOneButton.enabled = true;
			forwardOneButton.enabled = true;
			forwardAllButton.enabled = true;
			kifuDataGrid.dataProvider = board.kifu_list;
			kifuDataGrid.scrollToIndex(board.kifu_list.length+1);
			kifuDataGrid.selectable = true;
			kifuDataGrid.selectedIndex = board.kifu_list.length;
			board.endGame();
			return;
	  }
      if(_watch_game != null){
        board.monitor(e.message,_watch_game);  // _user_list is sent only for refering to the players' ratings and country on the board (Temporarily)
      }
      kifuDataGrid.dataProvider = board.kifu_list;
      kifuDataGrid.scrollToIndex(board.kifu_list.length + 1);
    }
	
	private function _watchDialog():void {
		Alert.yesLabel = "Black";
        Alert.noLabel = "White";
		Alert.buttonWidth = 80;
        Alert.show("View as:","Choose Side",Alert.YES|Alert.NO,this,_watch);
        //set properties back to default.
        Alert.yesLabel = "Yes";
        Alert.noLabel = "No";
        Alert.buttonWidth = 60;
	}

    private function _watch(e:CloseEvent):void {
      _watch_game = gameListGrid.selectedItem;
      if (_watch_game != null) {
		 if (e.detail == Alert.YES) {
			board.my_turn = Kyokumen.SENTE;
		 } else {
			 board.my_turn = Kyokumen.GOTE;
		 }
		 _game_name = _watch_game.id;
		 if (_watch_game.rule.match(/^HC/)) {
			 board.superior = Kyokumen.GOTE;
		 } else if (_watch_game.blackRating > _watch_game.whiteRating) {
			 board.superior = Kyokumen.SENTE;
		 } else {
			 board.superior = Kyokumen.GOTE;
		 }
		_monitoring = true;
		_post_game = false;
		_client.monitorOn(_game_name);
		_client.watchers(_game_name);
		
		  watchButton.enabled = false;
		  logoutButton.enabled = false;
		  userMessage2.text = _infoFetcher.gameMessage + "\n\n";
		  mainViewStack.selectedIndex = 2;
		  closeButton.enabled = true;
		  resignButton.enabled = false;
		  rewindAllButton.enabled = false;
		  rewindOneButton.enabled = false;
		  forwardOneButton.enabled = false;
		  forwardAllButton.enabled = false;
		  kifuDataGrid.selectable = false;
		  kifuDataGrid.dataProvider = board.kifu_list;
	  }
    }
	
	private function _findPlayerFromList(str:String):Object {
		for (var i:int = 0; i < _user_list.length; i++) {
			if (_user_list[i].name == str) return _user_list[i];
		}
		return null;
	}
	
	private function _openPlayerInfo(user:Object):void {
	  _playerInfoWindow = PlayerInfoWindow(PopUpManager.createPopUp(this, PlayerInfoWindow, true));
      PopUpManager.centerPopUp(_playerInfoWindow);
      _playerInfoWindow.title = "Player Info";
	  _playerInfoWindow.readUser(user);
	}
	
	private function _gamePlayerInfo(e:MouseEvent):void {
	  _openPlayerInfo(_findPlayerFromList(e.target.text));
	}

    private function _handleSendChat1(e:FlexEvent):void{
      _client.chat(e.target.text);
      e.target.text = "";
    }
	
    private function _handleSendChat2(e:FlexEvent):void {
//      if(_game_name) _client.chat(_game_name + " " + e.target.text);
	  if (_game_name) _client.gameChat(_game_name, e.target.text);
      e.target.text = "";
    }
  
  private function _sendAutoChat(str:String):void {
    if (_game_name) {
      _client.chat(_game_name + " [auto-chat] " + str);
    }
  }
 
  private function _mute(v:Boolean):void {
	  var trans:SoundTransform = new SoundTransform;
	  if (v) {
		  trans.volume = 0;
	  } else {
		  trans.volume = 1;
	  }
	  SoundMixer.soundTransform = trans;
	  muteCheck1.selected = v;
	  muteCheck2.selected = v;
  }
  
  private function _change_auto_scroll1():void {
	  _chat_auto_scroll1 = autoScrollCheck1.selected;
  }
   
  private function _change_auto_scroll2():void {
	  _chat_auto_scroll2 = autoScrollCheck2.selected;
  }
  
  private function _checkLobby():void {
	  mainViewStack.selectedIndex = 1;
	  backToGameButton.visible = true;
  }

  private function _backToGame():void {
	  mainViewStack.selectedIndex = 2;
	  backToGameButton.visible = false;
  }
  
  private function _killGhost(str:String):void {
	  _client.send("%%GHOST " + str);
  }
  
  private function replay():void {
    board.replayMoves(int(Math.min(kifuDataGrid.selectedIndex,board.kifu_list.length-2)));
  }
    
  private function replayByButton(i:int):void{
    switch (i) {
      case -2:
        kifuDataGrid.selectedIndex = 0; replay();
        break;
      case -1:
        if (kifuDataGrid.selectedIndex > 0) {
          kifuDataGrid.selectedIndex--; replay();
        }
        break;
      case 1:
        if (kifuDataGrid.selectedIndex < board.kifu_list.length) {
          kifuDataGrid.selectedIndex++; replay();
        }
        break;
      case 2:
        kifuDataGrid.selectedIndex = board.kifu_list.length; replay();
    }
  }

    ]]>
  </mx:Script>
  <mx:Fade id="hideLogin" alphaFrom="1.0" alphaTo="0.0" duration="1000" />
  <mx:ViewStack id="mainViewStack" creationPolicy="all" width="100%" height="100%">
    <mx:VBox id="loginBox" horizontalAlign="center" verticalAlign="middle" width="100%" height="100%" fontSize="11" hideEffect="{hideLogin}">
    <mx:Image id="titleBanner" source="http://www.81squareuniverse.com/dojo/images/81Dojo.jpg"/>
	  <mx:Label paddingTop="-2" paddingBottom="0" text="{VERSION}"/>
      <mx:Label paddingTop="-3" text="(powered by ShogiServer and 81SquareUniverse.com)"/>
      <mx:Form>
        <mx:FormItem label="loginname">
            <mx:TextInput id="loginname" width="200"/>
        </mx:FormItem>
        <mx:FormItem label="password">
            <mx:TextInput id="password" width="200" displayAsPassword="true"/>
        </mx:FormItem>
        <mx:FormItem>
            <mx:Button id="loginButton" label="Login" y="400" click="_connectAndLogin();"/>
        </mx:FormItem>
      </mx:Form>
      <mx:Label paddingTop="-2" paddingBottom="0"  id="loginMessage" fontSize="10" />
      <mx:Label paddingTop="-2" paddingBottom="0"  id="errorMessage" color="#ff6666" fontSize="10" />
      <mx:LinkButton paddingTop="-2" label="Sign Up" fontSize="15" click="navigateToURL(new URLRequest('http://81square-shogi.homeip.net:2195'), 'quote')" />
      <mx:Label paddingTop="15" text="Chief Programmer: Kota" fontSize="13" />
	  <mx:HBox>
		  <mx:Label text=" " doubleClickEnabled="true" doubleClick="_localLogin();"/>
		  <mx:Label text=" " doubleClickEnabled="true" doubleClick="_testLogin(1);"/>
		  <mx:Label text="Assistant: Hidetchi"/>
		  <mx:Label text=" " doubleClickEnabled="true" doubleClick="_testLogin(2);"/>
		  <mx:Label text=" " doubleClickEnabled="true" doubleClick="_testLogin(3);"/>
	  </mx:HBox>
	  <mx:Label paddingTop="10"  paddingBottom="0" text="- Materials -" fontSize="10" />
	  <mx:LinkButton paddingTop="-2" paddingBottom="0" label="CC Resources for Shogi Applications by muchonovski" click="navigateToURL(new URLRequest('http://www.muchonov.com/bona/'), 'quote')"/>
      <mx:LinkButton paddingTop="-2" paddingBottom="0"  label="www.otosozai.com - ONGAKUSITU" click="navigateToURL(new URLRequest('http://www.otosozai.com/'), 'quote')"/>
	  <mx:LinkButton paddingTop="-2" paddingBottom="0"  label="National flag and Road sign Mt." click="navigateToURL(new URLRequest('http://nflagrsign.xrea.jp/'), 'quote')"/>
    </mx:VBox>
    
    <mx:VBox paddingTop="10" horizontalAlign="center" fontSize="11">
      <mx:Panel id="userListPanel" width="975" height="560" paddingLeft="10" paddingTop="10" status="{VERSION}  {_lastChatTime}">
      <mx:HBox>
        <mx:Button id="refreshButton" label="Refresh" click="_refresh();"/>
        <mx:Button id="startButton" label="Wait for Game" click="_newGameForm();"/>
        <mx:Button id="stopButton" label="Stop Waiting" click="_stopWaiting()" enabled="false" />
        <mx:Button id="challengeButton" label="Challenge" click="_challengeForm();" enabled="false"/>
        <mx:Button id="watchButton" label="Watch" click="_watchDialog();" enabled="false"/>
		<mx:Button id="logoutButton" label="Log Out" click="_logout()"/>
		<mx:Button id="optionButton1" label="Options" click="_showOptions();" enabled="true"/>
		<mx:CheckBox id="muteCheck1" label="Mute" click="_mute(muteCheck1.selected)"/>
		<mx:Button id="backToGameButton" label="Back to Game" click="_backToGame();" visible="false" color="#FF0000" />
        <!-- <mx:Button id="playerInfo" label="Player Info" click="_openPlayerInfo(userListGrid.selectedItem);" /> -->
		<!-- <mx:Label text="{VERSION}"/> -->
      </mx:HBox>
	  <mx:HBox>
		<mx:VDividedBox>
			<mx:DataGrid id="userListGrid" width="360" height="360" change="_userSelected();" rowHeight="21" doubleClickEnabled="true" doubleClick="_openPlayerInfo(userListGrid.selectedItem);">
			 <mx:columns>
			  <mx:DataGridColumn dataField="status2" headerText="Stat" width="33" paddingLeft="0" textAlign="center" />
			  <mx:DataGridColumn dataField="titleName" headerText="Title" width="58" paddingLeft="0" textAlign="center" />
			  <mx:DataGridColumn dataField="rank" headerText="Rank" width="52" paddingLeft="0" textAlign="center" />
			  <mx:DataGridColumn dataField="name" headerText="Name" width="100" paddingLeft="2" />
			  <mx:DataGridColumn dataField="country" headerText="Country" width="90" paddingLeft="2" />
			  <mx:DataGridColumn dataField="rating" headerText="Rate" width="45" paddingRight="3" textAlign="right" />
			 </mx:columns>
			</mx:DataGrid>
			<mx:DataGrid id="waiterListGrid" width="360" height="105" change="_waiterSelected();" rowHeight="21" doubleClickEnabled="true" doubleClick="_openPlayerInfo(_findPlayerFromList(waiterListGrid.selectedItem.name));">
			 <mx:columns>
			  <mx:DataGridColumn dataField="name" headerText="Waiting Player" width="90" paddingLeft="2" />
			  <mx:DataGridColumn dataField="country" headerText="Ctry" width="30" paddingLeft="0" textAlign="center" />
			  <mx:DataGridColumn dataField="rating" headerText="Rate" width="35" paddingRight="3" textAlign="right" />
			  <mx:DataGridColumn dataField="time" headerText="Time" width="40" paddingLeft="0" textAlign="center" />
			  <mx:DataGridColumn dataField="rated" headerText="R?" width="25" paddingLeft="0" textAlign="center" />
			  <mx:DataGridColumn dataField="handicap" headerText="Handicap" width="60" paddingLeft="0" textAlign="center" />
			 </mx:columns>
			</mx:DataGrid>
		</mx:VDividedBox>
		<mx:VBox>
			<mx:VDividedBox>
				<mx:DataGrid id="gameListGrid" width="570" height="220" change="_gameSelected();" rowHeight="21">
				 <mx:columns>
				  <mx:DataGridColumn dataField="gameNo" headerText="No." width="30" paddingLeft="0" textAlign="center" />
				  <mx:DataGridColumn dataField="blackRank" headerText="" width="55" paddingRight="2" textAlign="right" />
				  <!-- <mx:DataGridColumn dataField="blackCountry" headerText="" width="30" paddingLeft="0" textAlign="center" /> -->
				  <mx:DataGridColumn dataField="blackFlagURL" headerText="" paddingLeft="0" paddingRight="0" itemRenderer="mx.controls.Image" width="27" resizable="false" />
				  <mx:DataGridColumn dataField="blackName" headerText="Black" width="100" paddingLeft="4"/>
				  <mx:DataGridColumn dataField="whiteName" headerText="White" width="100" paddingRight="4" textAlign="right"  />
				  <!-- <mx:DataGridColumn dataField="whiteCountry" headerText="" width="30" paddingLeft="0" textAlign="center" /> -->
				  <mx:DataGridColumn dataField="whiteFlagURL" headerText="" paddingLeft="0" paddingRight="0" itemRenderer="mx.controls.Image" width="27" resizable="false" />
				  <mx:DataGridColumn dataField="whiteRank" headerText="" width="55" paddingLeft="2" />
				  <mx:DataGridColumn dataField="rule" headerText="Rule" width="80" paddingLeft="3" />
				  <mx:DataGridColumn dataField="status" headerText="Stat" width="45"/>
				  <mx:DataGridColumn dataField="watchers" headerText="Watch"/>
				 </mx:columns>
				</mx:DataGrid>
				<mx:TextArea id="userMessage1" wordWrap="true" editable="false" width="570" height="215" fontSize="12"/> <!-- height="185" -->
			</mx:VDividedBox>
			<mx:HBox>
				<mx:Label text="Chat"/>
				<mx:TextInput id="chatMessage1" width="430"/>
				<mx:CheckBox id="autoScrollCheck1" label="Auto-scroll" selected="true" click="_change_auto_scroll1();" />
			</mx:HBox>
		</mx:VBox>
	  </mx:HBox>
      </mx:Panel>
	  <mx:HBox paddingTop="5" fontSize="14" fontWeight="bold">
		  <mx:VBox horizontalAlign="center">
			  <mx:Label text="Los Angeles"/>
			  <mx:SWFLoader source="http://www.clocklink.com/clocks/5003-blue.swf?TimeZone=USA_LosAngeles" width="300" height="25"/>
		  </mx:VBox>
		  <mx:VBox horizontalAlign="center">
			  <mx:Label text="UTC"/>
			  <mx:SWFLoader source="http://www.clocklink.com/clocks/5003-green.swf?TimeZone=GMT" width="300" height="25"/>			  
		  </mx:VBox>
		  <mx:VBox horizontalAlign="center">
			  <mx:Label text="Tokyo"/>
			  <mx:SWFLoader source="http://www.clocklink.com/clocks/5003-red.swf?TimeZone=GMT0900" width="300" height="25"/>			  
		  </mx:VBox>
	  </mx:HBox>
	  <!-- <mx:Label text=" " doubleClickEnabled="true" doubleClick="_killGhost(chatMessage1.text);"/>-->
    </mx:VBox>
    
    <mx:HBox horizontalAlign="center" verticalAlign="middle">
      <mx:VBox>
      <eightyOneSquare:Board id="board" width="782" height="474"/> 
      <mx:HBox>
        <mx:Panel id="messagePanel" title="Message Panel" width="435" height="200" headerHeight="22">
        <mx:TextArea id="userMessage2" wordWrap="true" editable="false" width="415" height="166" fontSize="12" />
        </mx:Panel>
        <mx:Panel id="controlPanel" title="Control Panel" width="340" height="200" verticalAlign="middle" paddingLeft="8" headerHeight="22">
          <mx:HBox>
            <mx:Button id="resignButton" label="Resign" click="_resign();"/>
            <mx:Button id="optionButton2" label="Options" click="_showOptions();"/>
            <mx:Button id="impasseButton" label="Impasse?" click="_showImpasse();"/>
            <mx:Button id="closeButton" label="Close" click="_closeGame();" enabled="false"/>           
          </mx:HBox>
          <mx:HBox>
            <mx:Button id="rewindAllButton" label="|&lt;" enabled="false" click="replayByButton(-2);"/>
            <mx:Button id="rewindOneButton" label="&lt;" enabled="false" click="replayByButton(-1);"/>    
            <mx:Button id="forwardOneButton" label=">" enabled="false" click="replayByButton(1);"/>
            <mx:Button id="forwardAllButton" label=">|" enabled="false" click="replayByButton(2);"/> 
          </mx:HBox>
         <mx:Label text="Chat"/>
         <mx:TextInput id="chatMessage2" width="300"/>
		 <mx:HBox>
			<mx:CheckBox id="autoScrollCheck2" label="Auto-scroll" selected="true" click="_change_auto_scroll2();" />
			<mx:Button id="checkLobbyButton" label="Check Lobby" enabled="true" click="_checkLobby();" />
			<mx:CheckBox id="muteCheck2" label="Mute" click="_mute(muteCheck2.selected)"/>
		</mx:HBox>
        </mx:Panel>
      </mx:HBox>
      </mx:VBox>
        <mx:Panel id="sidePanel" title="Side Panel" width="180" height="680" headerHeight="22">
		<mx:HBox>
          <mx:Label id="watcherListTitle" text="Watchers (0)" fontWeight="bold" paddingRight="0" />
		  <mx:Button id="refreshWatchersButton" label="Refresh" fontSize="9" click="_refresh();"/>
		</mx:HBox>
		<mx:DataGrid id="watcherListGrid" width="160" height="234" rowHeight="21" doubleClickEnabled="true" doubleClick="_openPlayerInfo(_findPlayerFromList(watcherListGrid.selectedItem.name));">
         <mx:columns>
          <mx:DataGridColumn dataField="name" headerText="Name" width="80" paddingLeft="2" />
		  <mx:DataGridColumn dataField="country" headerText="Ctry" width="40" paddingLeft="2" textAlign="center" />
		  <mx:DataGridColumn dataField="rating" headerText="Rate" width="40" paddingRight="3" textAlign="right" />
         </mx:columns>
        </mx:DataGrid>
        <mx:Label text="Kifu" fontWeight="bold"/>
        <mx:DataGrid id="kifuDataGrid" sortableColumns="false" width="160" height="322" change="replay();" selectable="false" fontSize="10" rowHeight="20">
         <mx:columns>
          <mx:DataGridColumn headerText="No." dataField="num" width="35"/>
          <mx:DataGridColumn dataField="move"/>
         </mx:columns>
        </mx:DataGrid>
        <mx:HBox>
             <mx:Button id="kifuCopyButton" label="Copy" click="board.copyKIFtoClipboard(_game_name, VERSION);" enabled="false"/>
             <!-- <mx:Button id="kifuSaveButton" label="Save" enabled="false"/> -->         
        </mx:HBox>
        </mx:Panel>
    </mx:HBox>
  </mx:ViewStack>

</mx:Application>

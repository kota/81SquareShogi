<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" backgroundColor="0xcccc77" creationComplete="{initApp()}" xmlns:eightyOneSquare="*" frameRate="24">
	<mx:Style>
		Alert {
			fontSize : 13px;
		}
	</mx:Style>
	<mx:Script>
    <![CDATA[
    import flash.display.*;
	import flash.events.Event;
    import mx.events.FlexEvent;
    import mx.events.CloseEvent;
    import flash.media.Sound;
    import mx.controls.*;
    import mx.managers.PopUpManager;
    import mx.core.IFlexDisplayObject;
    import CsaShogiClient;
	import InfoFetcher;
    import Board;
    import ChallengeForm;
    import GameRuleEvent;
    import mx.utils.StringUtil;
	
	private const VERSION:String = "ver.2010/08/22-b";

    private var _client:CsaShogiClient;
    [Bindable]
    private var _game_name:String;
    private var _user_list:Array;
    private var _login_name:String;
	private var _player_infos:Array;
    private var _watch_user:Object;
    private var _monitoring:Boolean;
    private var _challenging:Boolean = false;

    [Embed(source = "/sound/win.mp3")]
    private var Sound_win:Class;
    private var _sound_win:Sound = new Sound_win();
    [Embed(source = "/sound/lose.mp3")]
    private var Sound_lose:Class;
    private var _sound_lose:Sound = new Sound_lose();
    [Embed(source = "/sound/chat.mp3")]
    private var Sound_chat:Class;
    private var _sound_chat:Sound = new Sound_chat();
    [Embed(source = "/sound/challenger.mp3")]
    private var Sound_challenger:Class;
    private var _sound_challenger:Sound = new Sound_challenger();
    private var optionWindow:OptionDialog;
    private var _end_sound_play:Boolean = true;
    private var _chat_sound_play:Boolean = true;
	private var _chat_auto_scroll1:Boolean = true;
	private var _chat_auto_scroll2:Boolean = true;
	private var _userMessageScrollPos1:int;
	private var _userMessageScrollPos2:int;
	private var _post_game:Boolean = true;
    private var _my_last_move:Movement;
    private var _keepAliveTimer:Timer;
	private var _infoFetcher:InfoFetcher;

    private function initApp():void
    {
      trace("application initialized..");
      _client = new CsaShogiClient();
      board.setMoveCallback(_playerMove);
      board.setTimeoutCallback(_checkTimeout);
      chatMessage1.addEventListener(FlexEvent.ENTER,_handleSendChat1);
      chatMessage2.addEventListener(FlexEvent.ENTER,_handleSendChat2);
      loginname.addEventListener(FlexEvent.ENTER,_handleLogin);
      password.addEventListener(FlexEvent.ENTER, _handleLogin);
	  _infoFetcher = new InfoFetcher();
      _user_list = new Array();
      userListGrid.dataProvider = _user_list;
    }

    private function _connectAndLogin():void{
      trace("connecting.");
      _client.addEventListener(CsaShogiClient.CONNECTED,_handleConnected);
      _client.addEventListener(CsaShogiClient.LOGIN,_handleLoggedIn);
      _client.addEventListener(CsaShogiClient.LOGIN_FAILED,_handleLoginFailed);
      _client.addEventListener(CsaShogiClient.GAME_STARTED,_handleGameStarted);
      _client.addEventListener(CsaShogiClient.GAME_END,_handleGameEnd);
      _client.addEventListener(CsaShogiClient.CHAT,_handleChat);
      _client.addEventListener(CsaShogiClient.MOVE,_handleMove);
      _client.addEventListener(CsaShogiClient.WHO,_handleWho);
      _client.addEventListener(CsaShogiClient.MONITOR,_handleMonitor);
      _client.addEventListener(CsaShogiClient.LIST, _handleList);
      _client.addEventListener(CsaShogiClient.GAME_SUMMARY, _handleGameSummary);
      _client.addEventListener(CsaShogiClient.REJECT, _handleReject);
      _client.addEventListener(CsaShogiClient.WATCHERS, _handleWatchers);
      loginMessage.text = "Connecting...";
      errorMessage.text = "";
      _client.connect();
    } 

    private function _handleKeepAlive(e:Event):void {
	  _refresh();
      if (_game_name && !_post_game) _client.watchers(_game_name)
    }

    private function _handleLogin(e:Event):void{
      _connectAndLogin();
    }
    
    private function _handleConnected(e:Event):void{
      loginMessage.text = "Logging in...";
      _client.login(loginname.text, password.text);
      _login_name = loginname.text;
    } 

    private function _handleLoggedIn(e:Event):void{
      loginMessage.text = "Logged in Successfully";
      mainViewStack.selectedIndex = 1;
      _client.who();
      _keepAliveTimer = new Timer(30000);
      _keepAliveTimer.addEventListener(TimerEvent.TIMER,_handleKeepAlive);
      _keepAliveTimer.start();
	  _writeUserMessage(_infoFetcher.initMessage + "\n\n", 1);
	  if (VERSION != _infoFetcher.newestVer) _writeUserMessage("CAUTION: This version is old! The newest is " + _infoFetcher.newestVer + ". Please reload!\n", 1);
	  if (_chat_sound_play) _sound_chat.play();
    }

    private function _handleLoginFailed(e:ServerMessageEvent):void{
      loginMessage.text = "";
      errorMessage.text = e.message;
    }

    private function _handleChat(e:ServerMessageEvent):void{
		var mNum:int = _messageAudible(e.message);
        _writeUserMessage(_format_message(e.message),mNum);
        if ((mainViewStack.selectedIndex == mNum) && _chat_sound_play) _sound_chat.play();
    }

    private function _format_message(message:String):String{
      message = message.substr(8);
      var match:Array = message.match(/(\[.+?\]) ([^ ]+?\+[^ ]+?\-[0-9]+?\-[0-9]+?\+[^ ]+?\+[^ ]+?\+[0-9]*) (.*)/);
      if(match != null){
        message = match[1] + " " + match[3] + "\n";
      }
      return message;
    }

    private function _messageAudible(message:String):int{
		var sender_name:String = message.match(/\#\#\[CHAT\]\[(.*)\]/)[1];
        var match:Array = message.match(/\#\#\[CHAT\]\[(.*)\] ([^ ]+?\+[^ ]+?\-[0-9]+?\-[0-9]+?\+[^ ]+?\+[^ ]+?\+[0-9]*) (.*)/);
        if(match != null){
          var game_name:String = match[2];
          if (_game_name && _game_name == game_name) {
			  if (board.inGame) {
				  if (_isPlayer(sender_name)) return 2;
				  else return 0;
			  } else return 2;
          } else return 0;
        } else return 1;
          //No game id => public chat.
    }

    private function _isPlayer(user_name:String):Boolean{
      return board.playerNames != null && board.playerNames[0] == user_name || board.playerNames[1] == user_name
    }

    private function _handleMove(e:ServerMessageEvent):void {
      board.makeMove(e.message);
      kifuDataGrid.dataProvider = board.kifu_list;
      kifuDataGrid.scrollToIndex(board.kifu_list.length+1);
    }
  
  private function _handleGameSummary(e:ServerMessageEvent):void {
    if (_challenging) {
      _challenging = false;
      _client.agree();
    } else {
	  _refresh();
      _sound_challenger.play();
      Alert.yesLabel = "Accept";
      Alert.noLabel = "Reject";
      Alert.buttonWidth = 140;
      Alert.show("Opponent:" + (_login_name == e.message.split("\n")[0] ? e.message.split("\n")[1] : e.message.split("\n")[0]), "Here comes a new challenger!!",
                Alert.YES | Alert.NO, this, _handleGameSummaryAlert);
      //set properties back to default.
      Alert.yesLabel = "Yes";
      Alert.noLabel = "No";
      Alert.buttonWidth = 60;  
    }
  }
  
   private function _handleGameSummaryAlert(e:CloseEvent):void{
      var user:Object = userListGrid.selectedItem;
      if(e.detail == Alert.YES){
        _client.agree();
      } else {
        _client.reject();
      }
    }
  
  private function _handleReject(e:ServerMessageEvent):void {
    _writeUserMessage("Rejected by the opponent.\n",1);
  }

    private function _handleWatchers(e:ServerMessageEvent):void{
      var watchers:Array = e.message.split("\n");
      var watcher_list:Array = new Array();
      for each(var watcher_data:String in watchers){
        if(watcher_data.match(/^##\[WATCHERS\] \+OK$/)){
          break;
        }
        var watcher:Object = new Object();
        var match:Array = watcher_data.match(/^##\[WATCHERS\] (.*)/);
        if(match){
          watcher.name = match[1];
          watcher.country = '81SU';
          watcher.rating = '';
          watcher_list.push(watcher);
        }
      }
      watcherListGrid.dataProvider = watcher_list;
	  watcherListTitle.text = "Watchers (" + watcher_list.length +")";
    }

    private function _handleGameStarted(e:ServerMessageEvent):void {
	  if(_game_name && _monitoring){
        _client.monitorOff(_game_name);
        _monitoring = false;
		board.closeGame();
      }
	  _post_game = false;
	  _player_infos = new Array;
	  for (var j:int = 0; j < 2 ; j++) {
		var _str1:String = _client.playerNames[j].toLowerCase();
		for (var i:int = 0; i < _user_list.length ; i++) {
			if (_user_list[i].name == _str1) {
				_player_infos[j] = "R:" + _user_list[i].rating + ", " + _user_list[i].rank + "\t" + String(_user_list[i].country_code + 1000).substring(1);
				break;
				}
		}
	  }
      userMessage2.text = '';
      if(_client.myTurn == Kyokumen.SENTE){
        _writeUserMessage("You are Sente(Black).\n",2);
      } else {
        _writeUserMessage("You are Gote(White).\n",2);
      }
      var match:Array = e.message.match(/^START:(.*)\+(.*)-([0-9]*)-([0-9]*)/);
      board.startGame(_client.myTurn, _client.playerNames, _player_infos,match[3], match[4]);
      _game_name = e.message.substr(6);
	  _client.watchers(_game_name);
      stopButton.enabled = false;
      closeButton.enabled = false;
      resignButton.enabled = true;
      rewindAllButton.enabled = false;
      rewindOneButton.enabled = false;
      forwardOneButton.enabled = false;
      forwardAllButton.enabled = false;
      kifuDataGrid.selectable = false;
      kifuDataGrid.dataProvider = board.kifu_list;
      mainViewStack.selectedIndex = 2;
    }

    private function _handleGameEnd(e:ServerMessageEvent):void {
      var kifuMove:Object = new Object();
	  _post_game = true;
      kifuMove.num = board.kifu_list.length;
      if(e.message.indexOf("TIME_UP") >= 0){
        board.timeout();
        //_writeUserMessage("Time up.\n",2);
		if (board.position.turn == board.my_turn) _sendAutoChat("Time out.");
        kifuMove.move = (board.position.turn == Kyokumen.SENTE ? "▲" : "△") + "Time up";
        kifuMove.moveKIF = "切れ負け";
        board.kifu_list.push(kifuMove);
      }
      if(e.message.indexOf("ILLEGAL_MOVE") >= 0){
        //_writeUserMessage("Illegal Move.\n",2);
        if (board.position.turn == board.my_turn) _sendAutoChat("Made illegal move: " + board.position.generateWesternNotationFromMovement(_my_last_move).split(" ")[0] + ".");
          kifuMove.move = (board.position.turn == Kyokumen.SENTE ? "▲" : "△") + "Illegal";
          kifuMove.moveKIF = "反則負け";
          board.kifu_list.push(kifuMove);
        }
      if (e.message.indexOf("RESIGN") >= 0) {
        //_writeUserMessage((board.position.turn == board.my_turn ? "You" : "Opponent") + " resigned.\n",2);
		if (board.position.turn == board.my_turn) _sendAutoChat("I resign.");
        kifuMove.move = (board.position.turn == Kyokumen.SENTE ? "▲" : "△") + "Resign";
        kifuMove.moveKIF = "投了";
        board.kifu_list.push(kifuMove);
      }
      if (e.message.indexOf("SENNICHITE") >= 0) {
          _writeUserMessage("Sennichite.\n",2);
      }
      if(e.message.indexOf("LOSE") >= 0){
        _writeUserMessage("You Lose.\n",2);
        if (_end_sound_play) _sound_lose.play();
      } else if(e.message.indexOf("WIN") >= 0){
        _writeUserMessage("You Win.\n",2);
        if (_end_sound_play) _sound_win.play();
      } else if(e.message.indexOf("DRAW") >=0){
        _writeUserMessage("Draw.\n",2);
        if (_end_sound_play) _sound_win.play();
      }
      closeButton.enabled = true;
      resignButton.enabled = false;
      kifuCopyButton.enabled = true;
      rewindAllButton.enabled = true;
      rewindOneButton.enabled = true;
      forwardOneButton.enabled = true;
      forwardAllButton.enabled = true;
      kifuDataGrid.dataProvider = board.kifu_list;
      kifuDataGrid.scrollToIndex(board.kifu_list.length+1);
      kifuDataGrid.selectable = true;
      kifuDataGrid.selectedIndex = board.kifu_list.length;
      board.endGame();
    }

    private function _handleWho(e:ServerMessageEvent):void{
      var users:Array = e.message.split("\n");
      var user_list:Array = new Array();
      for each(var user_data:String in users){
        if(user_data.match("##[WHO] +OK") != null){
          break;
        }
        trace("user_data:" + user_data);
        var match:Array = user_data.match(/\#\#\[WHO\] (.*) x1 (.*)/);
        if(match != null){
          var user:Object = { 'name':match[1], 'country':'81SU', 'status':StringUtil.trim(match[2].split(" ")[0]) }
          if(user.status == 'game_waiting' || user.status == 'start_waiting' || user.status == 'agree_waiting' || user.status == 'game'){
            user.rating = parseInt(match[2].split(' ')[3]);
			user.country_code = parseInt(match[2].split(' ')[4]);
          } else {
            user.rating = parseInt(match[2].split(' ')[1]);
			user.country_code = parseInt(match[2].split(' ')[2]);
          }
          user.rank = _infoFetcher.makeRankFromRating(user.rating);
		  user.country = _infoFetcher.country_names[user.country_code];
          if(user.status == "game_waiting" || user.status == "game"){
            user.game_name = match[2].split(" ")[1];
            var game_info:Array = user.game_name.match(/^(.*)-([0-9]*)-([0-9]*)/);
            var total:int = parseInt(game_info[2]) / 60 ;
            user.rule = total + "-" + game_info[3];
            if(user.status == "game_waiting"){
              user.status2 = "W";
            } else {
              user.status2 = "G(" + (match[2].split(" ")[2] == "+" ? "▲" : "△") + ")";
              if (user.name != game_info[1].toLowerCase()) user.opponent = game_info[1].toLowerCase();  //Show the user's opponent only when he is a challenger
            }
          }
          user_list.push(user);
        }
      }
      for (var i:int = 0; i < user_list.length ; i++) { //Show the user's opponent when he is a challengee (by searching his own name in the opponents' list)
        if (user_list[i].status == "game" && user_list[i].opponent == null) {
          for (var j:int = 0; j < user_list.length ; j++) {
            if (user_list[j].opponent == user_list[i].name) {
              user_list[i].opponent = user_list[j].name;
              break;
            }
          }
        }
      }
	  for (j = 0; j < _infoFetcher.titleUser.length; j++) {
		  for (i = 0; i < user_list.length; i++) {
			  if (user_list[i].name == _infoFetcher.titleUser[j]) {
				  user_list[i].titleName = _infoFetcher.titleName[j];
				  break;
			  }
		  }
	  }

      user_list.sortOn("rating", Array.NUMERIC | Array.DESCENDING);
	  _user_list = user_list;
      userListGrid.dataProvider = _user_list;
      for (i = 0; i < user_list.length; i++) {
        if (_user_list[i].name == _login_name.toLowerCase()) {
          userListGrid.selectedIndex = i;
          break;
        }
      }
	  userListPanel.title = "Main Lobby (" + _user_list.length + " players)";
    }

    private function _writeUserMessage(message:String, n:int):void {
		switch (n) {
			case 0:
				break;
			case 1:
				_userMessageScrollPos1 = userMessage1.verticalScrollPosition
				userMessage1.text += message;
				userMessage1.callLater(_scrollDown1);
				break;
			case 2:
				_userMessageScrollPos2 = userMessage2.verticalScrollPosition
				userMessage2.text += message;
				userMessage2.callLater(_scrollDown2);
				break;		
		}
    }

    private function _scrollDown1():void{
      if (_chat_auto_scroll1) userMessage1.verticalScrollPosition = userMessage1.maxVerticalScrollPosition;
	  else userMessage1.verticalScrollPosition = _userMessageScrollPos1;
    }

	private function _scrollDown2():void{
      if (_chat_auto_scroll2) userMessage2.verticalScrollPosition = userMessage2.maxVerticalScrollPosition;
	  else userMessage2.verticalScrollPosition = _userMessageScrollPos2;
    }
    
    private function _waitForGame(total:int=1500,byoyomi:int=30):void{
      _client.waitForGame(total,byoyomi);
      _refresh();
      stopButton.enabled = true;
    }
    
    private function _showOptions():void{
      optionWindow = OptionDialog(PopUpManager.createPopUp(this, OptionDialog, false));
      PopUpManager.centerPopUp(optionWindow);
      with(optionWindow){
        title = "Options";
        RadioGroup1.selectedValue = board.piece_type;
        pieceSoundCheckBox.selected = board.piece_sound_play;
        gameEndSoundCheckBox.selected = _end_sound_play;
        chatSoundCheckBox.selected = _chat_sound_play;
        OkButton.addEventListener("click",_handleOption);
      }
    }
    
    private function _handleOption(e:Event):void{
      board.setPieceType(int(optionWindow.RadioGroup1.selectedValue));
      board.piece_sound_play = optionWindow.pieceSoundCheckBox.selected;
      _end_sound_play = optionWindow.gameEndSoundCheckBox.selected;
      _chat_sound_play = optionWindow.chatSoundCheckBox.selected;
    }

    private function _challengeForm():void{
      var user:Object = userListGrid.selectedItem;
      if(user != null){
        var match:Array = user.game_name.match(/^(.*)-([0-9]*)-([0-9]*)/);
        var total:int = parseInt(match[2]) / 60 ;
        var rule:String = total + "min -" + match[3] + "sec";
        Alert.yesLabel = "Challenge";
        Alert.noLabel = "Offer your setting";
        Alert.buttonWidth = 140;
        //Only YES works now.
        Alert.show("Opponent:" + match[1] + "\nTime:" + rule + "\nHandicap: NONE","Game Setting",Alert.YES|Alert.CANCEL,this,_handleChallengeAlert);
        //set properties back to default.
        Alert.yesLabel = "Yes";
        Alert.noLabel = "No";
        Alert.buttonWidth = 60;
      }    
    }

    private function _handleChallengeAlert(e:CloseEvent):void{
      var user:Object = userListGrid.selectedItem;
      if (e.detail == Alert.YES) {
      _challenging = true;
      _writeUserMessage("Challenging.....\n",1);
         _client.challenge(user);
    } else if (e.detail == Alert.CANCEL) {
      } else {
        var challengeWindow:ChallengeForm = ChallengeForm(PopUpManager.createPopUp(this, ChallengeForm, true));
        PopUpManager.centerPopUp(challengeWindow);
        challengeWindow.title = "Challenge to " + user.name;
        challengeWindow.challengeButton.addEventListener("click",_challenge);
      }
      challengeButton.enabled = false;
    }

    private function _newGameForm():void{
      var newGameWindow:NewGameForm = NewGameForm(PopUpManager.createPopUp(this, NewGameForm, true));
      PopUpManager.centerPopUp(newGameWindow);
      newGameWindow.title = "Create new game";
      newGameWindow.addEventListener(GameRuleEvent.RULE_SELECTED,_handleRuleSelected);
    }
  
    private function _stopWaiting():void {
      _client.stopWaiting();
      _refresh();
      stopButton.enabled = false;
    }

    private function _handleRuleSelected(e:GameRuleEvent):void{
      _waitForGame(e.total,e.byoyomi);
    }

    private function _challenge(e:Event):void{
      var user:Object = userListGrid.selectedItem;
      if(user != null){
        _client.challenge(user);
      }
	  challengeButton.enabled = false;
    }

    private function _refresh():void{
      _client.who();
	  challengeButton.enabled = false;
	  watchButton.enabled = false;
    }

    private function _resign():void{
      if (board.my_turn == board.position.turn) {
//    _client.chat(_game_name + " (auto-chat) I resign.\n");
        _client.resign();
      }
    }

    private function _who():void{
      _client.who();
    }

    private function _closeGame():void{
      if(_game_name && _monitoring){
        _client.monitorOff(_game_name);
        _monitoring = false;
      }
      if (_game_name) {
      _sendAutoChat("I have left this room.");
        _game_name = null;
      }
      board.closeGame();
      mainViewStack.selectedIndex = 1;
      challengeButton.enabled = false;
      watchButton.enabled = false;
      _refresh();
    }
    
    private function _showImpasse():void {
      Alert.show("Black: " + board.position.calcImpasse(Kyokumen.SENTE) + " points\nWhite: " + board.position.calcImpasse(Kyokumen.GOTE) + " points", "Points for Impasse", Alert.OK);
    }

    private function _userSelected():void {
	  if (_game_name) return;
      var user:Object = userListGrid.selectedItem;
      if(user != null && user.name != _login_name && user.status == "game_waiting"){
        challengeButton.enabled = true;
        watchButton.enabled = false;
      } else if (user != null && user.status == "game") {
        challengeButton.enabled = false;
        watchButton.enabled = true;
      } else {
        challengeButton.enabled = false;
        watchButton.enabled = false;
      }
    }

    private function _playerMove(from:Point,to:Point,promote:Boolean):void{
      _my_last_move = board.position.generateMovementFromCoordinates(from, to, promote);
      _client.move(_my_last_move.toCSA());
    }

    private function _checkTimeout():void {
	  board.clientTimeout();
      _client.checkTimeout();
      // immitate game end message.
      //_handleGameEnd(new ServerMessageEvent(CsaShogiClient.GAME_END,"TIME_UP"));
    }

    private function _handleList(e:ServerMessageEvent):void{
      if(_watch_user != null){
        var lines:Array = e.message.split("\n");
        for each(var line:String in lines){
          var tokens:Array = line.split("+");
          if(tokens != null && (tokens[2].toLowerCase() == _watch_user.name || tokens[3].toLowerCase() == _watch_user.name)){
            var match:Array = line.match(/##\[LIST\] (.*)/);
            if(match != null){
              var game_name:String = match[1];
              _game_name = game_name;
              _monitoring = true;
			  _post_game = false;
              _client.monitorOn(game_name);
              _client.watchers(game_name);
              break;
            }
          }
        }
      }
    }

    private function _handleMonitor(e:ServerMessageEvent):void{
      if(_watch_user != null){
        board.monitor(e.message,_watch_user,_user_list);  // _user_list is sent only for refering to the players' ratings and country on the board (Temporarily)
      }
      kifuDataGrid.dataProvider = board.kifu_list;
      kifuDataGrid.scrollToIndex(board.kifu_list.length + 1);
      if (board.watch_game_end) {
		_post_game = true;
        _writeUserMessage("Game End.\n",2);
        if (_end_sound_play) _sound_win.play();
        kifuCopyButton.enabled = true;
        rewindAllButton.enabled = true;
        rewindOneButton.enabled = true;
        forwardOneButton.enabled = true;
        forwardAllButton.enabled = true;
        kifuDataGrid.selectable = true;
        kifuDataGrid.selectedIndex = board.kifu_list.length;
      }
    }

    private function _watch():void{
      _client.list();
	  watchButton.enabled = false;
      _watch_user = userListGrid.selectedItem;
      mainViewStack.selectedIndex = 2;
      closeButton.enabled = true;
      resignButton.enabled = false;
      rewindAllButton.enabled = false;
      rewindOneButton.enabled = false;
      forwardOneButton.enabled = false;
      forwardAllButton.enabled = false;
      kifuDataGrid.selectable = false;
      kifuDataGrid.dataProvider = board.kifu_list;
    }

    private function _handleSendChat1(e:FlexEvent):void{
      _client.chat(e.target.text);
      e.target.text = "";
    }
	
    private function _handleSendChat2(e:FlexEvent):void{
      if(_game_name) _client.chat(_game_name + " " + e.target.text);
      e.target.text = "";
    }
  
  private function _sendAutoChat(str:String):void {
    if (_game_name) {
      _client.chat(_game_name + " [auto-chat] " + str);
    }
  }
  
  private function _change_auto_scroll1():void {
	  _chat_auto_scroll1 = autoScrollCheck1.selected;
  }
   
  private function _change_auto_scroll2():void {
	  _chat_auto_scroll2 = autoScrollCheck2.selected;
  }
  
  private function _checkLobby():void {
	  mainViewStack.selectedIndex = 1;
	  backToGameButton.visible = true;
	  startButton.enabled = false;
  }

  private function _backToGame():void {
	  mainViewStack.selectedIndex = 2;
	  backToGameButton.visible = false;
	  startButton.enabled = true;
  }
  
  private function replay():void {
    board.replayMoves(int(Math.min(kifuDataGrid.selectedIndex,board.kifu_list.length-2)));
  }
    
  private function replayByButton(i:int):void{
    switch (i) {
      case -2:
        kifuDataGrid.selectedIndex = 0; replay();
        break;
      case -1:
        if (kifuDataGrid.selectedIndex > 0) {
          kifuDataGrid.selectedIndex--; replay();
        }
        break;
      case 1:
        if (kifuDataGrid.selectedIndex < board.kifu_list.length) {
          kifuDataGrid.selectedIndex++; replay();
        }
        break;
      case 2:
        kifuDataGrid.selectedIndex = board.kifu_list.length; replay();
    }
  }

    ]]>
  </mx:Script>
  <mx:Fade id="hideLogin" alphaFrom="1.0" alphaTo="0.0" duration="1000" />
  <mx:ViewStack id="mainViewStack" creationPolicy="all" width="100%" height="100%">
    <mx:VBox id="loginBox" horizontalAlign="center" verticalAlign="middle" width="100%" height="100%" fontSize="11" hideEffect="{hideLogin}">
    <mx:Image source="http://www.81squareuniverse.com/dojo/images/81Dojo.jpg"/>
      <mx:Label text="(powered by ShogiServer and 81SU)"/>
      <mx:Form>
        <mx:FormItem label="loginname">
            <mx:TextInput id="loginname" width="200"/>
        </mx:FormItem>
        <mx:FormItem label="password">
            <mx:TextInput id="password" width="200" displayAsPassword="true"/>
        </mx:FormItem>
        <mx:FormItem>
            <mx:Button id="loginButton" label="Login" y="400" click="_connectAndLogin();"/>
        </mx:FormItem>
      </mx:Form>
      <mx:Label id="loginMessage"/>
      <mx:Label id="errorMessage" color="#ff6666" />
      <mx:LinkButton label="Sign Up" fontSize="15" click="navigateToURL(new URLRequest('http://81square-shogi.homeip.net:2195'), 'quote')" />
      <mx:Label text="Chief Programmer: Kota"/>
      <mx:Label text="{VERSION}"/>
    </mx:VBox>
    
    <mx:VBox horizontalAlign="center" fontSize="11">
      <mx:Panel id="userListPanel" width="765" height="560" paddingLeft="10" paddingTop="10">
      <mx:HBox>
        <mx:Button id="refreshButton" label="Refresh" click="_refresh();"/>
        <mx:Button id="startButton" label="Wait for Game" click="_newGameForm();"/>
        <mx:Button id="stopButton" label="Stop Waiting" click="_stopWaiting()" enabled="false" />
        <mx:Button id="challengeButton" label="Challenge" click="_challengeForm();" enabled="false"/>
        <mx:Button id="watchButton" label="Watch" click="_watch();" enabled="false"/>
        <mx:Button id="playerInfo" label="Player Info" enabled="false"/>
		<mx:Label text="{VERSION}"/>
      </mx:HBox>
        <mx:DataGrid id="userListGrid" width="720" height="250" change="_userSelected();" rowHeight="21">
         <mx:columns>
		  <mx:DataGridColumn dataField="titleName" headerText="Title" width="60"/>
          <mx:DataGridColumn dataField="rank" headerText="Rank" width="65"/>
          <mx:DataGridColumn dataField="name" headerText="Name" width="120"/>
          <mx:DataGridColumn dataField="country" headerText="Country" width="110"/>
          <mx:DataGridColumn dataField="rating" headerText="Rating" width="60"/>
          <mx:DataGridColumn dataField="status2" headerText="Status" width="60"/>
          <mx:DataGridColumn dataField="rule" headerText="Rule" width="60"/>
          <mx:DataGridColumn dataField="opponent" headerText="Opponent" width="120"/>
          <mx:DataGridColumn dataField="status" headerText="status(inside)" width="120"/>
         </mx:columns>
        </mx:DataGrid>
		<mx:HBox>
			<mx:VBox>
				<mx:TextArea id="userMessage1" wordWrap="true" editable="false" width="580" height="185" fontSize="12"/>
				<mx:HBox>
					<mx:Label text="Chat"/>
					<mx:TextInput id="chatMessage1" width="430"/>
					<mx:CheckBox id="autoScrollCheck1" label="Auto-scroll" selected="true" click="_change_auto_scroll1();" />
				</mx:HBox>
			</mx:VBox>
			<mx:VBox>
				<mx:Button id="optionButton1" label="Options" click="_showOptions();" enabled="true"/>
				<mx:Button id="backToGameButton" label="Back to Game" click="_backToGame();" visible="false" color="#FF0000" />
			</mx:VBox>
		</mx:HBox>
      </mx:Panel>
    </mx:VBox>
    
    <mx:HBox horizontalAlign="center" verticalAlign="middle">
      <mx:VBox>
      <eightyOneSquare:Board id="board" width="782" height="474"/> 
      <mx:HBox>
        <mx:Panel id="messagePanel" title="Message Panel" width="435" height="200" headerHeight="22">
        <mx:TextArea id="userMessage2" wordWrap="true" editable="false" width="415" height="166" fontSize="12" />
        </mx:Panel>
        <mx:Panel id="controlPanel" title="Control Panel" width="340" height="200" verticalAlign="middle" paddingLeft="8" headerHeight="22">
          <mx:HBox>
            <mx:Button id="resignButton" label="Resign" click="_resign();"/>
            <mx:Button id="optionButton2" label="Options" click="_showOptions();"/>
            <mx:Button id="impasseButton" label="Impasse?" click="_showImpasse();"/>
            <mx:Button id="closeButton" label="Close" click="_closeGame();" enabled="false"/>           
          </mx:HBox>
          <mx:HBox>
            <mx:Button id="rewindAllButton" label="|&lt;" enabled="false" click="replayByButton(-2);"/>
            <mx:Button id="rewindOneButton" label="&lt;" enabled="false" click="replayByButton(-1);"/>    
            <mx:Button id="forwardOneButton" label=">" enabled="false" click="replayByButton(1);"/>
            <mx:Button id="forwardAllButton" label=">|" enabled="false" click="replayByButton(2);"/> 
          </mx:HBox>
         <mx:Label text="Chat"/>
         <mx:TextInput id="chatMessage2" width="300"/>
		 <mx:HBox>
			<mx:CheckBox id="autoScrollCheck2" label="Auto-scroll" selected="true" click="_change_auto_scroll2();" />
			<mx:Button id="checkLobbyButton" label="Check Lobby" enabled="true" click="_checkLobby();" />
		</mx:HBox>
        </mx:Panel>
      </mx:HBox>
      </mx:VBox>
        <mx:Panel id="sidePanel" title="Side Panel" width="180" height="680" headerHeight="22">
          <mx:Label id="watcherListTitle" text="Watchers (0)" fontWeight="bold" />
        <mx:DataGrid id="watcherListGrid" width="160" height="240" rowHeight="21">
         <mx:columns>
          <mx:DataGridColumn dataField="name" width="70"/>
          <mx:DataGridColumn dataField="country" width="35"/>
          <mx:DataGridColumn dataField="rating"/>
         </mx:columns>
        </mx:DataGrid>
        <mx:Label text="Kifu" fontWeight="bold"/>
        <mx:DataGrid id="kifuDataGrid" sortableColumns="false" width="160" height="318" change="replay();" selectable="false" fontSize="10" rowHeight="20">
         <mx:columns>
          <mx:DataGridColumn headerText="No." dataField="num" width="35"/>
          <mx:DataGridColumn dataField="move"/>
         </mx:columns>
        </mx:DataGrid>
        <mx:HBox>
             <mx:Button id="kifuCopyButton" label="Copy" click="board.copyKIFtoClipboard(VERSION);" enabled="false"/>
             <mx:Button id="kifuSaveButton" label="Save" enabled="false"/>          
        </mx:HBox>
        </mx:Panel>
    </mx:HBox>
  </mx:ViewStack>

</mx:Application>

<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" backgroundColor="0xcccc77" creationComplete="{initApp()}" xmlns:eightyOneSquare="*">

	<mx:Script>
	  <![CDATA[
    import flash.display.*;
    import mx.events.FlexEvent;
    import mx.events.CloseEvent;
    import flash.media.Sound;
    import mx.controls.*;
    import mx.managers.PopUpManager;
    import mx.core.IFlexDisplayObject;
    import CsaShogiClient;
    import Board;
    import ChallengeForm;
    import GameRuleEvent;
    import mx.utils.StringUtil;

    private var _client:CsaShogiClient;
    [Bindable]
    private var _game_name:String;
    private var _user_list:Array;
		private var _login_name:String;
    private var _watch_user:Object;
    private var _monitoring:Boolean;
    private var _challenging:Boolean = false;

		[Embed(source = "/sound/win.mp3")]
		private var Sound_win:Class;
		private var _sound_win:Sound = new Sound_win();
		[Embed(source = "/sound/lose.mp3")]
		private var Sound_lose:Class;
		private var _sound_lose:Sound = new Sound_lose();
		[Embed(source = "/sound/chat.mp3")]
		private var Sound_chat:Class;
		private var _sound_chat:Sound = new Sound_chat();
		[Embed(source = "/sound/challenger.mp3")]
		private var Sound_challenger:Class;
		private var _sound_challenger:Sound = new Sound_challenger();
		private var optionWindow:OptionDialog;
		private var _end_sound_play:Boolean = true;
		private var _chat_sound_play:Boolean = true;
		private const rank_names:Array = new Array('Novice', '15-kyu', '14-kyu', '13-kyu', '12-kyu', '11-kyu', '10-kyu', '9-kyu', '8-kyu', '7-kyu', '6-kyu', '5-kyu', '4-kyu', '3-kyu', '2-kyu', '1-kyu', '1-dan', '2-dan', '3-dan', '4-dan', '5-dan', '6-dan');

    private var _keepAliveTimer:Timer;

		private function initApp():void
		{
		  trace("application initialized..");
		  _client = new CsaShogiClient();
      board.setMoveCallback(_playerMove);
      board.setTimeoutCallback(_checkTimeout);
      chatMessage.addEventListener(FlexEvent.ENTER,_handleSendChat);
      chatMessage2.addEventListener(FlexEvent.ENTER,_handleSendChat);
      loginname.addEventListener(FlexEvent.ENTER,_handleLogin);
      password.addEventListener(FlexEvent.ENTER,_handleLogin);
      _user_list = new Array();
      userListGrid.dataProvider = _user_list;
		}

    private function _connectAndLogin():void{
		  trace("connecting.");
      _client.addEventListener(CsaShogiClient.CONNECTED,_handleConnected);
      _client.addEventListener(CsaShogiClient.LOGIN,_handleLoggedIn);
      _client.addEventListener(CsaShogiClient.LOGIN_FAILED,_handleLoginFailed);
      _client.addEventListener(CsaShogiClient.GAME_STARTED,_handleGameStarted);
      _client.addEventListener(CsaShogiClient.GAME_END,_handleGameEnd);
      _client.addEventListener(CsaShogiClient.CHAT,_handleChat);
      _client.addEventListener(CsaShogiClient.MOVE,_handleMove);
      _client.addEventListener(CsaShogiClient.WHO,_handleWho);
      _client.addEventListener(CsaShogiClient.MONITOR,_handleMonitor);
      _client.addEventListener(CsaShogiClient.LIST, _handleList);
      _client.addEventListener(CsaShogiClient.GAME_SUMMARY, _handleGameSummary);
      _client.addEventListener(CsaShogiClient.REJECT, _handleReject);
      loginMessage.text = "Connecting...";
      errorMessage.text = "";
      _client.connect();
    } 

    private function _handleKeepAlive(e:Event):void{
      //_client.keepAlive();
      _refresh();
    }

    private function _handleLogin(e:Event):void{
      _connectAndLogin();
    }
    
    private function _handleConnected(e:Event):void{
      loginMessage.text = "Logging in...";
      _client.login(loginname.text, password.text);
			_login_name = loginname.text;
    } 

    private function _handleLoggedIn(e:Event):void{
      loginMessage.text = "Logged in Successfully";
      mainViewStack.selectedIndex = 1;
      _client.who();
      _keepAliveTimer = new Timer(30000);
      _keepAliveTimer.addEventListener(TimerEvent.TIMER,_handleKeepAlive);
      _keepAliveTimer.start();
    }

    private function _handleLoginFailed(e:ServerMessageEvent):void{
      loginMessage.text = "";
      errorMessage.text = e.message;
    }

    private function _handleChat(e:ServerMessageEvent):void{
      if(_isMessageAudible(e.message)){
			  _writeUserMessage(_format_message(e.message));
			  if (_chat_sound_play) _sound_chat.play();
      }
    }

    private function _format_message(message:String):String{
      message = message.substr(8);
      var match:Array = message.match(/(\[.+?\]) ([^ ]+?\+[^ ]+?\-[0-9]+?\-[0-9]+?\+[^ ]+?\+[^ ]+?\+[0-9]*) (.*)/);
      if(match != null){
        message = match[1] + " " + match[3] + "\n";
      }
      return message;
    }

    private function _isMessageAudible(message:String):Boolean{
      var sender_name:String = message.match(/\#\#\[CHAT\]\[(.*)\]/)[1];
      if(board.inGame){
        if(_isPlayer(sender_name)){
          return true;
        } else {
          return false;
        }
      } else {
        var match:Array = message.match(/\#\#\[CHAT\]\[(.*)\] ([^ ]+?\+[^ ]+?\-[0-9]+?\-[0-9]+?\+[^ ]+?\+[^ ]+?\+[0-9]*) (.*)/);
        if(match != null){
          var game_name:String = match[2];
          if(_game_name && _game_name == game_name){
            return true;
          }
        } else {
          //No game id => public chat.
          if(_monitoring){
            return false;
          } else {
            return true;
          }
        }
      }
      return false;
    }

    private function _isPlayer(user_name:String):Boolean{
      return board.playerNames != null && board.playerNames[0] == user_name || board.playerNames[1] == user_name
    }

    private function _handleMove(e:ServerMessageEvent):void {
      board.makeMove(e.message);
      kifuDataGrid.dataProvider = board.kifu_list;
      kifuDataGrid.scrollToIndex(board.kifu_list.length+1);
    }
	
	private function _handleGameSummary(e:ServerMessageEvent):void {
		if (_challenging) {
			_challenging = false;
			_client.agree();
		} else {
			_sound_challenger.play();
			Alert.yesLabel = "Accept";
			Alert.noLabel = "Reject";
			Alert.buttonWidth = 140;
			Alert.show("Opponent:" + (_login_name == e.message.split("\n")[0] ? e.message.split("\n")[1] : e.message.split("\n")[0]), "Here comes a new challenger!!",
                Alert.YES | Alert.NO, this, _handleGameSummaryAlert);
			//set properties back to default.
			Alert.yesLabel = "Yes";
			Alert.noLabel = "No";
			Alert.buttonWidth = 60;	
		}
	}
	
	 private function _handleGameSummaryAlert(e:CloseEvent):void{
  		var user:Object = userListGrid.selectedItem;
      if(e.detail == Alert.YES){
        _client.agree();
      } else {
        _client.reject();
      }
    }
	
	private function _handleReject(e:ServerMessageEvent):void {
		_writeUserMessage("Rejected by the opponent.\n");
	}

    private function _handleGameStarted(e:ServerMessageEvent):void{
			userMessage.text = '';
      if(_client.myTurn == Kyokumen.SENTE){
        _writeUserMessage("You are Sente(Black).\n");
      } else {
        _writeUserMessage("You are Gote(White).\n");
      }
      var match:Array = e.message.match(/^START:(.*)\+(.*)-([0-9]*)-([0-9]*)/);
      board.startGame(_client.myTurn, _client.playerNames, match[3], match[4]);
      _game_name = e.message.substr(6);
      stopButton.enabled = false;
      closeButton.enabled = false;
      resignButton.enabled = true;
      rewindAllButton.enabled = false;
      rewindOneButton.enabled = false;
      forwardOneButton.enabled = false;
      forwardAllButton.enabled = false;
      kifuDataGrid.selectable = false;
      kifuDataGrid.dataProvider = board.kifu_list;
      mainViewStack.selectedIndex = 2;
    }

    private function _handleGameEnd(e:ServerMessageEvent):void {
	  var kifuMove:Object = new Object();
	  kifuMove.num = board.kifu_list.length;
      if(e.message.indexOf("TIME_UP") >= 0){
				board.timeout();
        _writeUserMessage("Time up.\n");
		  kifuMove.move = (board.position.turn == Kyokumen.SENTE ? "▲" : "△") + "Time up";
		  kifuMove.moveKIF = "切れ負け";
		  board.kifu_list.push(kifuMove);
			}
      if(e.message.indexOf("ILLEGAL_MOVE") >= 0){
      	_writeUserMessage("Illegal Move.\n");
		  kifuMove.move = (board.position.turn == Kyokumen.SENTE ? "▲" : "△") + "Illegal";
		  kifuMove.moveKIF = "反則負け";
		  board.kifu_list.push(kifuMove);
      }
	  if (e.message.indexOf("RESIGN") >= 0) {
      	_writeUserMessage((board.position.turn == board.my_turn ? "You" : "Opponent") + " resigned.\n");
		  kifuMove.move = (board.position.turn == Kyokumen.SENTE ? "▲" : "△") + "Resign";
		  kifuMove.moveKIF = "投了";
		  board.kifu_list.push(kifuMove);
	  }
	  if (e.message.indexOf("SENNICHITE") >= 0) {
      	_writeUserMessage("Sennichite.\n");
	  }
      if(e.message.indexOf("LOSE") >= 0){
        _writeUserMessage("You Lose.\n");
        if (_end_sound_play) _sound_lose.play();
      } else if(e.message.indexOf("WIN") >= 0){
        _writeUserMessage("You Win.\n");
        if (_end_sound_play) _sound_win.play();
      } else if(e.message.indexOf("DRAW") >=0){
		_writeUserMessage("Draw.\n");
		if (_end_sound_play) _sound_win.play();
	  }
      closeButton.enabled = true;
      resignButton.enabled = false;
      kifuCopyButton.enabled = true;
      rewindAllButton.enabled = true;
      rewindOneButton.enabled = true;
      forwardOneButton.enabled = true;
      forwardAllButton.enabled = true;
	  kifuDataGrid.dataProvider = board.kifu_list;
      kifuDataGrid.scrollToIndex(board.kifu_list.length+1);
      kifuDataGrid.selectable = true;
      kifuDataGrid.selectedIndex = board.kifu_list.length;
      board.endGame();
    }

    private function _handleWho(e:ServerMessageEvent):void{
      var users:Array = e.message.split("\n");
      var user_list:Array = new Array();
      for each(var user_data:String in users){
        if(user_data.match("##[WHO] +OK") != null){
          break;
        }
        trace("user_data:" + user_data);
        var match:Array = user_data.match(/\#\#\[WHO\] (.*)\+(.+) x1 (.*)/);
        if(match != null && match[2] != "OK"){
          var name:String = match[1];
          var user:Object = new Object();
          user.name = name;
          user.country = "81SU";
          user.rating = 1000;
          user.status = StringUtil.trim(match[3].split(" ")[0]);
          if(user.status == 'game_waiting' || user.status == 'start_waiting' || user.status == 'agree_waiting' || user.status == 'game'){
            user.rating = parseInt(match[3].split(' ')[3]);
          } else {
            user.rating = parseInt(match[3].split(' ')[1]);
          }
          user.rank = makeRankFromRating(user.rating);
          if(user.status.indexOf("game_waiting") == 0){
            user.game_name = match[3].split(" ")[1];
	          user.status2 = "W";
	          var game_info:Array = user.game_name.match(/^(.*)-([0-9]*)-([0-9]*)/);
	          var total:int = parseInt(game_info[2]) / 60 ;
	          user.rule = total + "-" + game_info[3];
          } else if(user.status.indexOf("game") == 0){
            user.game_name = match[3].split(" ")[1];
            user.status2 = "G(" + (match[3].split(" ")[2] == "+" ? "▲" : "△") + ")";
            game_info = user.game_name.match(/^(.*)-([0-9]*)-([0-9]*)/);
            total = parseInt(game_info[2]) / 60 ;
            user.rule = total + "-" + game_info[3];
            if (user.name != game_info[1].toLowerCase()) user.opponent = game_info[1].toLowerCase();  //Show the user's opponent only when he is a challenger
          }
          user_list.push(user);
        }
      }
      for (var i:int = 0; i < user_list.length ; i++) { //Show the user's opponent when he is a challengee (by searching his own name in the opponents' list)
        if (user_list[i].status == "game" && user_list[i].opponent == null) {
          for (var j:int = 0; j < user_list.length ; j++) {
            if (user_list[j].opponent == user_list[i].name) {
              user_list[i].opponent = user_list[j].name;
              break;
            }
          }
        }
      }
      userListGrid.dataProvider = user_list;
    }

    private function _writeUserMessage(message:String):void{
      userMessage.text += message;
      userMessage.callLater(_scrollDown);
      userMessage2.text += message;
      userMessage2.callLater(_scrollDown);
    }

    private function _scrollDown():void{
      userMessage.verticalScrollPosition = userMessage.maxVerticalScrollPosition;
      userMessage2.verticalScrollPosition =  userMessage2.maxVerticalScrollPosition;
    }
    
    private function _waitForGame(total:int=1500,byoyomi:int=30):void{
      _client.waitForGame(total,byoyomi);
			_refresh();
			stopButton.enabled = true;
    }
    
    private function _showOptions():void{
    	optionWindow = OptionDialog(PopUpManager.createPopUp(this, OptionDialog, false));
    	PopUpManager.centerPopUp(optionWindow);
    	optionWindow.title = "Options";
    	optionWindow.RadioGroup1.selectedValue = board.piece_type;
      optionWindow.pieceSoundCheckBox.selected = board.piece_sound_play;
    	optionWindow.gameEndSoundCheckBox.selected = _end_sound_play;
    	optionWindow.chatSoundCheckBox.selected = _chat_sound_play;
    	optionWindow.OkButton.addEventListener("click",_handleOption);
    }
    
    private function _handleOption(e:Event):void{
    	board.setPieceType(int(optionWindow.RadioGroup1.selectedValue));
    	board.piece_sound_play = optionWindow.pieceSoundCheckBox.selected;
    	_end_sound_play = optionWindow.gameEndSoundCheckBox.selected;
    	_chat_sound_play = optionWindow.chatSoundCheckBox.selected;
    }

    private function _challengeForm():void{
  		var user:Object = userListGrid.selectedItem;
			if(user != null){
        trace("gamename:"+user.game_name);
        var match:Array = user.game_name.match(/^(.*)-([0-9]*)-([0-9]*)/);
        var total:int = parseInt(match[2]) / 60 ;
        var rule:String = total + "min -" + match[3] + "sec";
        Alert.yesLabel = "Challenge";
        Alert.noLabel = "Offer your setting";
        Alert.buttonWidth = 140;
        //Only YES works now.
        Alert.show("Opponent:" + match[1] + "\nTime:" + rule + "\nHandicap: NONE","Game Setting",Alert.YES|Alert.CANCEL,this,_handleChallengeAlert);
        //set properties back to default.
        Alert.yesLabel = "Yes";
        Alert.noLabel = "No";
        Alert.buttonWidth = 60;
			}  	
    }

    private function _handleChallengeAlert(e:CloseEvent):void{
  		var user:Object = userListGrid.selectedItem;
      if (e.detail == Alert.YES) {
		  _challenging = true;
		  _writeUserMessage("Challenging.....\n");
         _client.challenge(user);
	  } else if (e.detail == Alert.CANCEL) {
      } else {
        var challengeWindow:ChallengeForm = ChallengeForm(PopUpManager.createPopUp(this, ChallengeForm, true));
				PopUpManager.centerPopUp(challengeWindow);
	      challengeWindow.title = "Challenge to " + user.name;
	      challengeWindow.challengeButton.addEventListener("click",_challenge);
      }
      challengeButton.enabled = false;
    }

    private function _newGameForm():void{
			var newGameWindow:NewGameForm = NewGameForm(PopUpManager.createPopUp(this, NewGameForm, true));
			PopUpManager.centerPopUp(newGameWindow);
	    newGameWindow.title = "Create new game";
	    newGameWindow.addEventListener(GameRuleEvent.RULE_SELECTED,_handleRuleSelected);
    }
	
    private function _stopWaiting():void {
    	_client.stopWaiting();
    	_refresh();
    	stopButton.enabled = false;
    }

    private function _handleRuleSelected(e:GameRuleEvent):void{
      _waitForGame(e.total,e.byoyomi);
    }

    private function _challenge(e:Event):void{
    	var user:Object = userListGrid.selectedItem;
      if(user != null){
    	  _client.challenge(user);
      }
    }

		private function _refresh():void{
			_client.who();	
		}

    private function _resign():void{
      if (board.my_turn == board.position.turn) {
//		_client.chat(_game_name + " (auto-chat) I resign.\n");
      	_client.resign();
      }
    }

    private function _who():void{
      _client.who();
    }

		private function _closeGame():void{
      if(_game_name && _monitoring){
        _client.monitorOff(_game_name);
        _monitoring = false;
      }
      if(_game_name){
        _game_name = null;
      }
      board.closeGame();
      mainViewStack.selectedIndex = 1;
      challengeButton.enabled = false;
      watchButton.enabled = false;
			_refresh();
		}
		
		private function _showImpasse():void {
			Alert.show("Black: " + board.position.calcImpasse(Kyokumen.SENTE) + " points\nWhite: " + board.position.calcImpasse(Kyokumen.GOTE) + " points", "Points for Impasse", Alert.OK);
		}

		private function _userSelected():void{
			var user:Object = userListGrid.selectedItem;
			if(user != null && user.name != _login_name && user.status == "game_waiting"){
				challengeButton.enabled = true;
				watchButton.enabled = false;
			} else if (user != null && user.status == "game") {
				challengeButton.enabled = false;
				watchButton.enabled = true;
			} else {
				challengeButton.enabled = false;
				watchButton.enabled = false;
			}
		}

    private function _playerMove(from:Point,to:Point,promote:Boolean):void{
      var mv:Movement = board.position.generateMovementFromCoordinates(from,to,promote);
      _client.move(mv.toCSA());
    }

		private function _checkTimeout():void{
			_client.checkTimeout();
		}

    private function _handleList(e:ServerMessageEvent):void{
      trace("list:"+e.message);
      if(_watch_user != null){
        var lines:Array = e.message.split("\n");
        for each(var line:String in lines){
          var tokens:Array = line.split("+");
          trace(tokens[0]+":"+tokens[1]+":"+tokens[2]+":"+tokens[3]);
          if(tokens != null && (tokens[2].toLowerCase() == _watch_user.name || tokens[3].toLowerCase() == _watch_user.name)){
            var match:Array = line.match(/##\[LIST\] (.*)/);
            trace("Line = " + line);
            if(match != null){
              var game_name:String = match[1];
              trace("WATCH GAME:" + game_name + "," + match[0].toString() + "," + match[1].toString());
              _game_name = game_name;
              _monitoring = true;
              _client.monitorOn(game_name);
              break;
            }
          }
        }
      }
    }

    private function _handleMonitor(e:ServerMessageEvent):void{
      if(_watch_user != null){
        board.monitor(e.message,_watch_user);
      }
      kifuDataGrid.dataProvider = board.kifu_list;
      kifuDataGrid.scrollToIndex(board.kifu_list.length + 1);
      if (board.watch_game_end) {
        _writeUserMessage("Game End.\n");
        if (_end_sound_play) _sound_win.play();
        kifuCopyButton.enabled = true;
        rewindAllButton.enabled = true;
        rewindOneButton.enabled = true;
        forwardOneButton.enabled = true;
        forwardAllButton.enabled = true;
        kifuDataGrid.selectable = true;
        kifuDataGrid.selectedIndex = board.kifu_list.length;
      }
    }

    private function _watch():void{
      _client.list();
      _watch_user = userListGrid.selectedItem;
      mainViewStack.selectedIndex = 2;
      closeButton.enabled = true;
      resignButton.enabled = false;
      rewindAllButton.enabled = false;
      rewindOneButton.enabled = false;
      forwardOneButton.enabled = false;
      forwardAllButton.enabled = false;
      kifuDataGrid.selectable = false;
      kifuDataGrid.dataProvider = board.kifu_list;
    }

    private function _handleSendChat(e:FlexEvent):void{
      if(_game_name){
        _client.chat(_game_name + " " + e.target.text);
      } else {
        _client.chat(e.target.text);
      }
      e.target.text = "";
    }
    
    private function replay():void {
		board.replayMoves(int(Math.min(kifuDataGrid.selectedIndex,board.kifu_list.length-2)));
    }
    
    private function replayByButton(i:int):void{
    	switch (i) {
    		case -2:
    			kifuDataGrid.selectedIndex = 0; replay();
    			break;
    		case -1:
    			if (kifuDataGrid.selectedIndex > 0) {
	    			kifuDataGrid.selectedIndex--; replay();
	    		}
	    		break;
	    	case 1:
	    		if (kifuDataGrid.selectedIndex < board.kifu_list.length) {
	    			kifuDataGrid.selectedIndex++; replay();
	    		}
	    		break;
	    	case 2:
	    		kifuDataGrid.selectedIndex = board.kifu_list.length; replay();
    	}
    }
	
	//TO DO: Move to another class maybe?
	private function makeRankFromRating(i:int):String{
//		const rank_borders:Array = new Array(50, 150, 250, 350, 450, 550, 650, 750, 850, 950, 1050, 1150, 1250, 1350, 1450, 1550, 1700, 1900, 2100, 2300, 2450,10000);
//		for (var j:int = 0; j < 22; j++) {
//			if (i < rank_borders[j]) return rank_names[j];
//		}
		if (i < 1550) return rank_names[int((i + 50) / 100)];
		else if (i < 2300) return rank_names[int((i + 1700) / 200)];
		else if (i < 2450) return rank_names[20];
		else return rank_names[21];
	}

	  ]]>
	</mx:Script>
  <mx:ViewStack id="mainViewStack" creationPolicy="all" width="100%" height="100%">
    <mx:VBox id="loginBox" horizontalAlign="center" verticalAlign="middle" width="100%" height="100%">
      <mx:Label text="81-Dojo" fontSize="17"/>
      <mx:Label text="(powered by ShogiServer and 81SU)" fontSize="11"/>
      <mx:Form>
        <mx:FormItem label="loginname">
            <mx:TextInput id="loginname" width="200"/>
	      </mx:FormItem>
	      <mx:FormItem label="password">
            <mx:TextInput id="password" width="200" displayAsPassword="true"/>
	      </mx:FormItem>
	      <mx:FormItem>
            <mx:Button id="loginButton" label="Login" y="400" click="_connectAndLogin();"/>
	      </mx:FormItem>
	    </mx:Form>
      <mx:Label id="loginMessage"/>
      <mx:Label id="errorMessage" color="#ff6666" />
      <mx:LinkButton label="Sign Up" fontSize="15" click="navigateToURL(new URLRequest('http://81square-shogi.homeip.net:2195'), 'quote')" />
      <mx:Label text="Chief Programmer: Kota" fontSize="10"/>
      <mx:Label text="ver.2010/04/17"/>
    </mx:VBox>
    
    <mx:VBox>
    	<mx:Panel title="User List Panel" width="640" height="480" paddingLeft="10" paddingTop="10">
			<mx:HBox>
				<mx:Button id="refreshButton" label="Refresh" click="_refresh();"/>
				<mx:Button id="startButton" label="Wait for Game" click="_newGameForm();"/>
				<mx:Button id="stopButton" label="Stop Waiting" click="_stopWaiting()" enabled="false" />
				<mx:Button id="challengeButton" label="Challenge" click="_challengeForm();" enabled="false"/>
				<mx:Button id="watchButton" label="Watch" click="_watch();" enabled="false"/>
				<mx:Button id="optionButton1" label="Options" click="_showOptions();" enabled="true"/>
			</mx:HBox>
	      <mx:DataGrid id="userListGrid" width="580" height="250" change="_userSelected();">
	       <mx:columns>
	        <mx:DataGridColumn dataField="rank" width="65"/>
	        <mx:DataGridColumn dataField="name" width="120"/>
	        <mx:DataGridColumn dataField="country" width="110"/>
	        <mx:DataGridColumn dataField="rating" width="60"/>
			<mx:DataGridColumn dataField="status2" headerText="status" width="60"/>
			<mx:DataGridColumn dataField="rule" width="60"/>
	        <mx:DataGridColumn dataField="opponent" width="120"/>
	        <mx:DataGridColumn dataField="status" headerText="status(inside)" width="120"/>
	       </mx:columns>
	      </mx:DataGrid>
	      	      <mx:TextArea id="userMessage2" wordWrap="true" editable="false" width="430" height="115" fontSize="12"/>   
	      		  <mx:TextInput id="chatMessage2" width="430"/>    
      </mx:Panel>
    </mx:VBox>
    
    <mx:HBox>
      <mx:VBox>
      <eightyOneSquare:Board id="board" width="782" height="474"/> 
      <mx:HBox>
      	<mx:Panel id="messagePanel" title="Message Panel" width="435" height="155">
	      <mx:TextArea id="userMessage" wordWrap="true" editable="false" width="415" height="115" fontSize="12" />      		
      	</mx:Panel>
      	<mx:Panel id="controlPanel" title="Control Panel" width="340" height="155" verticalAlign="middle" paddingLeft="8">
      	  <mx:HBox>
       	  	<mx:Button id="resignButton" label="Resign" click="_resign();"/>
       	  	<mx:Button id="optionButton2" label="Options" click="_showOptions();"/>
			<mx:Button id="impasseButton" label="Impasse?" click="_showImpasse();"/>
          	<mx:Button id="closeButton" label="Close" click="_closeGame();" enabled="false"/>     	  	
      	  </mx:HBox>
      	  <mx:HBox>
       	  	<mx:Button id="rewindAllButton" label="|&lt;" enabled="false" click="replayByButton(-2);"/>
          	<mx:Button id="rewindOneButton" label="&lt;" enabled="false" click="replayByButton(-1);"/>  	
       	  	<mx:Button id="forwardOneButton" label=">" enabled="false" click="replayByButton(1);"/>
          	<mx:Button id="forwardAllButton" label=">|" enabled="false" click="replayByButton(2);"/> 
      	  </mx:HBox>
	       <mx:Label text="Chat"/>
		   <mx:TextInput id="chatMessage" width="300"/>     	  	
      	</mx:Panel>
      </mx:HBox>
      </mx:VBox>
        <mx:Panel id="sidePanel" title="Side Panel" width="180" height="635">
          <mx:Label text="Watchers" fontWeight="bold"/>
	      <mx:DataGrid id="watcherListGrid" width="160" height="220">
	       <mx:columns>
	        <mx:DataGridColumn dataField="name" width="57"/>
	        <mx:DataGridColumn dataField="country" width="56"/>
	        <mx:DataGridColumn dataField="rating"/>
	       </mx:columns>
	      </mx:DataGrid>
	      <mx:Label text="Kifu" fontWeight="bold"/>
	      <mx:DataGrid id="kifuDataGrid" sortableColumns="false" width="160" height="287" change="replay();" selectable="false">
	       <mx:columns>
	        <mx:DataGridColumn headerText="No." dataField="num" width="35"/>
	        <mx:DataGridColumn dataField="move"/>
	       </mx:columns>
	      </mx:DataGrid>
	      <mx:HBox>
       	  	<mx:Button id="kifuCopyButton" label="Copy" click="board.copyKIFtoClipboard();" enabled="false"/>
       	  	<mx:Button id="kifuSaveButton" label="Save" enabled="false"/>	      	
	      </mx:HBox>
      	</mx:Panel>
    </mx:HBox>
  </mx:ViewStack>

</mx:Application>

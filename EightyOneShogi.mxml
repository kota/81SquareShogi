<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" height="700" backgroundColor="0xcccc77" creationComplete="{initApp()}" xmlns:eightyOneSquare="*" frameRate="24">
	<mx:Style>
		Alert {
			fontSize: 13px;
			color: Black;
			backgroundColor: "0x99CCFF";
			borderColor: "0x99CCFF";
		}
	</mx:Style>
	<mx:Script>
    <![CDATA[
    import flash.display.*;
	import flash.events.Event;
	import flash.events.MouseEvent;
	import flash.events.TimerEvent;
	import flash.filters.ColorMatrixFilter;
	import flash.geom.Point;
	import flash.media.SoundTransform;
	import flash.net.FileReference;
	import flash.net.SharedObject;
	import flash.net.URLLoader;
	import flash.net.URLVariables;
	import flash.ui.Mouse;
	import flash.utils.Timer;
	import mx.containers.Canvas;
	import mx.containers.utilityClasses.Flex;
    import mx.events.FlexEvent;
    import mx.events.CloseEvent;
    import flash.media.Sound;
    import mx.controls.*;
    import mx.managers.PopUpManager;
    import mx.core.IFlexDisplayObject;
	import com.web2memo.text.Jcode;
    import CsaShogiClient;
	import ApiClient;
	import InfoFetcher;
    import Board;
	import GameTimer;
    import ChallengeForm;
    import GameRuleEvent;
    import mx.utils.StringUtil;
	import Language;
	
	public const VERSION:String = "ver.2010/12/17";
	private const DIRECTORY:String = "http://www.81squareuniverse.com/dojo/";
	[Bindable]
	private var _language:int = 0;
	private var _so:SharedObject = SharedObject.getLocal("81dojo");
    private var _client:CsaShogiClient;
	private var _api:ApiClient;
	private var _viewerAlone:Boolean;
    [Bindable]
    private var _game_name:String;
    private var _user_list:Array;
	private var _waiter_list:Array;
	private var _game_list:Array;
	private var _kifu_search_list:Array;
	private var _player_search_list:Array;
	private var _ranking_rate_list:Array;
	private var _ranking_wins_list:Array;
	private var _ranking_total_list:Array;
	private var _ranking_percentage_list:Array;
	private var _ranking_streak_list:Array;
    public var login_name:String;
	private var _player_infos:Array = new Array;
	private var _watch_game:Object;
	private var _challengeUser:Object;
    private var _monitoring:Boolean;
	private var _waiting:Boolean = false;
    private var _challenging:Boolean = false;
	private var _leaving:Boolean = false;
	private var _panelReplayColor:uint = 0xFF88CC;
	private const filterDefault:ColorMatrixFilter = new ColorMatrixFilter([1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0 ]);
	private const filterGrey:ColorMatrixFilter = new ColorMatrixFilter([0.5, 0.25, 0.25, 0,120, 0.25, 0.5, 0.25, 0,120, 0.25, 0.25, 0.5, 0,120, 0, 0, 0, 1, 0 ]);

    [Embed(source = "/sound/win.mp3")]
    private var Sound_win:Class;
    private var _sound_win:Sound = new Sound_win();
    [Embed(source = "/sound/lose.mp3")]
    private var Sound_lose:Class;
    private var _sound_lose:Sound = new Sound_lose();
    [Embed(source = "/sound/chat_board.mp3")]
    private var Sound_chat1:Class;
    private var _sound_chat1:Sound = new Sound_chat1();
    [Embed(source = "/sound/chat_board.mp3")]
    private var Sound_chat2:Class;
    private var _sound_chat2:Sound = new Sound_chat2();
    [Embed(source = "/sound/chat_private.mp3")]
    private var Sound_chat3:Class;
    private var _sound_chat3:Sound = new Sound_chat3();
    [Embed(source = "/sound/chat_lobby.mp3")]
    private var Sound_chat4:Class;
    private var _sound_chat4:Sound = new Sound_chat4();
    [Embed(source = "/sound/challenger.mp3")]
    private var Sound_challenger:Class;
    private var _sound_challenger:Sound = new Sound_challenger();
    private var _end_sound_play:Boolean = true;
    private var _chat_sound1_play:Boolean = true;
    private var _chat_sound2_play:Boolean = true;
	private var _chat_sound3_play:Boolean = true;
	private var _prev_piece_type:int;
	private var _pmAutoOpen:Boolean = false;
	private var _accept_arrows:Boolean = true;
	private var _arrow_color:uint = 0x00CC00;
	private var _ignore_list:Array = new Array();
	private var _chat_auto_scroll1:Boolean = true;
	private var _chat_auto_scroll2:Boolean = true;
	private var _userMessageScrollPos1:int;
	private var _userMessageScrollPos2:int;
	private var _initPositionStr:String;
    private var _keepAliveTimer:Timer;
	private var _challengerTicker:Timer;
	private var _leaveTimer:Timer;
	private var _leaveMinutes:int;
	private var _leaveMessage:String;
	private var _infoFetcher:InfoFetcher;
	private var _pmLog:Object = new Object();
	
    private var _optionWindow:OptionDialog;
	private var _newGameWindow:NewGameForm; 
	private var _playerInfoWindows:Object = new Object();
	private var _challengerAlertWindow:ChallengerAlertWindow;
	private var _greetMenuWindow:GreetMenuWindow;
	private var _gameResultWindow:GameResultWindow;
	private var _leavePCWindow:LeavePCForm;
	private var _kifuShareWindow:KifuShareWindow;
	private var _impasseStatusWindow:ImpasseStatusWindow;

    private function initApp():void
    {
      trace("application initialized..");
	  _infoFetcher = new InfoFetcher();
      board.setMoveCallback(_playerMove);
      board.setTimeoutCallback(_checkTimeout);
	  board.setAddMyArrowCallback(_addMyArrow);
	  _api = new ApiClient();
	  if (this.parameters["kid"]) {
		login_name = "guest";
		mainViewStack.selectedIndex = 2;
		_viewerAlone = true;
		_api.addEventListener(ApiClient.KIFU_DETAIL, _handleKifuDetail);
		_api.kifuDetail(this.parameters["kid"]);
		return;
	  }
      _client = new CsaShogiClient();
	  if (_so.data.savelogin) {
		  savelogin.selected = true;
		  if (_so.data.login) loginname.text = _so.data.login;
		  if (_so.data.pass) password.text = _so.data.pass;
		  if (_so.data.language) languageCombo.selectedIndex = _so.data.language;
	  }
	  _language = languageCombo.selectedIndex;
      _client.addEventListener(CsaShogiClient.CONNECTED,_handleConnected);
      _client.addEventListener(CsaShogiClient.LOGIN,_handleLoggedIn);
      _client.addEventListener(CsaShogiClient.LOGIN_FAILED, _handleLoginFailed);
	  _client.addEventListener(CsaShogiClient.LOGOUT_COMPLETED, _handleLogout);
      _client.addEventListener(CsaShogiClient.GAME_STARTED,_handleGameStarted);
      _client.addEventListener(CsaShogiClient.GAME_END,_handleGameEnd);
      _client.addEventListener(CsaShogiClient.CHAT, _handleChat);
	  _client.addEventListener(CsaShogiClient.GAMECHAT, _handleGameChat);
	  _client.addEventListener(CsaShogiClient.PRIVATECHAT, _handlePrivateChat);
      _client.addEventListener(CsaShogiClient.MOVE,_handleMove);
      _client.addEventListener(CsaShogiClient.WHO,_handleWho);
      _client.addEventListener(CsaShogiClient.MONITOR,_handleMonitor);
      _client.addEventListener(CsaShogiClient.LIST, _handleList);
      _client.addEventListener(CsaShogiClient.GAME_SUMMARY, _handleGameSummary);
      _client.addEventListener(CsaShogiClient.REJECT, _handleReject);
      _client.addEventListener(CsaShogiClient.WATCHERS, _handleWatchers);
	  _api.addEventListener(ApiClient.KIFU_SEARCH, _handleKifuSearch);
	  _api.addEventListener(ApiClient.KIFU_DETAIL, _handleKifuDetail);
	  _api.addEventListener(ApiClient.PLAYER_SEARCH, _handlePlayerSearch);
	  _api.addEventListener(ApiClient.RANKING_SEARCH, _handleRankingSearch);
	  _api.addEventListener(ApiClient.NOT_FOUND, _handleSearchNotFound);
	  boardBox.addEventListener(MouseEvent.ROLL_OUT, _rollOut);
	  boardBox.addEventListener(MouseEvent.ROLL_OVER, _rollOver);
      chatMessage1.addEventListener(FlexEvent.ENTER,_handleSendChat1);
      chatMessage2.addEventListener(FlexEvent.ENTER,_handleSendChat2);
      loginname.addEventListener(FlexEvent.ENTER,_handleLogin);
      password.addEventListener(FlexEvent.ENTER, _handleLogin);
	  loginButton.addEventListener(MouseEvent.CLICK, _handleLogin);
	  playerSearchNameText.addEventListener(FlexEvent.ENTER, _handlePlayerSearchEnter);
	  board.name_labels[0].addEventListener(MouseEvent.DOUBLE_CLICK, _gamePlayerInfo);
	  board.name_labels[1].addEventListener(MouseEvent.DOUBLE_CLICK, _gamePlayerInfo);
	  _challengerTicker = new Timer(1000);
	  _challengerTicker.addEventListener(TimerEvent.TIMER, _challengerTickHandler);
      _user_list = new Array();
      userListGrid.dataProvider = _user_list;
    }
	
	//=========================================================
	//                   EVENT HANDLERS for Client.as
	//=========================================================

	//----------------------------------------------------------------------------------------------------------------------------- CONNECTION
    private function _handleConnected(e:Event):void {
	  loginButton.enabled = false;
      loginMessage.text = "Logging in...";
      _client.login(loginname.text, password.text);
      login_name = loginname.text;
    } 

    private function _handleLoggedIn(e:ServerMessageEvent):void {
	  if (savelogin.selected) {
		  _so.data.savelogin = true;
		  _so.data.login = loginname.text;
		  _so.data.pass = password.text;
		  _so.data.language = languageCombo.selectedIndex;
		  _so.flush();
	  }
      loginMessage.text = "Logged in Successfully";
      mainViewStack.selectedIndex = 1;
	  _infoFetcher.addEventListener("loadComplete", _handleLoadOption);
	  _infoFetcher.loadSettings(login_name.toLowerCase());
      _keepAliveTimer = new Timer(30000);
      _keepAliveTimer.addEventListener(TimerEvent.TIMER,_handleKeepAlive);
	  _refresh();
	  if (_infoFetcher.initMessage != null) {
		_writeUserMessage(_infoFetcher.initMessage + "\n\n", 1, "#008800");
		if (VERSION != _infoFetcher.newestVer) _writeUserMessage("CAUTION: This version is old! The newest is " + _infoFetcher.newestVer + ". Please reload!\n", 1, "#FF0000");
	  } else {
		  _writeUserMessage("Couldn't load initial condition file. Please refresh.\n", 1, "#008800");
	  }
	  var rank:String = "a " + InfoFetcher.makeRankFromRating(e.message.split(":")[1]);
	  if (parseInt(e.message.split(":")[3]) + parseInt(e.message.split(":")[4]) < 10) rank = "a new player";
	  for (var i:int = 0; i < _infoFetcher.titleUser.length; i++) {
		  if (_infoFetcher.titleUser[i] == login_name.toLowerCase()) {
			  rank = "the " + _infoFetcher.titleName[i];
			  break;
		  }
	  }
	  if (!login_name.match(/^test\d$/)) _sendAutoChat("I've logged in. Hello. I'm " + rank + " from " + _infoFetcher.country_names[e.message.split(":")[2]] + ".");
	  _writeUserMessage("Current status: R" + e.message.split(":")[1] + ", " + e.message.split(":")[3] + " win - " + e.message.split(":")[4] + " loss, " + Math.max(0, e.message.split(":")[5]) + " streak (best: " + e.message.split(":")[6] + ")\n", 1, "#008800", true);
	  if (parseInt(e.message.split(":")[2]) <= 4) _writeUserMessage("Please register your country\n", 1, "#FF0000");
    }

    private function _handleLoginFailed(e:ServerMessageEvent):void{
      loginMessage.text = "";
      errorMessage.text = e.message;
	  loginButton.enabled = true;
    }

		private function _handleLogout(e:ServerMessageEvent):void {
		_keepAliveTimer.stop();
		loginMessage.text = "logged out successfully";
		titleBanner.source = DIRECTORY + "images/81Dojo_bye.jpg";
		mainViewStack.selectedIndex = 0;
//		loginButton.enabled = true;
	}

	//----------------------------------------------------------------------------------------------------------------------------- INFO

    private function _handleWho(e:ServerMessageEvent):void{                               //<<<<<< Handle WHO response
      var users:Array = e.message.split("\n");
      var user_list:Array = new Array();
	  var waiter_list:Array = new Array();
      for each(var user_data:String in users){
        if(user_data.match("##[WHO] +OK") != null){
          break;
        }
        trace("user_data:" + user_data);
        var match:Array = user_data.match(/\#\#\[WHO\] (.*) x1 (.*)/);
        if(match != null){
          var user:Object = {
			  'name':match[1],
			  'status':StringUtil.trim(match[2].split(" ")[0]),
			  'status2':"",
			  'opponent':"",
			  'game_name':match[2].split(" ")[1],
			  'turn':match[2].split(" ")[2],
			  'rating':parseInt(match[2].split(" ")[3]),
			  'country_code':parseInt(match[2].split(" ")[4]),
			  'titleName':"",
			  'monitor_game':match[2].split(" ")[6],
			  'moves':parseInt(match[2].split(" ")[7]),
			  'wins':parseInt(match[2].split(" ")[8]),
			  'losses':parseInt(match[2].split(" ")[9]), 
			  'streak':parseInt(match[2].split(" ")[10]), 
			  'streak_best':parseInt(match[2].split(" ")[11])
			  }
		  user.country = _infoFetcher.country_names[user.country_code];
		  user.flagURL = DIRECTORY + "images/flags_ss/" + String(user.country_code + 1000).substring(1) + ".png";
		  user.opponent = match[2].split(" ")[5] == "*" ? "" : match[2].split(" ")[5];
		  if (user.monitor_game != "*") user.status2 = "M ";
          if(user.status == "game_waiting" || user.status == "game" || user.status == "post_game"){
            var game_info:Array = user.game_name.match(/^([0-9a-z]+?)_(.*)-([0-9]*)-([0-9]*)/);
            var total:int = parseInt(game_info[3]) / 60;
			var hc:String;
			if (game_info[1] == "r") {
				hc = "R";
			} else if (game_info[1].match(/^hc/)) {
				hc = "HC";
			} else {
				hc = "NR";
			}
            user.rule = hc + ": " + total + "-" + game_info[4];
            if(user.status == "game_waiting"){
              user.status2 += "W";
            } else if (user.status == "post_game") {
				user.status2 = "P " + (user.turn == "+" ? "▲" : "△");
			} else {
              user.status2 = "G " + (user.turn == "+" ? "▲" : "△"); // + user.moves;
            }
          }
		  for each (var cheat:String in _infoFetcher.cheaters) {
			  if (user.name.toLowerCase() == cheat && user.name != login_name ) {
				  user.titleName = "!!!";
				  break;
			  }
		  }
          user_list.push(user);
        }
      }
	  for (var j:int = 0; j < _infoFetcher.titleUser.length; j++) {
		  for (var i:int = 0; i < user_list.length; i++) {
			  if (user_list[i].name.toLowerCase() == _infoFetcher.titleUser[j]) {
				  user_list[i].titleName = _infoFetcher.titleName[j];
				  if (_infoFetcher.titleRate[j] != "*") {
					  user_list[i].rating = _infoFetcher.titleRate[j];
				  }
				  break;
			  }
		  }
	  }
	  for (i = 0; i < user_list.length; i++) {
		  if (user_list[i].wins + user_list[i].losses >= 10 || user_list[i].titleName != "") {
			  user_list[i].rank = InfoFetcher.makeRankFromRating(user_list[i].rating);
			  user_list[i].rankColor = InfoFetcher.makeColorFromRating(user_list[i].rating);
		  } else {
			  user_list[i].rank = "-";
			  user_list[i].rankColor = 0xCCCCCC;
		  }
		  if (user_list[i].status2.match(/W/)) {
			  user = {
				  'name':user_list[i].name,
				  'turn':user_list[i].turn,
				  'rating':user_list[i].rating,
				  'game_name': user_list[i].game_name,
				  'country': user_list[i].country,
				  'country3':_infoFetcher.country_names3[user_list[i].country_code],
				  'flagURL': DIRECTORY + "images/flags_s/" + String(user_list[i].country_code + 1000).substring(1) + ".gif",
				  'rankColor': user_list[i].rankColor
				  }
		  	  game_info = user.game_name.match(/^([0-9a-z]+?)_(.*)-([0-9]*)-([0-9]*)/);
			  total = parseInt(game_info[3]) / 60;
			  if (game_info[1] == "r") {
				  user.rated = "R"
			  } else {
				  user.rated = "NR"
			  }
			  user.handicap = InfoFetcher.gameTypeShort(game_info[1]);
			  user.time = total + "-" + game_info[4] ;
			  waiter_list.push(user);
			  if (user.name == login_name && game_info[2] != login_name) {
				  _challenging = false;
				  _client.stopWaiting();
				  if (_waiting) _client.waitAgain();
			  }
		  }
	  }
      user_list.sortOn("rating", Array.NUMERIC | Array.DESCENDING);
	  for (i = 0; i < user_list.length; i++) {
		  if (user_list[i].wins + user_list[i].losses < 10 && user_list[i].rating < InfoFetcher.rank_thresholds[1]) user_list[i].rating = "*" + String(user_list[i].rating);
	  }
	  _user_list = user_list;
      userListGrid.dataProvider = _user_list;
      for (i = 0; i < user_list.length; i++) {
        if (_user_list[i].name == login_name) {
          userListGrid.selectedIndex = i;
		  userListGrid.scrollToIndex(i);
          break;
        }
      }
	  userListPanel.title = Language.ac.getItemAt(_language).lobby + " (" + _user_list.length + " players)";
	  waiter_list.sortOn("rating", Array.NUMERIC | Array.DESCENDING);
	  _waiter_list = waiter_list;
	  waiterListGrid.dataProvider = _waiter_list;
	  if (_challengerAlertWindow) _challengerAlertWindow.user = _findPlayerFromList(_challengerAlertWindow.challenger_name);
    }

    private function _handleList(e:ServerMessageEvent):void{                                 //<<<<<< Handle LIST response
	  var game_list:Array = new Array();
	  var lines:Array = e.message.split("\n");
        for each(var line:String in lines) {
		  if (line.match(/^##\[LIST\] \+OK$/)) break;
          var tokens:Array = line.split(" ");
          var game:Object = {
			  'id':tokens[1], //line.substr(9),
			  'blackName':tokens[1].split("+")[2],
			  'whiteName':tokens[1].split("+")[3],
			  'blackRating':parseInt(tokens[3]),
			  'whiteRating':parseInt(tokens[4]),
			  'blackCountryCode':parseInt(tokens[5]),
			  'whiteCountryCode':parseInt(tokens[6]),
			  'watchers':parseInt(tokens[10]),
			  'watcher_names':'',
			  'blackTitle':"",
			  'whiteTitle':"",
			  'blackColor': tokens[8] == "true" ? 0x000000 : 0x999999,
			  'whiteColor': tokens[9] == "true" ? 0x000000 : 0x999999,
			  'blackDecoration': undefined,
			  'whiteDecoration': undefined,
			  'blackFlagFilter': tokens[8] == "true" ? filterDefault : filterGrey,
			  'whiteFlagFilter': tokens[9] == "true" ? filterDefault : filterGrey
			  }
		  if (tokens[7] == "created") {
			  continue;
		  } else if (tokens[7] == "game") {
			  game.status = parseInt(tokens[2]);
		  } else {
			  game.status = "End";
			  if (tokens[7] == "win") {
				  game.blackDecoration = "underline";
			  } else if (tokens[7] == "lose") {
				  game.whiteDecoration = "underline";
			  }
		  }
		  if (tokens[11]) {
			  game.opening = InfoFetcher.openingNameJp(tokens[11]);
			  game.opening_en = InfoFetcher.openingNameEn(tokens[11]);
		  }
		  var user:Object;
		  if ((user = _findPlayerFromList(game.blackName))) {
			  game.blackWins = user.wins;
			  game.blackLosses = user.losses;
			  game.blackStreakBest = user.streak_best;
		  }
		  if ((user = _findPlayerFromList(game.whiteName))) {
			  game.whiteWins = user.wins;
			  game.whiteLosses = user.losses;
			  game.whiteStreakBest = user.streak_best;
		  }
		  game.blackCountry = _infoFetcher.country_names[game.blackCountryCode];
		  game.blackFlagURL = DIRECTORY + "images/flags_s/" + String(game.blackCountryCode + 1000).substring(1) + ".gif";
		  game.whiteCountry = _infoFetcher.country_names[game.whiteCountryCode];
		  game.whiteFlagURL = DIRECTORY + "images/flags_s/" + String(game.whiteCountryCode + 1000).substring(1) + ".gif";
		  for (var i:int = 0; i < _infoFetcher.titleName.length; i++) {
				if (game.blackName.toLowerCase() == _infoFetcher.titleUser[i]) {
					game.blackTitle = _infoFetcher.titleName[i];
					if (_infoFetcher.titleRate[i] != "*") game.blackRating = _infoFetcher.titleRate[i];
				}
				if (game.whiteName.toLowerCase() == _infoFetcher.titleUser[i]) {
					game.whiteTitle = _infoFetcher.titleName[i];
					if (_infoFetcher.titleRate[i] != "*") game.whiteRating = _infoFetcher.titleRate[i];
				}
		  }
		  if (game.watchers > 0) {
			  i = 0;
			  for each (user in _user_list) {
				  if (game.id == user.monitor_game) {
					  game.watcher_names += (user.name + " (" + _infoFetcher.country_names3[user.country_code] + ")\n");
					  i += 1;
					  if (i >= game.watchers) break;
				  }
			  }
		  }
		  game.maxRating = Math.max(game.blackRating, game.whiteRating);
		  if (game.blackColor == 0x999999 || game.whiteColor == 0x999999) game.maxRating -= 3000;
		  game.blackRank = InfoFetcher.makeRankFromRating(game.blackRating);
		  game.whiteRank = InfoFetcher.makeRankFromRating(game.whiteRating);
		  game.blackRankColor = InfoFetcher.makeColorFromRating(game.blackRating);
		  game.whiteRankColor = InfoFetcher.makeColorFromRating(game.whiteRating);
		  var game_info:Array = game.id.split("+")[1].match(/^([0-9a-z]+)_(.*)-([0-9]*)-([0-9]*)/);
		  var total:int = parseInt(game_info[3]) / 60;
		  var hc:String;
		  if (game_info[1] == "r") {
			hc = "R";
//			game.hcTip = "";
		  } else if (game_info[1].match(/^hc/)) {
			hc = "HC";
			game.opening = InfoFetcher.gameTypeJp(game_info[1]);
			game.opening_en = InfoFetcher.gameTypeShort(game_info[1]);
//			game.hcTip = InfoFetcher.gameTypeShort(game_info[1]);
		  } else {
			hc = "NR";
//			game.hcTip = "";
		  }
		  game.rule = hc + ": " + ((total < 10) ? " " : "") + total + "-" + game_info[4];
		  game_list.push(game);
        }
		game_list.sortOn("maxRating", Array.NUMERIC | Array.DESCENDING);
		for (i = 0; i < game_list.length; i++) game_list[i].gameNo = i + 1;
		_game_list = game_list;
		gameListGrid.dataProvider = _game_list;
    }
	
  private function _handleReject(e:ServerMessageEvent):void {
	if (_challenging) {
		_writeUserMessage("Rejected by the opponent.\n", 1, "#008800");
		_challenging = false;
	}
	if (_waiting) {
		_client.waitAgain();
		stopButton.enabled = true;
	}
  }

    private function _handleWatchers(e:ServerMessageEvent):void{
      var watchers:Array = e.message.split("\n");
      var watcher_list:Array = new Array();
      for each(var watcher_data:String in watchers){
        if(watcher_data.match(/^##\[WATCHERS\] \+OK$/)){
          break;
        }
        var watcher:Object = new Object();
        var match:Array = watcher_data.match(/^##\[WATCHERS\] (.*) (\d+) (\d+)$/);
        if(match){
          watcher.name = match[1];
		  watcher.rate = parseInt(match[2]);
		  watcher.country3 = _infoFetcher.country_names3[parseInt(match[3])];
		  watcher.country = _infoFetcher.country_names[parseInt(match[3])];
          watcher_list.unshift(watcher);
        }
      }
      watcherListGrid.dataProvider = watcher_list;
	  watcherListTitle.text = Language.ac.getItemAt(_language).watchers + " (" + watcher_list.length +")";
    }

    private function _handleGameStarted(e:ServerMessageEvent):void {
	  _waiting = false;
	  _challenging = false;
	  if(_game_name && _monitoring){
        _client.monitorOff(_game_name);
        _monitoring = false;
		board.closeGame();
      } else if (board.viewing) {
		  board.closeGame();
		  chatMessage2.enabled = true;
		  board.viewing = false;
	  }
	  board.post_game = false;
	  board.isStudyHost = false;
	  for (var j:int = 0; j < 2 ; j++) {
		_player_infos[j] = _findPlayerFromList(_client.playerNames[j]);
	  }
      var match:Array = e.message.match(/^START:(.*)\+(.*)-([0-9]*)-([0-9]*)/);
      _game_name = e.message.split(":")[1];
	  if (_game_name.split("+")[1].match(/^r_/)) {
		  board.gameType = "r";
	  } else if (_game_name.split("+")[1].match(/^nr_/)) {
		  board.gameType = "nr";
	  } else if (_game_name.split("+")[1].match(/^hc/)) {
		  board.gameType = "hc";
	  }
	  if (board.gameType == "hc" || String(_player_infos[0].rating).match(/^\*/)) {
		  board.superior = Kyokumen.GOTE;
	  } else if (String(_player_infos[1].rating).match(/^\*/)) {
		  board.superior = Kyokumen.SENTE;
	  } else if (_player_infos[0].rating > _player_infos[1].rating) {
		  board.superior = Kyokumen.SENTE;
	  } else {
		  board.superior = Kyokumen.GOTE;
	  }
      board.startGame(_initPositionStr, _client.myTurn, _player_infos,match[3], match[4]);
	  _client.watchers(_game_name);
      userMessage2.htmlText = "";
	  _writeUserMessage(_infoFetcher.gameMessage + "\n\n", 2, "#008800");
      if(_client.myTurn == Kyokumen.SENTE){
        _writeUserMessage("You are Black " + (board.gameType == "hc" ? "(Handicap taker).\n" : "(Sente).\n"), 2, "#008800");
      } else {
        _writeUserMessage("You are White " + (board.gameType == "hc" ? "(Handicap giver).\n" : "(Gote).\n"), 2, "#008800");
      }
	  startButton.enabled = false;
      stopButton.enabled = false;
      closeButton.enabled = false;
      resignButton.enabled = true;
	  reverseButton.enabled = false;
	  greetButton.visible = true;
      rewindAllButton.enabled = false;
      rewindOneButton.enabled = false;
      forwardOneButton.enabled = false;
      forwardAllButton.enabled = false;
      kifuDataGrid.selectable = false;
	  logoutButton.enabled = false;
      kifuDataGrid.dataProvider = board.kifu_list;
      mainViewStack.selectedIndex = 2;
	  radioKifuListen.selected = true;
	  radioKifuListen.enabled = false;
	  radioKifuReplay.enabled = false;
	  board.onListen = true;
	  sidePanel.setStyle('borderColor', undefined);
	  if (board.piece_type == 4) _sendAutoChat("Pieces set to Blind, Middle.");
	  else if (board.piece_type == 5) _sendAutoChat("Pieces set to Blind, Hard.");
	  else if (board.piece_type == 6) _sendAutoChat("Pieces set to Blind, Extreme.");
    }

    private function _handleGameEnd(e:ServerMessageEvent):void {
      var kifuMove:Object = new Object();
	  board.post_game = true;
      kifuMove.num = board.kifu_list.length;
      if(e.message.indexOf("TIME_UP") >= 0){
        board.timeout();
        //_writeUserMessage("Time up.\n",2);
		if (board.position.turn == board.my_turn) _sendAutoChat("Time out.");
        kifuMove.move = (board.position.turn == Kyokumen.SENTE ? "▲" : "△") + "Time up";
        kifuMove.moveKIF = "切れ負け";
        board.kifu_list.push(kifuMove);
	  } else if (e.message.indexOf("DISCONNECT") >= 0) {
        _writeUserMessage("Opponent disconnected.\n", 2, "#DD0088");
      } else if(e.message.indexOf("ILLEGAL_MOVE") >= 0){
        _writeUserMessage("Illegal Move.\n", 2, "#DD0088");
          kifuMove.move = "Illegal Move";
          kifuMove.moveKIF = "相手の反則にて勝ち";
          board.kifu_list.push(kifuMove);
      } else if (e.message.indexOf("RESIGN") >= 0) {
        _writeUserMessage((board.position.turn == board.my_turn ? "You" : "Opponent") + " resigned.\n", 2, "#DD0088");
      } else if (e.message.indexOf("OUTE_SENNICHITE") >= 0) {
        _writeUserMessage("Illegal Perpetual Check.\n", 2, "#DD0088");
		kifuMove.move = "Perpetual Check";
		kifuMove.moveKIF = "王手千日手";
		board.kifu_list.push(kifuMove);
      } else if (e.message.indexOf("SENNICHITE") >= 0) {
        _writeUserMessage("Sennichite. (Repetition)\n", 2, "#DD0088");
		kifuMove.move = "Repetition Draw";
		kifuMove.moveKIF = "千日手";
		board.kifu_list.push(kifuMove);
      }
	  radioKifuReplay.enabled = true;
	  radioKifuListen.enabled = true;
      if (e.message.indexOf("LOSE") >= 0) {
		_openGameResultWindow( -1);
		board.infoBoxes[1].setStyle('borderThickness', 2);
		board.infoBoxes[1].setStyle('borderColor', 0xFF0000);
        _writeUserMessage("### You Lose ###\n", 2, "#DD0088", true);
        if (_end_sound_play) _sound_lose.play();
      } else if (e.message.indexOf("WIN") >= 0) {
		board.isStudyHost = true;
		_openGameResultWindow(1);
		board.infoBoxes[0].setStyle('borderThickness', 2);
		board.infoBoxes[0].setStyle('borderColor', 0xFF0000);
        _writeUserMessage("### You Win ###\n", 2, "#DD0088", true);
        if (_end_sound_play) _sound_win.play();
      } else if (e.message.indexOf("DRAW") >= 0) {
		if (board.my_turn == Kyokumen.GOTE) board.isStudyHost = true;
		_openGameResultWindow(0);
        _writeUserMessage("### Draw ###\n", 2, "#DD0088", true);
        if (_end_sound_play) _sound_win.play();
      }
	  if (board.gameType == "hc") {
		  if (board.my_turn == Kyokumen.GOTE) {
			  board.isStudyHost = true;
		  } else {
			  board.isStudyHost = false;
		  }
	  }
	  if (board.isStudyHost) {
		_writeUserMessage("You are the host of Study Mode. Your board is shared.\n", 2, "#008800", true);
		board.onListen = false;
		radioKifuReplay.selected = true;
		radioKifuListen.enabled = false;
		sidePanel.setStyle('borderColor', _panelReplayColor);
	  }
      closeButton.enabled = true;
      resignButton.enabled = false;
      rewindAllButton.enabled = true;
      rewindOneButton.enabled = true;
      forwardOneButton.enabled = true;
      forwardAllButton.enabled = true;
	  startButton.enabled = true;
      kifuDataGrid.dataProvider = board.kifu_list;
      kifuDataGrid.scrollToIndex(board.kifu_list.length+1);
      kifuDataGrid.selectable = true;
      kifuDataGrid.selectedIndex = board.kifu_list.length;
	  if (board.isStudyHost) _sendStudy();
      board.endGame();
    }

	private function _openGameResultWindow(v:int):void {
	  _gameResultWindow = GameResultWindow(PopUpManager.createPopUp(board, GameResultWindow, false));
      PopUpManager.centerPopUp(_gameResultWindow);
	  _gameResultWindow.initWindow(board.playerInfos[board.my_turn], board.playerInfos[1 - board.my_turn], _game_name, v);
	}

    private function _handleMove(e:ServerMessageEvent):void {
	  board.clearArrows(Board.ARROWS_PUBLIC);
	  if (e.message.match(/%TORYO/)) {
		  var kifuMove:Object = new Object;
//		        _writeUserMessage((board.position.turn == board.my_turn ? "You" : "Opponent") + " resigned.\n", 2, "#DD0088");
			kifuMove.num = board.kifu_list.length;
			kifuMove.move = (board.position.turn == Kyokumen.SENTE ? "▲" : "△") + "Resign (" + e.message.split(",T")[1] + ")";
			kifuMove.moveKIF = "投了   ( " + int(e.message.split(",T")[1]/60) + ":" + e.message.split(",T")[1] % 60 + "/)";
			board.kifu_list.push(kifuMove);
	  } else {
		board.makeMove(e.message, true, true);
	  }
	  kifuDataGrid.dataProvider = board.kifu_list;
      kifuDataGrid.scrollToIndex(board.kifu_list.length+1);
    }
  
  private function _handleGameSummary(e:ServerMessageEvent):void {
	  _refresh();
	  _initPositionStr = "";
	  for each(var line:String in e.message.split("\n")) {
		  if (line.match(/^P[0-9\+\-]/)) _initPositionStr += line + "\n";
	  }
    if (_challenging) {
      _client.agree();
    } else {
	  var challengerName:String = login_name == e.message.split("\n")[0] ? e.message.split("\n")[1] : e.message.split("\n")[0];
      _sound_challenger.play();
	  _challengerTicker.reset();
	  _challengerTicker.start();
      _challengerAlertWindow = ChallengerAlertWindow(PopUpManager.createPopUp(this, ChallengerAlertWindow, true));
      PopUpManager.centerPopUp(_challengerAlertWindow);
      with (_challengerAlertWindow) {
		language = _language;
        title = "Here comes a new challenger!!";
		challenger_name = challengerName;
		user = _findPlayerFromList(challengerName);
		remainTime = 20;
        acceptButton.addEventListener("click", _handleChallengerAcceptButton);
		rejectButton.addEventListener("click", _handleChallengerRejectButton);
      }
    }
  }
  
//--------------------------------------------------------------------------------------------------------------------------------- CHAT 
    private function _handleChat(e:ServerMessageEvent):void{
		if (e.message.match(/\[auto\-chat\]/)) {
			_writeUserMessage(e.message.substr(8), 1, "#888888");
		} else if (e.message.substr(8).match(/^\[(.+?)\]\s.*$/)[1] == login_name) {
			_writeUserMessage(e.message.substr(8), 1, "#0033DD");
		} else {
			_writeUserMessage(e.message.substr(8), 1, "#000000");
		}
		if (mainViewStack.selectedIndex == 1 && _chat_sound1_play) {
			if (e.message.match(/\[auto\-chat\]/)) {
				_sound_chat4.play();
			} else {
				_sound_chat1.play();
			}
		}
	}
	
    private function _handleGameChat(e:ServerMessageEvent):void {
		if (!_game_name) return;
		var match:Array;
		if ((match = e.message.match(/\[\#\#STUDY\](\d+)\/(.+)$/))) {
			if (!board.studyOn) board.studyOn = true;
			board.clearArrows(Board.ARROWS_PUBLIC);
			if (board.isStudyHost) return;
			board.studyOrigin = match[1];
			if (match[2] == "*") {
				if (board.study_list.length > 0) board.study_list = new Array();
				if (!(board.post_game && board.onListen)) return;
				if (board.kifu_list_self.length > 0) {
					board.kifu_list_self = new Array();
					kifuDataGrid.dataProvider = board.kifu_list;
				}
				kifuDataGrid.selectedIndex = match[1];
				board.replayMoves(match[1], true);
				kifuDataGrid.scrollToIndex(kifuDataGrid.selectedIndex);
			} else {
				board.study_list = match[2].split("/");
				if (!(board.post_game && board.onListen)) return;
				if (board.kifu_list_self.length > 0) board.kifu_list_self = new Array();
				for (var i:int = 0; i <= match[1]; i++) board.kifu_list_self.push(board.kifu_list[i]);
				board.replayMoves(match[1], true);
				for (i = 0; i < board.study_list.length; i++) board.makeMove(board.study_list[i] + ",T0", false, false);
				kifuDataGrid.dataProvider = board.kifu_list_self;
				kifuDataGrid.selectedIndex = board.kifu_list_self.length - 1;
				kifuDataGrid.scrollToIndex(kifuDataGrid.selectedIndex);
			}
		} else if ((match = e.message.substr(12).match(/^\[(.+)\]\s\[##ARROW\]CLEAR$/))) {
			if (match[1] != login_name) board.clearArrows(Board.ARROWS_PUBLIC, match[1]);
		} else if ((match = e.message.substr(12).match(/^\[(.+)\]\s\[##ARROW\](.+),(.+),(.+),(.+),(.+),(.+)$/))) {
			if (!_accept_arrows && !match[1] == login_name) return;
			if (board.isPlayer && !board.post_game) return;
			if (board.post_game && !board.studyOn) return;
			if (board.isStudyHost || board.onListen) {
				board.addArrow(parseInt(match[2]), new Point(Number(match[3]), Number(match[4])), new Point(Number(match[5]), Number(match[6])), uint(match[7]), match[1],Board.ARROWS_PUBLIC, true);
			} else {
				board.addArrow(parseInt(match[2]), new Point(Number(match[3]), Number(match[4])), new Point(Number(match[5]), Number(match[6])), uint(match[7]), match[1],Board.ARROWS_PUBLIC);
			}
		} else if ((match = e.message.substr(12).match(/^\[(.+)\]\s\[##M_(IN|OUT)\](\d+),(\d+)$/))) {
			if (match[1] != login_name) {
				if (match[1] == board.name_labels[0].text) {
					if (match[2] == "OUT") {
						board.name_labels[0].setStyle("color", 0x555555);
					} else {
						board.name_labels[0].setStyle("color", 0x000000);
					}
				} else if (match[1] == board.name_labels[1].text) {
					if (match[2] == "OUT") {
						board.name_labels[1].setStyle("color", 0x555555);
					} else {
						board.name_labels[1].setStyle("color", 0x000000);
					}
				}
			}
			trace(match[1] + "-" + match[2] + "-" + match[3] + "-" + match[4]);
		} else if ((match = e.message.substr(12).match(/^\[(.+)\]\s\[##LEAVE\]$/))) {
			_writeUserMessage(match[1] + " has left.\n", 2, "#008800");
		} else if ((match = e.message.substr(12).match(/^\[.+\]\s\[##GIVEHOST\](.+)$/))) {
			if (match[1] == login_name) {
				board.isStudyHost = true;
				_writeUserMessage("You are the host of Study Mode. Your board is shared.\n", 2, "#008800", true);
				board.onListen = false;
				radioKifuReplay.selected = true;
				radioKifuListen.enabled = false;
				sidePanel.setStyle('borderColor', _panelReplayColor);
				_sendStudy();
			}
		} else {
			if (e.message.substr(12).match(/^\[(.+?)\]\s.*$/)[1] == board.playerInfos[0].name) {
				_writeUserMessage(e.message.substr(12), 2, "#000000");
			} else if (e.message.substr(12).match(/^\[(.+?)\]\s.*$/)[1] == board.playerInfos[1].name) {
				_writeUserMessage(e.message.substr(12), 2, "#666666");
			} else if (e.message.substr(12).match(/^\[(.+?)\]\s.*$/)[1] == login_name) {
				_writeUserMessage(e.message.substr(12), 2, "#0033DD");
			} else {
				_writeUserMessage(e.message.substr(12), 2, "#660000");
			}
			if (_chat_sound2_play) _sound_chat1.play();
		}
    }
	
	private function _handlePrivateChat(e:ServerMessageEvent):void {
		var match:Array;
		match = e.message.substr(15).match(/^\[(.+?)\]\s(.+)$/);
		var name:String = match[1];
		var message:String = match[2];
		if (_pmAutoOpen) _openPlayerInfo(_findPlayerFromList(name));
		if ((match = message.match(/(https?\:\/\/[^\"^\s]+)/))) message = message.replace(/https?\:\/\/[^\"^\s]+/, "<a href=\"" + match[1] + "\" target=\"_blank\">" + match[1] + "</a>");
		if (!_pmLog[name]) _pmLog[name] = "";
		_pmLog[name] += "<font color='#FF0000'>" + message + "</font>" + "\n";
		if (_playerInfoWindows[name]) {
			_playerInfoWindows[name].pmText = _pmLog[name];
			_playerInfoWindows[name].pmCheckBox.selected = true;
			_playerInfoWindows[name].togglePM();
			_playerInfoWindows[name].pmTextArea.setStyle('backgroundColor', 0xFFFFBB);
			_playerInfoWindows[name].callLater(_playerInfoWindows[name].scrollDown);
		} else if (mainViewStack.selectedIndex == 1 || mainViewStack.selectedIndex == 3) {
			_writeUserMessage("PM: " + e.message.substr(15), 1, "#FF0000");
		} else if (mainViewStack.selectedIndex == 2) {
			_writeUserMessage("PM: " + e.message.substr(15), 2, "#FF0000");
		}
		if (_chat_sound3_play) _sound_chat3.play();
		if (_leaving) {
			if (_findPlayerFromList(name)) {
				var hour:int = (_leaveMinutes - _leaveTimer.currentCount) / 60;
				var minute:int = (_leaveMinutes - _leaveTimer.currentCount) % 60;
				_sendPrivateChat(name, "(auto-reply) " + _leaveMessage + " (Will be back in " + hour + " hours " + minute + " minutes.)");
			}
		}
	}

    private function _format_message(message:String):String{
      message = message.substr(8);
      var match:Array = message.match(/(\[.+?\]) ([^ ]+?\+[^ ]+?\-[0-9]+?\-[0-9]+?\+[^ ]+?\+[^ ]+?\+[0-9]*) (.*)/);
      if(match != null){
        message = match[1] + " " + match[3] + "\n";
      }
      return message;
    }

    private function _handleMonitor(e:ServerMessageEvent):void {
      var kifuMove:Object = new Object();
	  var end_game:Boolean = false;
	  var winnerTurn:int = -1;
	  board.clearArrows(Board.ARROWS_PUBLIC);
	  if(_watch_game != null) board.monitor(e.message,_watch_game);
      if(e.message.indexOf("#TIME_UP") >= 0){
		end_game = true;
        board.timeout();
		winnerTurn = 1 - board.last_pos.turn;
        _writeUserMessage((winnerTurn == Kyokumen.SENTE ? "White: " : "Black: ") + "Time up.\n", 2, "#DD0088");
		kifuMove.num = board.kifu_list.length;
        kifuMove.move = (winnerTurn == Kyokumen.SENTE ? "△" : "▲") + "Time up";
        kifuMove.moveKIF = "切れ負け";
        board.kifu_list.push(kifuMove);
	  } else if (e.message.indexOf("#DISCONNECT") >= 0) {
		  end_game = true;
		  _writeUserMessage("Player disconnected.\n", 2, "#DD0088");
      } else if(e.message.indexOf("#ILLEGAL_MOVE") >= 0){
		end_game = true;
		winnerTurn = board.last_pos.turn;
        _writeUserMessage("Illegal Move.\n", 2, "#DD0088");
		kifuMove.num = board.kifu_list.length;
		kifuMove.move = "Illegal Move";
		kifuMove.moveKIF = "相手の反則にて勝ち";
		board.kifu_list.push(kifuMove);
      } else if (e.message.indexOf("#RESIGN") >= 0) {
		  end_game = true;
		  winnerTurn = 1 - board.last_pos.turn;
		  _writeUserMessage((winnerTurn == Kyokumen.SENTE ? "White" : "Black")  + " resigned.\n", 2, "#DD0088");
	  } else if (e.message.indexOf("#OUTE_SENNICHITE") >= 0) {
		  end_game = true;
          _writeUserMessage("Illegal Perpetual Check.\n", 2, "#DD0088");
		  kifuMove.num = board.kifu_list.length;
		  kifuMove.move = "Perpetual Check";
		  kifuMove.moveKIF = "王手千日手";
		  board.kifu_list.push(kifuMove);		  
      } else if (e.message.indexOf("#SENNICHITE") >= 0) {
		  end_game = true;
          _writeUserMessage("Sennichite. (Repetition)\n", 2, "#DD0088");
		  kifuMove.num = board.kifu_list.length;
		  kifuMove.move = "Repetition Draw";
		  kifuMove.moveKIF = "千日手";
		  board.kifu_list.push(kifuMove);
      }
	  if (board.onListen || !String(kifuDataGrid.selectedItem.num).match(/^\*/)) {
		  var i:int = kifuDataGrid.selectedIndex >= 0 ? kifuDataGrid.selectedIndex : 0;
		  kifuDataGrid.scrollToIndex(0);
		  kifuDataGrid.dataProvider = board.kifu_list;
		  kifuDataGrid.selectedIndex = board.onListen ? (board.kifu_list.length - 1) : i;
		  kifuDataGrid.callLater(_scrollDownKifu);
	  }
	  if (end_game) {
			board.post_game = true;
			radioKifuReplay.enabled = true;
			radioKifuListen.enabled = true;
			if (winnerTurn != -1) {
				board.infoBoxes[winnerTurn == board.my_turn ? 0 : 1].setStyle('borderThickness', 2);
				board.infoBoxes[winnerTurn == board.my_turn ? 0 : 1].setStyle('borderColor', 0xFF0000);
			}
			_writeUserMessage("### Game End ###\n", 2, "#DD0088", true);
			if (_end_sound_play) _sound_win.play();
			board.endGame();
	  } else {
		  var match:Array;
		  if ((match = e.message.match(/SINCE_LAST_MOVE:(\d+)/))) {
			board.since_last_move = parseInt(match[1]);
			board.timers[board.my_turn == board.last_pos.turn ? 0 : 1].accumulateTime(board.since_last_move);
		  }
	  }
    }

	//=========================================================
	//                   CONTROLS for VIEWSTACK INDEX = 0
	//=========================================================
    private function _connectAndLogin():void{
      trace("connecting.");
      loginMessage.text = "Connecting...";
      errorMessage.text = "";
      _client.connect();
    }
	
    private function _handleLogin(e:Event):void {
	  for each (var name:String in _infoFetcher.banned) {
		  if (loginname.text.toLowerCase() == name) return;
	  }
      _connectAndLogin();
    }
	
	private function _testLogin(i:int):void {
		loginname.text = "test" + i;
		password.text = "81dojo" + i;
		_connectAndLogin();
	}
	
	private function _localLogin():void {
		_client.setHostToLocal();
		_api.setHostToLocal();
		loginButton.setStyle('color', '0xFF0000');
		loginButton.setStyle('textRollOverColor', '0xFF0000');
	}
	
	//=========================================================
	//                   CONTROLS for VIEWSTACK INDEX = 1
	//=========================================================
    private function _refresh():void {
	  _keepAliveTimer.reset();
	  _keepAliveTimer.start();
      _client.who();
	  _client.list();
	  if (_game_name) _client.watchers(_game_name);
    }
	
    private function _newGameForm():void{
      _newGameWindow = NewGameForm(PopUpManager.createPopUp(this, NewGameForm, true));
      with (_newGameWindow) {
		_newGameWindow.x = mouseX;
		_newGameWindow.y = mouseY + 50;
		language = _language;
        title = "Create new game";
		if (_so.data.rule_base) {
			timeSetting.selectedValue = _so.data.rule_base;
		} else {
			timeSetting.selectedValue = 1;
		}
		toggleTimeSelection();
		if (_so.data.rule_total) nonrated_total.selectedIndex = _so.data.rule_total;
		if (_so.data.rule_byoyomi) nonrated_byoyomi.selectedIndex = _so.data.rule_byoyomi;
		if (_so.data.rule_handicap) nonrated_handicap.selectedIndex = _so.data.rule_handicap;
		addEventListener(GameRuleEvent.RULE_SELECTED,_handleRuleSelected);
      }
    }
  
    private function _stopWaiting():void {
	  _waiting = false;
      _client.stopWaiting();
      _refresh();
      stopButton.enabled = false;
    }

	private function _showOptions():void {
	  _prev_piece_type = board.piece_type;
      _optionWindow = OptionDialog(PopUpManager.createPopUp(this, OptionDialog, true));
      PopUpManager.centerPopUp(_optionWindow);
      with (_optionWindow) {
		language = _language;
        title = "Options";
		RadioGroup1.selectedValue = GameTimer.soundType;
        RadioGroup2.selectedValue = board.piece_type;
        pieceSoundCheckBox.selected = board.piece_sound_play;
        gameEndSoundCheckBox.selected = _end_sound_play;
        chatSound1CheckBox.selected = _chat_sound1_play;
        chatSound2CheckBox.selected = _chat_sound2_play;
		chatSound3CheckBox.selected = _chat_sound3_play;
		pmAutoOpenCheckBox.selected = _pmAutoOpen;
		acceptArrowsCheckBox.selected = _accept_arrows;
		arrowColorPicker.selectedColor = _arrow_color;
		ignoreList.dataProvider = _ignore_list;
        OkButton.addEventListener("click", _handleOption);
		removeIgnoreButton.addEventListener("click", _handleRemoveIgnore);
		if (login_name == "guest") saveSettingsButton.enabled = false;
		saveSettingsButton.addEventListener("click", _handleSaveSettings);
		if (_so.data.optionTab) optionTab.selectedIndex = _so.data.optionTab;
      }
	  _optionWindow.drawArrow();
    }

     private function _waitForGame(total:int = 1500, byoyomi:int = 30, handicap:String = "r"):void {
	  var nowDate:Date = new Date();
	  if (nowDate.valueOf() > _infoFetcher.serverMaintenanceTime) {
		  Alert.show("Server Maintenance Time.\nCannot open game.");
		  return;
	  }
      _client.waitForGame(total,byoyomi,handicap);
      _refresh();
      stopButton.enabled = true;
    }

	private function _logout():void {
		_client.logout();
	}

  private function _checkLobby():void {
	  mainViewStack.selectedIndex = 1;
	  backToGameButton.visible = true;
	  searchViewButton.enabled = false;
  }

  private function _backToGame():void {
	  mainViewStack.selectedIndex = 2;
	  backToGameButton.visible = false;
	  searchViewButton.enabled = true;
  }
	
  private function _change_auto_scroll1():void {
	  _chat_auto_scroll1 = autoScrollCheck1.selected;
  }
 
  private function _mute(v:Boolean):void {
	  var trans:SoundTransform = new SoundTransform;
	  if (v) {
		  trans.volume = 0;
	  } else {
		  trans.volume = 1;
	  }
	  SoundMixer.soundTransform = trans;
	  muteCheck1.selected = v;
	  muteCheck2.selected = v;
  }
	 private function _leavePC():void{
		_leavePCWindow = LeavePCForm(PopUpManager.createPopUp(this, LeavePCForm, true));
		_leavePCWindow.x = mouseX;
		_leavePCWindow.y = mouseY + 50;
		_leavePCWindow.language = _language;
		_leavePCWindow.title = Language.ac.getItemAt(_language).set_autoreply;
		if (_so.data.leave_hours) _leavePCWindow.hoursCombo.selectedIndex = _so.data.leave_hours;
		if (_so.data.leave_minutes) _leavePCWindow.minutesCombo.selectedIndex = _so.data.leave_minutes;
		if (_so.data.leave_message) _leavePCWindow.messageText.text = _so.data.leave_message;
		_leavePCWindow.messageText.addEventListener(FlexEvent.ENTER, _leaveStart);
		_leavePCWindow.leaveButton.addEventListener(MouseEvent.CLICK, _leaveStart);
		_leavePCWindow.cancelButton.addEventListener(MouseEvent.CLICK, _leaveEnd);
	}
	
	private function _leaveStart(e:Event):void {
		_so.data.leave_hours = _leavePCWindow.hoursCombo.selectedIndex;
		_so.data.leave_minutes = _leavePCWindow.minutesCombo.selectedIndex;
		_so.data.leave_message = _leavePCWindow.messageText.text;
		_leaving = true;
		_leaveMinutes = 60 * e.target.parent.parent.hoursCombo.selectedItem.data + e.target.parent.parent.minutesCombo.selectedItem.data;
		_leaveTimer = new Timer(60000, _leaveMinutes);
		_leaveTimer.start();
		_leaveMessage = e.target.parent.parent.messageText.text;
	}
	
	private function _leaveEnd(e:Event):void {
		_leaving = false;
		if (_leaveTimer) _leaveTimer.stop();
	}
  
	//------------------------------------------------------------------------------------------------------------------------ LIST SELECTED
    private function _userSelected():void {
      var user:Object = userListGrid.selectedItem;
	  for (var i:int = 0; i < _game_list.length; i++) {
		  if (_game_list[i].blackName == user.name || _game_list[i].whiteName == user.name) {
			  gameListGrid.selectedIndex = i;
			  gameListGrid.scrollToIndex(i);
			  break;
		  }
		  if (user.monitor_game == _game_list[i].id) {
			  gameListGrid.selectedIndex = i;
			  gameListGrid.scrollToIndex(i);
			  break;
		  }
		  gameListGrid.selectedIndex = -1;
	  }
	  if (_game_name) return;
	  for (i = 0; i < _waiter_list.length; i++) {
		  if (_waiter_list[i].name == user.name) {
			  waiterListGrid.selectedIndex = i;
			  waiterListGrid.scrollToIndex(i);
			  break;
		  }
		  waiterListGrid.selectedIndex = -1;
	  }
    }
	
    private function _waiterSelected():void {
      var user:Object = waiterListGrid.selectedItem;
	  for (var i:int = 0; i < _user_list.length; i++) {
		  if (_user_list[i].name == user.name) {
			  userListGrid.selectedIndex = i;
			  userListGrid.scrollToIndex(i);
			  break;
		  }
		  userListGrid.selectedIndex = -1;
	  }
	  gameListGrid.selectedIndex = -1;
    }
	
    private function _gameSelected():void {
	  _keepAliveTimer.reset();
	  _keepAliveTimer.start();
      var game:Object = gameListGrid.selectedItem;
	  for (var i:int = 0; i < _user_list.length; i++) {
		  if (_user_list[i].name == game.blackName || _user_list[i].name == game.whiteName) {
			  userListGrid.selectedIndex = i;
			  userListGrid.scrollToIndex(i);
			  break;
		  }
		  userListGrid.selectedIndex = -1;
	  }
	  waiterListGrid.selectedIndex = -1;
    }

	//------------------------------------------------------------------------------------------------------------------------ LIST SORT FUNCTIONS
	 private function _sortName(obj1:Object, obj2:Object):int {
		 if (obj1.name.toLowerCase() < obj2.name.toLowerCase()) {
			 return -1;
		 } else if (obj1.name.toLowerCase() > obj2.name.toLowerCase()) {
			 return 1;
		 } else {
			 return 0;
		 }
	 }

	 private function _sortCountry(obj1:Object, obj2:Object):int {
		 if (obj1.country < obj2.country) {
			 return -1;
		 } else if (obj1.country > obj2.country) {
			 return 1;
		 } else {
			 return 0;
		 }
	 }
	 
	 private function _sortRate(obj1:Object, obj2:Object):int {
		 if (Number(obj1.rate) < Number(obj2.rate)) {
			 return -1;
		 } else if (Number(obj1.rate) > Number(obj2.rate)) {
			 return 1;
		 } else {
			 return 0;
		 }
	 }

	private function _watchDialog():void {
		if (_game_name) return;
		Alert.show("Watch this game?", Language.ac.getItemAt(_language).watch, Alert.YES | Alert.NO, gameListGrid, _watch);
//		Alert.yesLabel = Language.ac.getItemAt(_language).black;
//        Alert.noLabel = Language.ac.getItemAt(_language).white;
//		Alert.buttonWidth = 120;
//        Alert.show(Language.ac.getItemAt(_language).view_as,Language.ac.getItemAt(_language).watch,Alert.YES|Alert.NO,this,_watch);
        //set properties back to default.
//        Alert.yesLabel = "Yes";
//        Alert.noLabel = "No";
//        Alert.buttonWidth = 60;
	}

    private function _watch(e:CloseEvent):void {
      _watch_game = gameListGrid.selectedItem;
      if (_watch_game != null) {
		 if (e.detail == Alert.YES) {
			board.my_turn = Kyokumen.SENTE;
		 } else {
			 return;
//			 board.my_turn = Kyokumen.GOTE;
		 }
		 _game_name = _watch_game.id;
		 if (_watch_game.rule.match(/^HC/)) {
			 board.superior = Kyokumen.GOTE;
		 } else if (_watch_game.blackRating > _watch_game.whiteRating) {
			 board.superior = Kyokumen.SENTE;
		 } else {
			 board.superior = Kyokumen.GOTE;
		 }
		_monitoring = true;
		board.post_game = false;
		board.isStudyHost = false;
		_client.monitorOn(_game_name);
		_client.watchers(_game_name);
		  logoutButton.enabled = false;
		  userMessage2.htmlText = "";
		  if (_watch_game.rule.match(/^R/)) {
			  _writeUserMessage("This game is Rated.\nPlayers CANNOT see watcher's chat until the game ends.\n", 2, "#008800", true);
		  } else {
			  _writeUserMessage("This game is Non-rated.\nPlayers CAN see watcher's chat even during game.\n", 2, "#008800", true);
		  }
		  _writeUserMessage(_infoFetcher.gameMessage + "\n\n", 2, "#008800");
		  mainViewStack.selectedIndex = 2;
		  closeButton.enabled = true;
		  resignButton.enabled = false;
		  reverseButton.enabled = true;
		  greetButton.visible = false;
		  rewindAllButton.enabled = true;
		  rewindOneButton.enabled = true;
		  forwardOneButton.enabled = true;
		  forwardAllButton.enabled = true;
		  kifuDataGrid.selectable = true;
		  kifuDataGrid.dataProvider = board.kifu_list;
		  radioKifuListen.selected = true;
		  radioKifuReplay.enabled = true;
		  radioKifuListen.enabled = true;
		  board.onListen = true;
		  sidePanel.setStyle('borderColor', undefined);
	  } else {
		  Alert.show("The game list has been refreshed.\nPlease select a game again.", Language.ac.getItemAt(_language).error, Alert.OK, gameListGrid);
	  }
    }

	private function _openPlayerInfo(user:Object):void {
	  if (!user) return;
	  if (_playerInfoWindows[user.name]) return;
	  _playerInfoWindows[user.name] = new PlayerInfoWindow();
	  _playerInfoWindows[user.name].x = Math.max(0, mouseX - 100);
	  _playerInfoWindows[user.name].y = Math.max(0, mouseY - 150);
	  PopUpManager.addPopUp(_playerInfoWindows[user.name], this, false);
	  _playerInfoWindows[user.name].pmText = _pmLog[user.name];
	  _playerInfoWindows[user.name].language = _language;
      _playerInfoWindows[user.name].title = "Player Info";
	  _playerInfoWindows[user.name].addEventListener("close_info", _handlePlayerInfoClose);
	  _playerInfoWindows[user.name].readUser(user);
	  if (_isPlayer()) {
		  _playerInfoWindows[user.name].invite.enabled = false;
		  _playerInfoWindows[user.name].directMessage.enabled = false;
	  } else {
		  _playerInfoWindows[user.name].directMessage.addEventListener(FlexEvent.ENTER, _handleSendPrivateChat(user.name));
		  _playerInfoWindows[user.name].directMessage.setFocus();
	  }
	  if (user.name == login_name) {
		  _playerInfoWindows[user.name].selfCommands.includeInLayout = true;
		  _playerInfoWindows[user.name].selfCommands.visible = true;
		  if (user.wins + user.losses < 10) {
			  _playerInfoWindows[user.name].setRateButton.addEventListener(MouseEvent.CLICK, _setRate(user.name));
			  _playerInfoWindows[user.name].setRateButton.enabled = true;
			  _playerInfoWindows[user.name].setRateCombo.dataProvider = InfoFetcher.rank_names.slice(8, 16);
			  _playerInfoWindows[user.name].setRateCombo.enabled = true;
		  }
	  } else {
		  _playerInfoWindows[user.name].othersCommands.includeInLayout = true;
		  _playerInfoWindows[user.name].othersCommands.visible = true;
		  if (user.status == "game_waiting"  && user.game_name.indexOf(user.name) >= 0) {
			  _playerInfoWindows[user.name].challenge.addEventListener(MouseEvent.CLICK, _handleChallenge(user.name));
			  _playerInfoWindows[user.name].challenge.enabled = true;
		  }
		  if (user.status != "game") {
			  _playerInfoWindows[user.name].invite.addEventListener(MouseEvent.CLICK, _handleInvite(user.name));
			  _playerInfoWindows[user.name].invite.enabled = true;
		  }
		  if (user.titleName != "admin") {
			  _playerInfoWindows[user.name].ignore.addEventListener(MouseEvent.CLICK, _handleIgnore(user.name));
			  _playerInfoWindows[user.name].ignore.enabled = true;
		  }
	  }
	  _playerInfoWindows[user.name].callLater(_playerInfoWindows[user.name].scrollDown);
	}
	
	private function _handlePlayerInfoClose(e:Event):void {
		_playerInfoWindows[e.target.nameLabel.text] = null;
	}

    private function _handleSendChat1(e:FlexEvent):void {
	  var match:Array;
	  if ((match = e.target.text.match(/^@(.+?)\s(.+)$/))) {
		  _sendPrivateChat(match[1], match[2]);
	  } else {
		_client.chat(e.target.text);
	  }
      e.target.text = "";
    }
	
	private function _handleChallenge(name:String):Function {
		return function(e:MouseEvent):void {
		  var nowDate:Date = new Date();
		  if (nowDate.valueOf() > _infoFetcher.serverMaintenanceTime) {
			  Alert.show("Server Maintenance Time.\nCannot open game.");
			  return;
		  }
		  _challengeUser = _findPlayerFromList(name);
		  if (_challengeUser == null || !(_challengeUser.status2.match(/W/))) {
			  Alert.show("The opponent is not waiting for a game.", Language.ac.getItemAt(_language).error);
		  } else {
			var match:Array = _challengeUser.game_name.match(/^([0-9a-z]+?)_(.*)-([0-9]*)-([0-9]*)/);
			var total:int = parseInt(match[3]) / 60 ;
			var rule:String = total + "min - " + match[4] + "sec";
			var hc:String = InfoFetcher.gameType(match[1]);
			Alert.yesLabel = Language.ac.getItemAt(_language).challenge;
			Alert.cancelLabel = Language.ac.getItemAt(_language).cancel;
			Alert.buttonWidth = 140;
			Alert.show("Opponent: " + match[2] + "\nTime: " + rule + "\nGame type: " + hc,"Game Setting",Alert.YES|Alert.CANCEL, null,_handleChallengeAlert);
			//set properties back to default.
			Alert.yesLabel = "Yes";
			Alert.cancelLabel = "Cancel";
			Alert.buttonWidth = 60;
		  }    
		}
	}

    private function _handleChallengeAlert(e:CloseEvent):void{
      if (e.detail == Alert.YES) {
      _challenging = true;
      _writeUserMessage("Challenging..... (Must wait for 20 seconds max)\n", 1, "#008800");
      _client.challenge(_challengeUser);
      } else if (e.detail == Alert.CANCEL) {
      }
    }
	
	private function _handleInvite(name:String):Function {
		return function(e:MouseEvent):void{
			if (!_waiting) {
				Alert.show("Create a game first.", Language.ac.getItemAt(_language).error);
			} else {
				var match:Array = _client.waitingGamename.match(/^([0-9a-z]+?)_(.*)-([0-9]*)-([0-9]*)/);
				var rule:String = (parseInt(match[3]) / 60) + "min - " + match[4] + "sec";
				var hc:String = InfoFetcher.gameType(match[1]);
				_sendPrivateChat(name, "[auto-PM] INVITATION: I am waiting with " + rule + ", " + hc + ". Would you like a game with me?");
			}
		}
	}
	
	private function _handleIgnore(name:String):Function {
		return function(e:MouseEvent):void {
			for each (var str:String in _ignore_list) {
				if (str == name.toLowerCase()) return;
			}
			_ignore_list.push(name.toLowerCase());
		}
	}
	
	private function _setRate(name:String):Function {
		return function(e:MouseEvent):void {
			_client.setRate(InfoFetcher.rank_thresholds[_playerInfoWindows[name].setRateCombo.selectedIndex + 8]);
		}
	}
	
	//=========================================================
	//                       CONTROLS for VIEWSTACK INDEX = 2
	//=========================================================
	
	//------------------------------------------------------------------------------------------------------------------------ BUTTONS
	private function _resignAlert():void {
		if (board.my_turn == board.position.turn)
        Alert.show("","Resign?",Alert.YES|Alert.NO, controlPanel, _resign);
	}
	
    private function _resign(e:CloseEvent):void {
		if (e.detail == Alert.YES) _client.resign();
    }
	
	private function _greetMenu():void{
      _greetMenuWindow = GreetMenuWindow(PopUpManager.createPopUp(controlPanel, GreetMenuWindow, false));
      PopUpManager.centerPopUp(_greetMenuWindow);
      with (_greetMenuWindow) {
        title = "Make Japanese Greetings";
		greet1.addEventListener(MouseEvent.CLICK, _sendGreet);
		greet2.addEventListener(MouseEvent.CLICK, _sendGreet);
      }
    }
	
	private function _sendGreet(e:MouseEvent):void {
		_client.gameChat(_game_name, e.target.label);
	}
	
    private function _showImpasse():void {
		board.position.calcImpasse();
		_impasseStatusWindow =  ImpasseStatusWindow(PopUpManager.createPopUp(board, ImpasseStatusWindow, true));
		PopUpManager.centerPopUp(_impasseStatusWindow);
		_impasseStatusWindow.title = "Impasse Status";
		_impasseStatusWindow.kachiButton.addEventListener(MouseEvent.CLICK, _handleKachiDeclare);
		_impasseStatusWindow.setStatus(board.position.impasseStatus, (_isPlayer() && board.position.turn == board.my_turn) ? board.my_turn : -1);
    }
	
	private function _handleKachiDeclare(e:MouseEvent):void {
		_client.kachi();
	}
	
    private function _closeGame():void {
	  if (_game_name) {
		  if (_monitoring) {
			  _client.monitorOff(_game_name);
			  _monitoring = false;
		  } else if (board.viewing) {
		  } else {
			  _client.gameChat(_game_name, "[##LEAVE]");
			  if (board.isStudyHost) _client.gameChat(_game_name, "[##GIVEHOST]" + board.playerInfos[board.playerInfos[0].name == login_name ? 1 : 0].name);
			  _client.closeGame();
		  }
          _game_name = null;
	  }
      board.closeGame();
	  if (board.viewing) {
		  mainViewStack.selectedIndex = 3;
		  chatMessage2.enabled = true;
		  board.viewing = false;
	  } else {
		  mainViewStack.selectedIndex = 1;
	  }
	  logoutButton.enabled = true;
      _refresh();
    }

    private function _handleSendChat2(e:FlexEvent):void {
	  var match:Array;
	  if ((match = e.target.text.match(/^@(.+?)\s(.+)$/))) {
		  _sendPrivateChat(match[1], match[2]);
	  } else {
		if (_game_name) _client.gameChat(_game_name, e.target.text);
	  }
      e.target.text = "";
    }

  private function _change_auto_scroll2():void {
	  _chat_auto_scroll2 = autoScrollCheck2.selected;
  }
  
	private function _clearArrows():void {
		if (board.isStudyHost || board.onListen) {
			if (board.clearArrows(Board.ARROWS_PUBLIC, login_name)) {
				_client.gameChat(_game_name, "[##ARROW]CLEAR");
			} else {
				board.clearArrows(Board.ARROWS_PUBLIC);
			}
			if (board.isStudyHost) board.clearArrows(Board.ARROWS_SELF);
		} else {
			board.clearArrows(Board.ARROWS_SELF);
		}
	}

	private function _gamePlayerInfo(e:MouseEvent):void {
	  _openPlayerInfo(_findPlayerFromList(e.target.text));
	}
	
  //------------------------------------------------------------------------------------------------------------------------ KIFU
  private function _toggleListen():void {
	  if (radioKifuListen.selected) {
		  board.onListen = true;
		  sidePanel.setStyle('borderColor', undefined);
		  board.clearArrows(Board.ARROWS_SELF);
		  board.showArrows(Board.ARROWS_PUBLIC);
		  kifuDataGrid.scrollToIndex(0);
		  kifuDataGrid.dataProvider = board.kifu_list;
		  if (board.kifu_list_self.length > 0) board.kifu_list_self = new Array();
		  if (board.post_game && !board.isStudyHost) {
			  board.replayMoves(board.studyOrigin, true);
			  if (board.study_list.length > 0) {
				  for (var i:int = 0; i <= board.studyOrigin; i++) board.kifu_list_self.push(board.kifu_list[i]);
				  for (i = 0; i < board.study_list.length; i++) board.makeMove(board.study_list[i] + ",T0", false, false);
				  kifuDataGrid.dataProvider = board.kifu_list_self;
				  kifuDataGrid.selectedIndex = board.kifu_list_self.length - 1;
			  }	 else {
				  kifuDataGrid.selectedIndex = board.studyOrigin;
			  }
		  }
		  if (_monitoring && !board.post_game) {
			  board.replayMoves(board.kifu_list.length - 1, true);
			  kifuDataGrid.selectedIndex = board.kifu_list.length - 1;
		  }
		  kifuDataGrid.callLater(_scrollDownKifu);
	  } else {
		  board.onListen = false;
		  sidePanel.setStyle('borderColor', _panelReplayColor);
		  if (!board.isStudyHost){
			board.eraseArrows(Board.ARROWS_PUBLIC);
			board.showArrows(Board.ARROWS_SELF);
		  }
		  if (board.post_game && !board.isStudyHost) {
			board.replayMoves(kifuDataGrid.selectedIndex, true);
		  }
	  }
  }
  
  private function _saveKIF():void {
	  var date_time:String = _game_name.split("+")[4];
	  var fileReference:FileReference = new FileReference();
	  fileReference.save(Jcode.getInstance().UTF8toSJIS(_formatKIF()), "81Dojo-" + date_time.substr(0,4) + "-" + date_time.substr(4,2) + "-" + date_time.substr(6,2) + "-" + date_time.substr(8,2) + "-" + date_time.substr(10,2)  + ".kif");
  }
 
	private function _formatKIF():String{
		  var KIFDataText:String = "";
		  KIFDataText += "開始日時：" + _game_name.split("+")[4].substr(0,4) + "/" + _game_name.split("+")[4].substr(4,2) + "/" + _game_name.split("+")[4].substr(6,2) + "\r\n";
		  KIFDataText += "場所：81-Dojo (" + VERSION +")\r\n";
		  KIFDataText += InfoFetcher.gameTypeKIF(_game_name.split("+")[1].match(/^([0-9a-z]+?)_/)[1]) + "\r\n";
		  KIFDataText += "先手：" + board.playerInfos[0].name + "\r\n";
		  KIFDataText += "後手：" + board.playerInfos[1].name + "\r\n";
		  KIFDataText += "手数----指手---------消費時間--\r\n";
		  for (var i:int = 1; i < board.kifu_list.length ; i++) {
			for (var j:int = 1; j <= 4 - String(i).length; j++) KIFDataText += " ";
			KIFDataText += String(i) + " ";
			KIFDataText += board.kifu_list[i].moveKIF + "\r\n";
		  }
		  return KIFDataText;
	}
	
  private function kifuListSelected():void {
	board.cancelSquareSelect();
	var n:int = kifuDataGrid.selectedIndex;
	radioKifuReplay.selected = true;
	if (board.onListen) {
		board.onListen = false;
		sidePanel.setStyle('borderColor', _panelReplayColor);
		board.eraseArrows(Board.ARROWS_PUBLIC);
	}
	board.clearArrows(Board.ARROWS_SELF);
	if (String(kifuDataGrid.selectedItem.num).match(/^\*/)) {
		board.replayMoves(n, false);
	} else {
		if (board.kifu_list_self.length > 0) {
			board.kifu_list_self = new Array();
			kifuDataGrid.scrollToIndex(0);
			kifuDataGrid.dataProvider = board.kifu_list;
			kifuDataGrid.selectedIndex = n;
			kifuDataGrid.scrollToIndex(n);
			if (board.isStudyHost) _sendAutoChat("Quit study mode.");
		}
		board.replayMoves(n, true);
	}
	if (board.isStudyHost) _sendStudy();
  }
    
  private function replayByButton(i:int):void {
	board.cancelSquareSelect();
	radioKifuReplay.selected = true;
	if (board.onListen) {
		board.onListen = false;
		sidePanel.setStyle('borderColor', _panelReplayColor);
		board.eraseArrows(Board.ARROWS_PUBLIC);
	}
	board.clearArrows(Board.ARROWS_SELF);
    switch (i) {
      case -2:
		kifuDataGrid.selectedIndex = 0;
        break;
      case -1:
		if (kifuDataGrid.selectedIndex > 0) kifuDataGrid.selectedIndex--;
        break;
      case 1:
		if (kifuDataGrid.selectedIndex < kifuDataGrid.dataProvider.length - 1 ) kifuDataGrid.selectedIndex++;
        break;
      case 2:
		kifuDataGrid.selectedIndex = kifuDataGrid.dataProvider.length;
    }
	var n:int = kifuDataGrid.selectedIndex;
	if (String(kifuDataGrid.selectedItem.num).match(/^\*/)) {
		board.replayMoves(n, false);
		if (board.isStudyHost) _sendStudy();
	} else {
		if (board.kifu_list_self.length > 0) {
			board.kifu_list_self = new Array();
			kifuDataGrid.scrollToIndex(0);
			kifuDataGrid.dataProvider = board.kifu_list;
			kifuDataGrid.selectedIndex = n;
			if (board.isStudyHost) _sendAutoChat("Quit study mode.");
		}
		board.replayMoves(n, true);
		if (board.isStudyHost) _sendStudy();
	}
	kifuDataGrid.scrollToIndex(n);
  }
	
	private function _scrollDownKifu():void {
		if (kifuDataGrid.selectedItem) {
			kifuDataGrid.scrollToIndex(kifuDataGrid.selectedIndex);
		} else {
			kifuDataGrid.scrollToIndex(kifuDataGrid.dataProvider.length - 1);
		}
	}
	
 	//------------------------------------------------------------------------------------------------------------------------ MOUSE DETECTION
	private function _rollOver(e:MouseEvent):void {
		if (_isPlayer() && !board.viewing && board.gameType == "r") _client.gameChat(_game_name, "[##M_IN]" + e.stageX + "," + e.stageY);
	}
	
	private function _rollOut(e:MouseEvent):void {
		if (_isPlayer() && !board.viewing && board.gameType == "r") _client.gameChat(_game_name, "[##M_OUT]0,0");
	}

	private function _playerInfoFromText(textArea:TextArea):void {
		var selectedText:String = textArea.text.substring(textArea.selectionBeginIndex, textArea.selectionEndIndex);
		var match:Array;
		if ((match = selectedText.match(/^\[(.+)\]$/))) _openPlayerInfo(_findPlayerFromList(match[1]));
	}
	
	//=========================================================
	//                       CONTROLS for VIEWSTACK INDEX = 3
	//=========================================================

	private function _rankingTabChange():void {
		var country_code:String = "";
		switch (rankingTabNavigator.selectedIndex) {
			case 0:
				if (_ranking_rate_list) {country_code = _ranking_rate_list[0].country_code;} break;
			case 1:
				if (_ranking_streak_list) {country_code = _ranking_streak_list[0].country_code;} break;
			case 2:
				if (_ranking_percentage_list) {country_code = _ranking_percentage_list[0].country_code;} break;
			case 3:
				if (_ranking_wins_list) {country_code = _ranking_wins_list[0].country_code;} break;
			case 4:
				if (_ranking_total_list) {country_code = _ranking_total_list[0].country_code;} break;
		}
		if (country_code == "") {
			rankingFlagLoader.source = "";
		} else {
			rankingFlagLoader.source = DIRECTORY + "images/flags_m/" + country_code + ".swf";
		}
	}
	
	private function _sendKifuSearch():void {
		if (kifuSearchPlayerText.text && kifuSearchFromChooser.selectedDate && kifuSearchToChooser.selectedDate) {
			kifuSearchGrid.dataProvider = null;
			var fromDate:Date = new Date("2010/9/20");
			if (kifuSearchFromChooser.selectedDate > fromDate) fromDate = kifuSearchFromChooser.selectedDate;
			_api.kifuSearch(kifuSearchPlayerText.text.toLowerCase(), fromDate, kifuSearchToChooser.selectedDate);
			searchAccordion.enabled = false;
		}
	}
	
	private function _handleSearchNotFound(e:Event):void {
		searchAccordion.enabled = true;
	}
	
	private function _handleKifuSearch(e:Event):void {
		searchAccordion.enabled = true;
		_kifu_search_list = new Array();
		var hc:String;
		var match:Array;
		for each (var kifu:Object in e.target.bufferData) {
			match = kifu.game_id.split("+")[1].match(/^([0-9a-z]+?)_.+\-(\d+)\-(\d+)$/);
			if (match[1] == "r") {
				hc = "R";
			} else if (match[1] == "nr") {
				hc = "NR";
			} else if (match[1].match(/^hc/)) {
				hc = "* " + InfoFetcher.gameTypeShort(match[1]);
			}
			kifu.rule = hc + ": " + parseInt(match[2])/60 + "-" + parseInt(match[3])
			kifu.black = kifu.game_id.split("+")[2];
			kifu.white = kifu.game_id.split("+")[3];
			kifu.date = kifu.game_id.split("+")[4].substr(0, 4) + "-" + kifu.game_id.split("+")[4].substr(4, 2) + "-" + kifu.game_id.split("+")[4].substr(6, 2);
			trace(kifu.game_id + " " + kifu.result);
			if (kifu.result.match(/summary/)) {
				if (kifu.result.match(new RegExp(kifuSearchPlayerText.text + " win", "i"))) {
					kifu.winner = "WIN";
				} else if (kifu.result.match(new RegExp(kifuSearchPlayerText.text + " lose", "i"))) {
					kifu.winner = "LOSE";
				} else {
					kifu.winner = "DRAW";
				}
				kifu.moves = kifu.result.split(":")[4] ? kifu.result.split(":")[4] : "-";
				kifu.opening = kifu.result.split(":")[5] ? InfoFetcher.openingNameEn(kifu.result.split(":")[5]) : "";
				kifu.opening_jp = kifu.result.split(":")[5] ? InfoFetcher.openingNameJp(kifu.result.split(":")[5]) : "";
				_kifu_search_list.push(kifu);
			}
		}
		kifuSearchGrid.dataProvider = _kifu_search_list;
	}
	
	private function _kifuSearchSelected():void {
		if (kifuSearchGrid.selectedItem) {
			searchAccordion.enabled = false;
			_api.kifuDetail(kifuSearchGrid.selectedItem.id);
		}
	}
	
	private function _shareKifu():void {
		var kifu:Object = kifuSearchGrid.selectedItem;
		if (kifu) {
			  _kifuShareWindow = KifuShareWindow(PopUpManager.createPopUp(searchAccordion, KifuShareWindow, true));
			  PopUpManager.centerPopUp(_kifuShareWindow);
			  _kifuShareWindow.kifu = kifu;
		} else {
			Alert.show("Highlight the kifu first.", Language.ac.getItemAt(_language).error);
		}
	}
	
	private function _handleKifuDetail(e:Event):void {
		searchAccordion.enabled = true;
		board.viewing = true;
		board.my_turn = Kyokumen.SENTE;
		_game_name = e.target.kifuContents.split("\n")[4].substring(7);
		board.startView(e.target.kifuContents);
		resignButton.enabled = false;
		reverseButton.enabled = true;
		greetButton.visible = false;
		if (_viewerAlone) {
			closeButton.enabled = false;
			checkLobbyButton.enabled = false;
		} else {
			closeButton.enabled = true;
		}
		kifuDataGrid.selectable = true;
		rewindAllButton.enabled = true;
		rewindOneButton.enabled = true;
		forwardAllButton.enabled = true;
		forwardOneButton.enabled = true;
		radioKifuReplay.enabled = true;
		radioKifuReplay.selected = true;
		sidePanel.setStyle('borderColor', _panelReplayColor);
		radioKifuListen.enabled = false;
		chatMessage2.enabled = false;
		mainViewStack.selectedIndex = 2;
		kifuDataGrid.dataProvider = board.kifu_list;
		kifuDataGrid.selectedIndex = 0;
		board.replayMoves(0, true);
	}
	
	private function _handlePlayerSearchEnter(e:FlexEvent):void {
		_sendPlayerSearch();
	}
	
	private function _sendPlayerSearch():void {
		if (playerSearchNameText.text) {
			playerSearchGrid.dataProvider = null;
			searchAccordion.enabled = false;
			_api.playerSearch(playerSearchNameText.text.toLowerCase());
		}
	}
	
	private function _handlePlayerSearch(e:Event):void {
		searchAccordion.enabled = true;
		_player_search_list = new Array();
		for each (var player:Object in e.target.bufferData) {
			player.country = _infoFetcher.country_names[_infoFetcher.country_codes[player.country_id - 1]];
			player.total = parseInt(player.wins) + parseInt(player.losses);
			player.percentage = (100 * player.wins / Math.max(1, player.total)).toFixed(1);
			player.flagURL = DIRECTORY + "images/flags_s/" + String(_infoFetcher.country_codes[player.country_id - 1] + 1000).substring(1) + ".gif";
			player.rank = InfoFetcher.makeRankFromRating(player.rate);
			player.created_at = player.created_at.split(" ")[0];
			player.updated_at = player.updated_at.split(" ")[0];
			for (var i:int = 0; i < _infoFetcher.titleUser.length; i++) {
				  if (player.login == _infoFetcher.titleUser[i]) {
					  player.title = _infoFetcher.titleName[i];
					  break;
				  }
			}
			_player_search_list.push(player);
		}
		playerSearchGrid.dataProvider = _player_search_list;
	}
	
	private function _sendRankingSearch():void {
		searchAccordion.enabled = false;
		var type:String;
		switch (rankingTabNavigator.selectedIndex) {
			case 0:
				type = "rate"; break;
			case 1:
				type = "streak"; break;
			case 2:
				type = "percentage"; break;
			case 3:
				type = "wins"; break;
			case 4:
				type = "total"; break;
		}
		_api.rankingSearch(type);
	}
	
	private function _handleRankingSearch(e:Event):void {
		searchAccordion.enabled = true;
		var listed:Boolean = true;
		switch (String(e.target.bufferXML.@item)) {
			case "wins":
				trace("hit");
				_ranking_wins_list = new Array(); break;
			case "rate":
				_ranking_rate_list = new Array(); break;
			case "total":
				_ranking_total_list = new Array(); break;
			case "streak":
				_ranking_streak_list = new Array(); break;
			case "percentage":
				_ranking_percentage_list = new Array(); break;
		}
		var num:int = 0;
		for each (var playerXML:XML in e.target.bufferXML.player) {
			num += 1;
			var player:Object = {
				'number':num,
				'login':String(playerXML.login),
				'country_code':String(_infoFetcher.country_codes[parseInt(playerXML.country_id)-1] + 1000).substring(1),
				'country':_infoFetcher.country_names[_infoFetcher.country_codes[parseInt(playerXML.country_id)-1]],
				'wins':parseInt(playerXML.wins),
				'losses':parseInt(playerXML.losses),
				'total':parseInt(playerXML.wins) + parseInt(playerXML.losses),
				'percentage':(100 * parseInt(playerXML.wins) / Math.max(1, parseInt(playerXML.wins) + parseInt(playerXML.losses))).toFixed(1),
				'streak_best':parseInt(playerXML.streak_best),
				'rate':parseInt(playerXML.rate),
				'rank':InfoFetcher.makeRankFromRating(parseInt(playerXML.rate))
			}
			player.flagURL = DIRECTORY + "images/flags_s/" + player.country_code + ".gif";
			for (var i:int = 0; i < _infoFetcher.titleUser.length; i++) {
				  if (player.login == _infoFetcher.titleUser[i]) {
					  player.title = _infoFetcher.titleName[i];
					  break;
				  }
			}
			for each (var cheat:String in _infoFetcher.cheaters) { // Temporarily
				if (player.login == cheat) {
					listed = false;
					num -= 1;
				}
			}
			if (listed) {
				switch (String(e.target.bufferXML.@item)) {
					case "wins":
						_ranking_wins_list.push(player); break;
					case "rate":
						_ranking_rate_list.push(player); break;
					case "total":
						_ranking_total_list.push(player); break;
					case "streak":
						_ranking_streak_list.push(player); break;
					case "percentage":
						_ranking_percentage_list.push(player); break;
				}
			}
			listed = true;
		}
		winRankingGrid.dataProvider = _ranking_wins_list;
		totalRankingGrid.dataProvider = _ranking_total_list;
		streakRankingGrid.dataProvider = _ranking_streak_list;
		percentageRankingGrid.dataProvider = _ranking_percentage_list;
		rateRankingGrid.dataProvider = _ranking_rate_list;
		_rankingTabChange();
	}

	//=========================================================
	//                   OTHER EVENT HANDLERS for SMALL WINDOWS
	//=========================================================
	
	//--------------------------------------------------------------------------------------------------------------------------------- CREATE GAME
    private function _handleRuleSelected(e:GameRuleEvent):void {
	  _so.data.rule_base = _newGameWindow.timeSetting.selectedValue;
	  _so.data.rule_total = _newGameWindow.nonrated_total.selectedIndex;
	  _so.data.rule_byoyomi = _newGameWindow.nonrated_byoyomi.selectedIndex;
	  _so.data.rule_handicap = _newGameWindow.nonrated_handicap.selectedIndex;
      _waitForGame(e.total, e.byoyomi, e.handicap);
	  _waiting = true;
    }
	//--------------------------------------------------------------------------------------------------------------------------------- CHALLENGE ALERT 
  private function _handleChallengerAcceptButton(e:MouseEvent):void {
	  _challengerTicker.reset();
	  _client.agree();
  }
  
  private function _handleChallengerRejectButton(e:MouseEvent):void {
	  _challengerTicker.reset();
	  _client.reject();
  }
	
	private function _challengerTickHandler(e:TimerEvent):void {
		_challengerAlertWindow.remainTime -= 1
		if (_challengerAlertWindow.remainTime <= 0) {
			_challengerTicker.reset();
			_client.reject();
			PopUpManager.removePopUp(_challengerAlertWindow);
		}
	}

	//--------------------------------------------------------------------------------------------------------------------------------- OPTION WINDOW
    private function _handleOption(e:Event):void {
	  GameTimer.soundType = int(_optionWindow.RadioGroup1.selectedValue);
      board.setPieceType(int(_optionWindow.RadioGroup2.selectedValue));
      board.piece_sound_play = _optionWindow.pieceSoundCheckBox.selected;
      _end_sound_play = _optionWindow.gameEndSoundCheckBox.selected;
      _chat_sound1_play = _optionWindow.chatSound1CheckBox.selected;
      _chat_sound2_play = _optionWindow.chatSound2CheckBox.selected;
	  _chat_sound3_play = _optionWindow.chatSound3CheckBox.selected;
	  _pmAutoOpen = _optionWindow.pmAutoOpenCheckBox.selected;
	  _accept_arrows = _optionWindow.acceptArrowsCheckBox.selected;
	  _arrow_color = _optionWindow.arrowColorPicker.selectedColor;
	  _so.data.optionTab = _optionWindow.optionTab.selectedIndex;
	  if (_isPlayer()) {
		  if (board.piece_type >= 4 && board.piece_type != _prev_piece_type) {
			  if (board.piece_type == 4) _sendAutoChat("Pieces set to Blind, Middle.");
			  else if (board.piece_type == 5) _sendAutoChat("Pieces set to Blind, Hard.");
			  else if (board.piece_type == 6) _sendAutoChat("Pieces set to Blind, Extreme.");
		  } else if (board.piece_type <= 3 && _prev_piece_type >= 4) {
			  _sendAutoChat("Pieces set to Normal.");
		  }
	  }
    }
	
	private function _handleSaveSettings(e:Event):void {
		var urlVariables:URLVariables = new URLVariables();
		_handleOption(e);
		urlVariables.name = login_name.toLowerCase();
		urlVariables.pieceSound = board.piece_sound_play;
		urlVariables.endSound = _end_sound_play;
		urlVariables.chatSound1 = _chat_sound1_play;
		urlVariables.chatSound2 = _chat_sound2_play;
		urlVariables.chatSound3 = _chat_sound3_play;
		urlVariables.pmAutoOpen = _pmAutoOpen;
		urlVariables.acceptArrow = _accept_arrows;
		urlVariables.arrowColor = _arrow_color;
		urlVariables.ignoreList = _ignore_list.join("/");
		urlVariables.byoyomi = GameTimer.soundType;
		urlVariables.pieceType = board.piece_type;
		_infoFetcher.writeSettings(urlVariables);
	}
	
	private function _handleRemoveIgnore(e:Event):void {
		if (!_optionWindow) return;
		if (_optionWindow.ignoreList.selectedIndex >= 0) {
			_ignore_list.splice(_optionWindow.ignoreList.selectedIndex, 1);
			_optionWindow.ignoreList.dataProvider = _ignore_list;
		}
	}
	
	private function _handleLoadOption(e:Event):void {
		board.piece_sound_play = _infoFetcher.userSettings.pieceSound;
		_end_sound_play = _infoFetcher.userSettings.endSound;
		_chat_sound1_play = _infoFetcher.userSettings.chatSound1;
		_chat_sound2_play = _infoFetcher.userSettings.chatSound2;
		_chat_sound3_play = _infoFetcher.userSettings.chatSound3;
		_pmAutoOpen = _infoFetcher.userSettings.pmAutoOpen;
		_accept_arrows = _infoFetcher.userSettings.acceptArrow;
		_arrow_color = _infoFetcher.userSettings.arrowColor;
		if (_infoFetcher.userSettings.ignoreList != "") _ignore_list = _infoFetcher.userSettings.ignoreList.split("/");
		GameTimer.soundType = _infoFetcher.userSettings.byoyomi;
		board.setPieceType(_infoFetcher.userSettings.pieceType);
	}
	
	//--------------------------------------------------------------------------------------------------------------------------------- PLAYER INFO WINDOW
	private function _handleSendPrivateChat(name:String):Function {
		return function(e:FlexEvent):void {
			_sendPrivateChat(name, e.target.text);
			e.target.text = "";
		}
	}
	
	//=========================================================
	//                       OTHERS
	//=========================================================
	
    private function _handleKeepAlive(e:Event):void {
	  _refresh();
//  	  if (mainViewStack.selectedIndex == 1) bulletin.flip();
    }

    private function _writeUserMessage(message:String, n:int, colorCode:String, bold:Boolean = false):void {
		var match:Array;
		message = "<font color='" + colorCode + "'>" + (bold ? "<b>" : "") + message.replace(/</g, "&lt;") + (bold ? "</b>" : "") + "</font>";
		if ((match = message.match(/\s(https?\:\/\/[^\"]+?)\s/))) message = message.replace(/\shttps?\:\/\/[^\"]+?\s/, " <a href=\"" + match[1] + "\" target=\"_blank\">" + match[1] + "</a> ");
		message = message.replace(/\\n/g, "\n");
		switch (n) {
			case 1:
				_userMessageScrollPos1 = userMessage1.verticalScrollPosition
				userMessage1.htmlText += message;
				userMessage1.callLater(_scrollDown1);
				break;
			case 2:
				_userMessageScrollPos2 = userMessage2.verticalScrollPosition
				userMessage2.htmlText += message;
				userMessage2.callLater(_scrollDown2);
				break;		
		}
    }

    private function _scrollDown1():void{
      if (_chat_auto_scroll1) userMessage1.verticalScrollPosition = userMessage1.maxVerticalScrollPosition;
	  else userMessage1.verticalScrollPosition = _userMessageScrollPos1;
    }

	private function _scrollDown2():void{
      if (_chat_auto_scroll2) userMessage2.verticalScrollPosition = userMessage2.maxVerticalScrollPosition;
	  else userMessage2.verticalScrollPosition = _userMessageScrollPos2;
    }

    private function _playerMove(from:Point, to:Point, promote:Boolean):void {
	  var str:String = board.position.generateMovementFromCoordinates(from, to, promote).toCSA();
	  if (!board.onListen) {
		  board.clearArrows(Board.ARROWS_SELF);
		  if (board.isStudyHost) {
			  if (!String(kifuDataGrid.selectedItem.num).match(/^\*/)) _sendAutoChat("Launched study mode at #" + kifuDataGrid.selectedIndex);
		  }
		  var n:int = kifuDataGrid.selectedIndex;
		  if (board.kifu_list_self.length == 0) {
			for (var i:int = 0; i <= n; i++) board.kifu_list_self.push(board.kifu_list[i]);
		  }
		  while (board.kifu_list_self.length - 1 > n) board.kifu_list_self.pop();
		  if (board.post_game || board.viewing) {
			  board.makeMove(str + ",T0", false, true);
		  } else {
			  board.makeMove(str + ",T0", false, false);
		  }
		  kifuDataGrid.dataProvider = board.kifu_list_self;
		  kifuDataGrid.selectedIndex = board.kifu_list_self.length - 1;
		  kifuDataGrid.scrollToIndex(board.kifu_list_self.length - 1);
		  if (board.isStudyHost) _sendStudy();
	  } else {
		  _client.move(str);
	  }
    }
	
	private function _addMyArrow(fromType:int, from:Point, to:Point):void {
		if (board.isStudyHost || board.onListen) {
			_client.gameChat(_game_name, "[##ARROW]" + fromType + "," + from.x + "," + from.y + "," + to.x + "," + to.y + ",0x" + _arrow_color.toString(16));
		} else {
			board.addArrow(fromType, from, to, _arrow_color, login_name, Board.ARROWS_SELF, true);
		}
	}
	
	private function _sendStudy():void {
		var str:String = "";
		for (var i:int = kifuDataGrid.selectedIndex; i >= 0; i--) {
			if (String(kifuDataGrid.dataProvider[i].num).match(/^\*/)) {
				str = "/" + kifuDataGrid.dataProvider[i].moveStr.split(",")[0] + str;
			} else {
				str = kifuDataGrid.dataProvider[i].num + str;
				break;
			}
		}
		if (!str.match(/\//)) str += "/*";
		str = "[##STUDY]" + str;
		_client.gameChat(_game_name, str);
	}

    private function _checkTimeout():void {
	  board.clientTimeout();
      _client.checkTimeout();
    }
	
	private function _findPlayerFromList(str:String):Object {
		for (var i:int = 0; i < _user_list.length; i++) {
			if (_user_list[i].name == str) return _user_list[i];
		}
		return null;
	}
	
	private function _sendPrivateChat(sendTo:String, message:String):void {
		if (!_isPlayer()) {
			var user:Object = _findPlayerFromList(sendTo);
			if (!user) {
				Alert.show("User not found online");
				return;
			} else if (user.status == "game") {
				if  (_game_name && _monitoring && sendTo == board.playerInfos[0].name) {
//					_client.privateChat(sendTo, message);
					_client.privateChat(board.playerInfos[1].name, "[auto-PM] Sent private message to Black.");
					_client.gameChat(_game_name, "[auto-chat&PM] Sent private message to Black.");
				} else if (_game_name && _monitoring && sendTo == board.playerInfos[1].name) {
//					_client.privateChat(sendTo, message);
					_client.privateChat(board.playerInfos[0].name, "[auto-chat] Sent private message to White.");
					_client.gameChat(_game_name, "[auto-chat&PM] Sent private message to White.");
				} else {
					Alert.show("User is now playing.");
					return;
				}
			}
			_client.privateChat(sendTo, message);
			if (!_pmLog[sendTo]) _pmLog[sendTo] = "";
			_pmLog[sendTo] += "<font color='#0033DD'>" + message + "</font>" + "\n";
			if (_playerInfoWindows[sendTo]) {
				var match:Array;
				if ((match = message.match(/(https?\:\/\/[^\"^\s]+)/))) message = message.replace(/https?\:\/\/[^\"^\s]+/, "<a href=\"" + match[1] + "\" target=\"_blank\">" + match[1] + "</a>");
				_playerInfoWindows[sendTo].pmText = _pmLog[sendTo];
				_playerInfoWindows[sendTo].pmCheckBox.selected = true;
				_playerInfoWindows[sendTo].togglePM();
				_playerInfoWindows[sendTo].callLater(_playerInfoWindows[sendTo].scrollDown);
				if (_chat_sound3_play) _sound_chat1.play();
			} else if (mainViewStack.selectedIndex == 1) {
				_writeUserMessage("PM To " + sendTo + ": " + message + "\n", 1, "#0033DD");
				if (_chat_sound1_play) _sound_chat1.play();
			} else {
				_writeUserMessage("PM To " + sendTo + ": " + message + "\n", 2, "#0033DD");
				if (_chat_sound2_play) _sound_chat2.play();
			}
		}
	}
  
  private function _sendAutoChat(str:String):void {
    if (_game_name) {
      _client.gameChat(_game_name, "[auto-chat] " + str);
    } else {
	  _client.chat("[auto-chat] " + str);
	}
  }
  
  private function _isPlayer():Boolean {
	  if (_game_name && !board.post_game) {
		  if (board.playerInfos[0].name == login_name || board.playerInfos[1].name == login_name) return true;
	  }
	  return false;
  } 
  
	//=========================================================
	//                       MXML PART
	//=========================================================
  
    ]]>
  </mx:Script>
  <mx:Component id="gameListBlackRenderer">
	  <mx:HBox horizontalAlign="left" paddingLeft="0" paddingRight="0" height="100%" horizontalScrollPolicy="off">
		<mx:Label text="{data.blackRank}" textAlign="right" width="40" paddingLeft="-7" paddingRight="-7" color="{data.blackRankColor}"/>
		<mx:Image filters="{[data.blackFlagFilter]}" source="{data.blackFlagURL}" width="27" height="17" toolTip="{data.blackCountry}"/>
		<mx:Label paddingLeft="-7" paddingRight="-7" text="{data.blackName}" color="{data.blackColor}" textDecoration="{data.blackDecoration}" width="83" textAlign="left" />
	  </mx:HBox>
  </mx:Component>
  <mx:Component id="gameListWhiteRenderer">
	  <mx:HBox horizontalAlign="right"  paddingLeft="0" paddingRight="0" height="100%" horizontalScrollPolicy="off">
		<mx:Label paddingLeft="-7" paddingRight="-7" text="{data.whiteName}" color="{data.whiteColor}" textDecoration="{data.whiteDecoration}" width="83" textAlign="right" />
		<mx:Image filters="{[data.whiteFlagFilter]}" source="{data.whiteFlagURL}" width="27" height="17" toolTip="{data.whiteCountry}" />
		<mx:Label text="{data.whiteRank}" textAlign="left" width="40" paddingLeft="-7" paddingRight="-7" color="{data.whiteRankColor}" />
	  </mx:HBox>
  </mx:Component>
  <mx:Component id="playerListCountryRenderer">
	  <mx:HBox verticalAlign="middle" paddingLeft="2" paddingRight="0" height="100%" horizontalScrollPolicy="off">
		<mx:Image source="{data.flagURL}" width="16" height="13" />
		<mx:Label text="{data.country}" textAlign="left" paddingLeft="-9" paddingRight="-7" fontSize="10" width="70" />
	  </mx:HBox>
  </mx:Component>
  <mx:Component id="waiterListNameRenderer">
	  <mx:HBox paddingLeft="2" paddingRight="0" height="100%" horizontalScrollPolicy="off">
		<mx:Image source="{data.flagURL}" width="27" height="17" toolTip="{data.country}" />
		<mx:Label text="■" paddingLeft="-6" paddingRight="-9" width="5" color="{data.rankColor}" />
		<mx:Label text="{data.name}" paddingLeft="-8" paddingRight="-7" width="100" />
	  </mx:HBox>
  </mx:Component>
  <mx:Component id="rankRenderer">
		<mx:Label text="{data.rank}" color="{data.rankColor}" paddingLeft="-8" paddingRight="-7" />
  </mx:Component>
  <mx:Fade id="hideLogin" alphaFrom="1.0" alphaTo="0.0" duration="1000" />
  <mx:ViewStack id="mainViewStack" creationPolicy="all" width="100%" height="100%">
<!-- =============================================================
                  VIEWSTACK INDEX = 0
================================================================== -->
    <mx:VBox id="loginBox" horizontalAlign="center" verticalAlign="middle" width="100%" height="100%" fontSize="11" hideEffect="{hideLogin}">
    <mx:Image id="titleBanner" source="{DIRECTORY}images/81Dojo.jpg"/>
	  <mx:Label paddingTop="-2" paddingBottom="0" text="{VERSION}"/>
      <mx:Label paddingTop="-3" text="(powered by ShogiServer and 81SquareUniverse.com)"/>
      <mx:Form paddingBottom="0">
        <mx:FormItem label="{Language.ac.getItemAt(_language).loginname}" paddingTop="-2">
            <mx:TextInput id="loginname" width="200"/>
        </mx:FormItem>
        <mx:FormItem label="{Language.ac.getItemAt(_language).password}" paddingTop="-2">
            <mx:TextInput id="password" width="200" displayAsPassword="true"/>
        </mx:FormItem>
		<mx:FormItem label="{Language.ac.getItemAt(_language).language}" paddingTop="-2">
			<mx:ComboBox id="languageCombo" change="_language = languageCombo.selectedIndex;" width="170" rowCount="10">
				<mx:dataProvider><mx:Array>
					<mx:Object label="{Language.ac.getItemAt(0).LANGUAGE}" image="{DIRECTORY}images/flags_s/826.gif" />
					<mx:Object label="{Language.ac.getItemAt(1).LANGUAGE}" image="{DIRECTORY}images/flags_s/392.gif" />
					<mx:Object label="{Language.ac.getItemAt(2).LANGUAGE}" image="{DIRECTORY}images/flags_s/156.gif" />
					<mx:Object label="{Language.ac.getItemAt(3).LANGUAGE}" image="{DIRECTORY}images/flags_s/hongkong.gif" />
					<mx:Object label="{Language.ac.getItemAt(4).LANGUAGE}" image="{DIRECTORY}images/flags_s/724.gif" />
					<mx:Object label="{Language.ac.getItemAt(5).LANGUAGE}" image="{DIRECTORY}images/flags_s/250.gif" />
					<mx:Object label="{Language.ac.getItemAt(6).LANGUAGE}" image="{DIRECTORY}images/flags_s/276.gif" />
					<mx:Object label="{Language.ac.getItemAt(7).LANGUAGE}" image="{DIRECTORY}images/flags_s/616.gif" />
					<mx:Object label="{Language.ac.getItemAt(8).LANGUAGE}" image="{DIRECTORY}images/flags_s/752.gif" />
					<mx:Object label="{Language.ac.getItemAt(9).LANGUAGE}" image="{DIRECTORY}images/flags_s/300.gif" />
					<mx:Object label="{Language.ac.getItemAt(10).LANGUAGE}" image="{DIRECTORY}images/flags_s/380.gif" />
					<mx:Object label="{Language.ac.getItemAt(11).LANGUAGE}" image="{DIRECTORY}images/flags_s/620.gif" />
					<mx:Object label="{Language.ac.getItemAt(12).LANGUAGE}" image="{DIRECTORY}images/flags_s/112.gif" />
					<mx:Object label="{Language.ac.getItemAt(13).LANGUAGE}" image="{DIRECTORY}images/flags_s/643.gif" />
					<mx:Object label="{Language.ac.getItemAt(14).LANGUAGE}" image="{DIRECTORY}images/flags_s/764.gif" />
					<mx:Object label="{Language.ac.getItemAt(15).LANGUAGE}" image="{DIRECTORY}images/flags_s/804.gif" />
				</mx:Array></mx:dataProvider>
                <mx:itemRenderer>
                    <mx:Component>
                        <mx:HBox>
                            <mx:Image source="{data.image}" width="27" height="17"/>
                            <mx:Text text="{data.label}"/>
                        </mx:HBox>
                    </mx:Component>
                </mx:itemRenderer>
			</mx:ComboBox>
		</mx:FormItem>
		<mx:FormItem label="" paddingTop="-2">
			<mx:CheckBox label="{Language.ac.getItemAt(_language).save_login_info}" id="savelogin" selected="false" />
		</mx:FormItem>
        <mx:FormItem paddingTop="-2">
            <mx:Button id="loginButton" label="{Language.ac.getItemAt(_language).login}" y="400" />
        </mx:FormItem>
      </mx:Form>
      <mx:Label paddingTop="-2" paddingBottom="0"  id="loginMessage" fontSize="10" />
      <mx:Label paddingTop="-2" paddingBottom="0"  id="errorMessage" color="#ff6666" fontSize="10" />
      <!-- <mx:LinkButton paddingTop="-2" label="Sign Up" fontSize="15" click="navigateToURL(new URLRequest('http://81dojo.dyndns.org:8000'), 'quote')" /> -->
      <mx:Label paddingTop="5" text="Chief Programmer: Kota" fontSize="13" />
	  <mx:HBox>
		  <mx:Label text=" " doubleClickEnabled="true" doubleClick="_localLogin();"/>
		  <mx:Label text=" " doubleClickEnabled="true" doubleClick="_testLogin(1);"/>
		  <mx:Label text="Assistant: Hidetchi"/>
		  <mx:Label text=" " doubleClickEnabled="true" doubleClick="_testLogin(2);"/>
		  <mx:Label text=" " doubleClickEnabled="true" doubleClick="_testLogin(3);"/>
	  </mx:HBox>
	  <mx:Label paddingTop="10"  paddingBottom="0" text="- Materials -" fontSize="10" />
	  <mx:LinkButton paddingTop="-2" paddingBottom="0" label="CC Resources for Shogi Applications by muchonovski" click="navigateToURL(new URLRequest('http://www.muchonov.com/bona/'), 'quote')"/>
      <mx:LinkButton paddingTop="-2" paddingBottom="0"  label="www.otosozai.com - ONGAKUSITU" click="navigateToURL(new URLRequest('http://www.otosozai.com/'), 'quote')"/>
	  <mx:LinkButton paddingTop="-2" paddingBottom="0"  label="National flag and Road sign Mt." click="navigateToURL(new URLRequest('http://nflagrsign.xrea.jp/'), 'quote')"/>
    </mx:VBox>
<!-- =============================================================
                  VIEWSTACK INDEX = 1
================================================================== -->
	<mx:HBox paddingTop="10" paddingLeft="10">
    <mx:VBox fontSize="11">
      <mx:Panel id="userListPanel" width="975" height="560" paddingLeft="10" paddingTop="10" status="{VERSION}" horizontalScrollPolicy="off" verticalScrollPolicy="off" backgroundColor="#FFFFEE">
      <mx:HBox>
        <mx:Button id="refreshButton" icon="@Embed('images/icon_refresh.png')" toolTip="{Language.ac.getItemAt(_language).refresh}" click="_refresh();"/>
		<mx:Button id="searchViewButton" icon="@Embed('images/icon_search.png')" toolTip="{Language.ac.getItemAt(_language).search}" click="mainViewStack.selectedIndex=3;" />
        <mx:Button id="startButton" label="{Language.ac.getItemAt(_language).wait}" click="_newGameForm();"/>
        <mx:Button id="stopButton" label="{Language.ac.getItemAt(_language).stop}" click="_stopWaiting()" enabled="false" />
<!--        <mx:Button id="challengeButton" label="{Language.ac.getItemAt(_language).challenge}" enabled="false" toolTip="Double Click the Opponent to Challenge!!!" /> -->
		<mx:Button id="optionButton1" icon="@Embed('images/icon_gear.png')" toolTip="{Language.ac.getItemAt(_language).options}" click="_showOptions();" enabled="true"/>
		<mx:CheckBox id="muteCheck1" paddingRight="-8" click="_mute(muteCheck1.selected)" toolTip="{Language.ac.getItemAt(_language).mute}"/>
		<mx:Image source="@Embed('images/icon_mute.png')" click="_mute(!muteCheck1.selected)" toolTip="{Language.ac.getItemAt(_language).mute}"/>
		<mx:Button id="leaveButton" label="{Language.ac.getItemAt(_language).leave}" click="_leavePC();"/>
		<mx:Button id="logoutButton" label="{Language.ac.getItemAt(_language).logout}" click="_logout()"/>
		<mx:Button id="backToGameButton" label="{Language.ac.getItemAt(_language).back_to_game}" click="_backToGame();" visible="false" color="#FF0000" />
      </mx:HBox>
	  <mx:HBox>
		<mx:VDividedBox liveDragging="true">
			<mx:DataGrid id="userListGrid" width="360" height="363" headerHeight="21" change="_userSelected();" rowHeight="20" doubleClickEnabled="true" doubleClick="_openPlayerInfo(userListGrid.selectedItem);" paddingTop="0" paddingBottom="0" verticalAlign="middle">
			 <mx:columns>
			  <mx:DataGridColumn dataField="status2" headerText="{Language.ac.getItemAt(_language).status_short}" width="32" paddingLeft="0" textAlign="center" />
			  <mx:DataGridColumn dataField="titleName" headerText="{Language.ac.getItemAt(_language).title}" width="56" paddingLeft="0" textAlign="center" />
			  <mx:DataGridColumn itemRenderer="{rankRenderer}" headerText="{Language.ac.getItemAt(_language).rank}" width="49" paddingLeft="0" textAlign="center" sortable="false" />
			  <mx:DataGridColumn dataField="name" headerText="{Language.ac.getItemAt(_language).name}" width="106" paddingLeft="1" sortCompareFunction="_sortName" />
			  <mx:DataGridColumn itemRenderer="{playerListCountryRenderer}" headerText="{Language.ac.getItemAt(_language).country}" width="90" paddingLeft="2" sortCompareFunction="_sortCountry" />
			  <mx:DataGridColumn dataField="rating" headerText="{Language.ac.getItemAt(_language).rate}" width="45" paddingRight="3" paddingLeft="0" textAlign="right" sortable="false" />
			 </mx:columns>
			</mx:DataGrid>
			<mx:DataGrid id="waiterListGrid" width="360" height="102" headerHeight="21" change="_waiterSelected();" rowHeight="20" doubleClickEnabled="true" doubleClick="_openPlayerInfo(_findPlayerFromList(waiterListGrid.selectedItem.name));" paddingTop="0" paddingBottom="0" verticalAlign="middle">
			 <mx:columns>
			  <mx:DataGridColumn itemRenderer="{waiterListNameRenderer}" headerText="{Language.ac.getItemAt(_language).waiter}" width="120" paddingLeft="2" sortable="false" />
<!--			  <mx:DataGridColumn dataField="country3" headerText="{Language.ac.getItemAt(_language).country_short}" width="30" paddingLeft="0" textAlign="center" showDataTips="true" dataTipField="country" /> -->
			  <mx:DataGridColumn dataField="rating" headerText="{Language.ac.getItemAt(_language).rate}" width="35" paddingRight="3" textAlign="right" sortable="false" />
			  <mx:DataGridColumn dataField="time" headerText="{Language.ac.getItemAt(_language).thinking_time}" width="40" paddingLeft="0" textAlign="center" />
			  <mx:DataGridColumn dataField="rated" headerText="R?" width="25" paddingLeft="0" textAlign="center" />
			  <mx:DataGridColumn dataField="handicap" headerText="{Language.ac.getItemAt(_language).handicap}" width="60" paddingLeft="0" textAlign="center" />
			 </mx:columns>
			</mx:DataGrid>
		</mx:VDividedBox>
		<mx:VBox>
			<mx:VDividedBox dividerRelease="userMessage1.callLater(_scrollDown1);" liveDragging="true">
				<mx:DataGrid id="gameListGrid" width="570" height="220" headerHeight="21" change="_gameSelected();" rowHeight="20" doubleClickEnabled="true" doubleClick="_watchDialog();" paddingTop="0" paddingBottom="0" verticalAlign="middle">
				 <mx:columns>
				  <mx:DataGridColumn dataField="gameNo" headerText="No." width="23" paddingLeft="0" textAlign="center" sortable="false" />
<!--				  <mx:DataGridColumn dataField="blackRank" headerText="" width="55" paddingRight="2" textAlign="right" /> -->
<!--				  <mx:DataGridColumn dataField="blackFlagURL" headerText="" paddingLeft="0" paddingRight="0" itemRenderer="mx.controls.Image" width="27" resizable="false" /> -->
				  <mx:DataGridColumn itemRenderer="{gameListBlackRenderer}" headerText="{Language.ac.getItemAt(_language).black}(▲)" width="172" paddingLeft="0" paddingRight="0" textAlign="center" sortable="false" />
				  <mx:DataGridColumn itemRenderer="{gameListWhiteRenderer}" headerText="{Language.ac.getItemAt(_language).white}(△)" width="172" paddingLeft="0" paddingRight="0" textAlign="center" sortable="false" />
<!--				  <mx:DataGridColumn dataField="whiteFlagURL" headerText="" paddingLeft="0" paddingRight="0" itemRenderer="mx.controls.Image" width="27" resizable="false" /> -->
<!--				  <mx:DataGridColumn dataField="whiteRank" headerText="" width="55" paddingLeft="2" /> -->
				  <mx:DataGridColumn dataField="rule" headerText="{Language.ac.getItemAt(_language).rule}" width="78" paddingLeft="3" />
				  <mx:DataGridColumn dataField="status" headerText="{Language.ac.getItemAt(_language).status_short}" width="35" paddingLeft="0" textAlign="center" />
				  <mx:DataGridColumn dataField="watchers" headerText="{Language.ac.getItemAt(_language).monitor}" paddingLeft="0" textAlign="center" showDataTips="true" dataTipField="watcher_names" />
				  <mx:DataGridColumn dataField="opening" headerText="{Language.ac.getItemAt(_language).opening_short}" fontSize="12" width="55" showDataTips="true" dataTipField="opening_en" paddingLeft="0" textAlign="center" />
				 </mx:columns>
				</mx:DataGrid>
				<mx:TextArea id="userMessage1" wordWrap="true" editable="false" width="570" height="215" fontSize="12" doubleClickEnabled="true" doubleClick="_playerInfoFromText(userMessage1);" />
			</mx:VDividedBox>
			<mx:HBox>
				<mx:Label text="{Language.ac.getItemAt(_language).chat}"/>
				<mx:TextInput id="chatMessage1" width="430"/>
				<mx:CheckBox id="autoScrollCheck1" label="{Language.ac.getItemAt(_language).auto_scroll}" selected="true" click="_change_auto_scroll1();" />
			</mx:HBox>
		</mx:VBox>
	  </mx:HBox>
      </mx:Panel>
	  <mx:HBox paddingTop="5" fontSize="14" fontWeight="bold" width="975" horizontalAlign="center">
		  <mx:VBox horizontalAlign="center">
			  <mx:Label text="Los Angeles"/>
			  <mx:SWFLoader source="http://www.clocklink.com/clocks/5003-blue.swf?TimeZone=USA_LosAngeles" width="300" height="25"/>
		  </mx:VBox>
		  <mx:VBox horizontalAlign="center">
			  <mx:Label text="UTC"/>
			  <mx:SWFLoader source="http://www.clocklink.com/clocks/5003-green.swf?TimeZone=GMT" width="300" height="25"/>
		  </mx:VBox>
		  <mx:VBox horizontalAlign="center">
			  <mx:Label text="Tokyo"/>
			  <mx:SWFLoader source="http://www.clocklink.com/clocks/5003-red.swf?TimeZone=GMT0900" width="300" height="25"/>
		  </mx:VBox>
	  </mx:HBox>
    </mx:VBox>
	<eightyOneSquare:BulletinGadget id="bulletin" paddingLeft="8" />
	</mx:HBox>
<!-- =============================================================
                  VIEWSTACK INDEX = 2
================================================================== -->
    <mx:HBox id="boardBox">
	<mx:Panel width="100%" height="100%" headerHeight="0" backgroundColor="#FFcccc" borderThicknessBottom="0" borderThicknessLeft="0" borderThicknessRight="0" borderThicknessTop="0" paddingLeft="0" paddingRight="0" backgroundAlpha="0">
	<mx:HBox paddingLeft="5" paddingTop="5">
      <mx:VBox>
      <eightyOneSquare:Board id="board" width="782" height="474"/> 
      <mx:HBox>
        <mx:Panel id="messagePanel" fontSize="11" title="Message Panel" width="435" height="200" headerHeight="22" borderThicknessLeft="8" borderThicknessRight="8">
        <mx:TextArea id="userMessage2" wordWrap="true" editable="false" width="419" height="168" fontSize="12" doubleClickEnabled="true" doubleClick="_playerInfoFromText(userMessage2);" />
        </mx:Panel>
        <mx:Panel id="controlPanel" fontSize="11" title="Control Panel" width="336" height="200" verticalAlign="middle" paddingLeft="8" headerHeight="22" horizontalScrollPolicy="off" borderThicknessLeft="8" borderThicknessRight="8">
          <mx:HBox>			
            <mx:Button id="resignButton" label="{Language.ac.getItemAt(_language).resign}" click="_resignAlert();"/>
			<mx:Button id="reverseButton" label="Flip" click="board.flipBoard();"/>
            <mx:Button id="impasseButton" label="{Language.ac.getItemAt(_language).impasse}" click="_showImpasse();"/>
            <mx:Button id="closeButton" label="{Language.ac.getItemAt(_language).close_game}" click="_closeGame();" enabled="false"/>           
          </mx:HBox>
          <mx:HBox>
            <mx:Button id="rewindAllButton" label="|&lt;" enabled="false" click="replayByButton(-2);"/>
            <mx:Button id="rewindOneButton" label="&lt;" enabled="false" click="replayByButton(-1);"/>    
            <mx:Button id="forwardOneButton" label=">" enabled="false" click="replayByButton(1);"/>
            <mx:Button id="forwardAllButton" label=">|" enabled="false" click="replayByButton(2);"/>
			<mx:Button label="Clear Arrows" click="_clearArrows();"/>
          </mx:HBox>
		 <mx:HBox verticalAlign="middle">
			<mx:Label text="{Language.ac.getItemAt(_language).chat}"/>
			<mx:Button id="greetButton" icon="@Embed('images/icon_greet.png')" toolTip="Greet" click="_greetMenu();"/>
		 </mx:HBox>
		 <mx:TextInput id="chatMessage2" width="300"/>
		 <mx:HBox>
			<mx:CheckBox id="autoScrollCheck2" label="{Language.ac.getItemAt(_language).auto_scroll}" selected="true" click="_change_auto_scroll2();" />
			<mx:Button id="optionButton2" icon="@Embed('images/icon_gear.png')" toolTip="{Language.ac.getItemAt(_language).options}" click="_showOptions();"/>
			<mx:CheckBox id="muteCheck2" paddingRight="-8" toolTip="{Language.ac.getItemAt(_language).mute}" click="_mute(muteCheck2.selected)"/>
			<mx:Image source="@Embed('images/icon_mute.png')" click="_mute(!muteCheck2.selected)" toolTip="{Language.ac.getItemAt(_language).mute}"/>
			<mx:Button id="checkLobbyButton" label="{Language.ac.getItemAt(_language).check_lobby}" enabled="true" click="_checkLobby();" />
		</mx:HBox>
        </mx:Panel>
      </mx:HBox>
      </mx:VBox>
        <mx:Panel id="sidePanel" title="Side Panel" width="176" height="680" headerHeight="22" horizontalScrollPolicy="off" borderThicknessLeft="8" borderThicknessRight="8">
		  <mx:HBox paddingBottom="-2">
			<mx:Label id="watcherListTitle" text="{Language.ac.getItemAt(_language).watchers}" fontWeight="bold" paddingRight="0" />
			<mx:Button id="refreshWatchersButton" icon="@Embed('images/icon_refresh.png')" toolTip="{Language.ac.getItemAt(_language).refresh}" fontSize="9" click="_refresh();"/>
		  </mx:HBox>
		  <mx:VDividedBox dividerRelease="kifuDataGrid.callLater(_scrollDownKifu);" liveDragging="true">
			<mx:DataGrid id="watcherListGrid" width="160" height="152" rowHeight="20" headerHeight="21" doubleClickEnabled="true" doubleClick="_openPlayerInfo(_findPlayerFromList(watcherListGrid.selectedItem.name));" paddingTop="0" paddingBottom="0" verticalAlign="middle">
			 <mx:columns>
			  <mx:DataGridColumn dataField="name" headerText="{Language.ac.getItemAt(_language).name}" width="80" paddingLeft="2" sortCompareFunction="_sortName" />
			  <mx:DataGridColumn dataField="country3" headerText="{Language.ac.getItemAt(_language).country_short}" width="40" paddingLeft="2" textAlign="center" showDataTips="true" dataTipField="country" />
			  <mx:DataGridColumn dataField="rate" headerText="{Language.ac.getItemAt(_language).rate}" width="40" paddingRight="3" textAlign="right" sortCompareFunction="_sortRate" sortDescending="true" />
			 </mx:columns>
			</mx:DataGrid>
			<mx:VBox height="428">
				<mx:HBox paddingBottom="-2">
					<mx:Label text="{Language.ac.getItemAt(_language).kifu}" fontWeight="bold"/>
					<mx:Button id="kifuCopyButton" icon="@Embed('images/icon_copy.png')" toolTip="{Language.ac.getItemAt(_language).copy}" click="System.setClipboard(_formatKIF());"/>
					<mx:Button id="kifuSaveButton" icon="@Embed('images/icon_save.png')" toolTip="{Language.ac.getItemAt(_language).save}" click="_saveKIF();" />
				</mx:HBox>
				<mx:DataGrid id="kifuDataGrid" sortableColumns="false" width="160" height="100%" change="kifuListSelected();" selectable="false" fontSize="10" rowHeight="20">
				 <mx:columns>
				  <mx:DataGridColumn headerText="No." dataField="num" width="35" textAlign="right" paddingRight="5" />
				  <mx:DataGridColumn dataField="move"/>
				 </mx:columns>
				</mx:DataGrid>
			</mx:VBox>
		  </mx:VDividedBox>
		  <mx:HBox paddingTop="-3">
				<mx:RadioButtonGroup id="RadioGroupKifu" change="_toggleListen();" />
				<mx:RadioButton id="radioKifuReplay" groupName="RadioGroupKifu" label="{Language.ac.getItemAt(_language).replay}" />
				<mx:RadioButton id="radioKifuListen" groupName="RadioGroupKifu" label="{Language.ac.getItemAt(_language).listen}"/>
		  </mx:HBox>
        </mx:Panel>
	</mx:HBox>
	</mx:Panel>
    </mx:HBox>
<!-- =============================================================
                  VIEWSTACK INDEX = 3
================================================================== -->
	<mx:VBox paddingLeft="10" paddingTop="10">
    <mx:Panel id="searchPanel" title="{Language.ac.getItemAt(_language).search_panel}" paddingLeft="10" paddingTop="10" paddingBottom="10" paddingRight="10">
	  <mx:HBox>
		<mx:Accordion id="searchAccordion" width="780" height="560" selectedIndex="2">
			<mx:HBox label="{Language.ac.getItemAt(_language).kifu_search}" paddingTop="8" paddingLeft="8" width="800" height="530">
				<mx:VBox>
					<mx:HBox>
						<mx:Button id="searchKifuButton" icon="@Embed('images/icon_search.png')" toolTip="{Language.ac.getItemAt(_language).search}" click="_sendKifuSearch();" />
						<mx:Button id="shareKifuButton" label="Share" click="_shareKifu();" fontSize="11" />
						<mx:Button label="{Language.ac.getItemAt(_language).close_search}" click="mainViewStack.selectedIndex=1;" fontSize="11" />
					</mx:HBox>
					<mx:HBox>
						<mx:Label text="{Language.ac.getItemAt(_language).name}"/>
						<mx:TextInput id="kifuSearchPlayerText" width="90" />
					</mx:HBox>
					<mx:Label text="From"/>
					<mx:DateChooser id="kifuSearchFromChooser" showToday="false" />
					<mx:Label text="To"/>
					<mx:DateChooser id="kifuSearchToChooser" showToday="false" />
				</mx:VBox>
				<mx:DataGrid id="kifuSearchGrid" width="575" height="470" rowHeight="21" headerHeight="21" doubleClickEnabled="true" doubleClick="_kifuSearchSelected();" paddingTop="0" paddingBottom="0" verticalAlign="middle">
					<mx:columns>
					<mx:DataGridColumn dataField="winner" headerText="{Language.ac.getItemAt(_language).result}" width="45" textAlign="center" paddingLeft="0" />
					<mx:DataGridColumn dataField="black" headerText="{Language.ac.getItemAt(_language).black}" width="80" paddingLeft="2" />
					<mx:DataGridColumn dataField="white" headerText="{Language.ac.getItemAt(_language).white}" width="80" paddingLeft="2" />
					<mx:DataGridColumn dataField="rule" headerText="{Language.ac.getItemAt(_language).rule}" width="110" paddingLeft="2" />
					<mx:DataGridColumn dataField="opening" headerText="{Language.ac.getItemAt(_language).opening}" width="120" paddingLeft="2" />
					<mx:DataGridColumn dataField="moves" headerText="{Language.ac.getItemAt(_language).moves}" width="45" textAlign="center" paddingLeft="0" />
					<mx:DataGridColumn dataField="date" headerText="{Language.ac.getItemAt(_language).game_date}"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:HBox>
			<mx:VBox label="{Language.ac.getItemAt(_language).player_search}" paddingTop="10" paddingLeft="10" width="800" height="530">
				<mx:HBox>
					<mx:Label text="{Language.ac.getItemAt(_language).name}"/>
					<mx:TextInput id="playerSearchNameText"/>
					<mx:Button id="searchPlayerButton" icon="@Embed('images/icon_search.png')" toolTip="{Language.ac.getItemAt(_language).search}" click="_sendPlayerSearch();" />
					<mx:Button label="{Language.ac.getItemAt(_language).close_search}" click="mainViewStack.selectedIndex=1;" fontSize="11" />
				</mx:HBox>
				<mx:DataGrid id="playerSearchGrid" width="755" height="440" rowHeight="21">
					<mx:columns>
					<mx:DataGridColumn dataField="title" headerText="{Language.ac.getItemAt(_language).title}" width="50" textAlign="center" paddingLeft="0" />
					<mx:DataGridColumn dataField="rank" headerText="{Language.ac.getItemAt(_language).rank}" width="45" textAlign="center" paddingLeft="0" />
					<mx:DataGridColumn dataField="login" headerText="{Language.ac.getItemAt(_language).name}" width="95" />
					<mx:DataGridColumn dataField="flagURL" headerText="" paddingLeft="0" paddingRight="0" itemRenderer="mx.controls.Image" width="27" resizable="false" />
					<mx:DataGridColumn dataField="country" headerText="{Language.ac.getItemAt(_language).country}" width="80" />
					<mx:DataGridColumn dataField="rate" headerText="{Language.ac.getItemAt(_language).rate}" width="50" textAlign="right" paddingRight="5" />
					<mx:DataGridColumn dataField="wins" headerText="{Language.ac.getItemAt(_language).win}" width="43" textAlign="right" paddingRight="5" />
					<mx:DataGridColumn dataField="losses" headerText="{Language.ac.getItemAt(_language).loss}" width="43" textAlign="right" paddingRight="5" />
					<mx:DataGridColumn dataField="total" headerText="{Language.ac.getItemAt(_language).total}" width="43" textAlign="right" paddingRight="5" />
					<mx:DataGridColumn dataField="percentage" headerText="{Language.ac.getItemAt(_language).percentage_short}" width="50" textAlign="right" paddingRight="5" />
					<mx:DataGridColumn dataField="streak_best" headerText="{Language.ac.getItemAt(_language).streak_short}" width="50" textAlign="right" paddingRight="5" />
					<mx:DataGridColumn dataField="created_at" headerText="{Language.ac.getItemAt(_language).signed_up}" width="90" />
					<mx:DataGridColumn dataField="updated_at" headerText="{Language.ac.getItemAt(_language).last_updated}"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:VBox>
			<mx:HBox label="{Language.ac.getItemAt(_language).view_rankings}" horizontalAlign="center" paddingTop="10" paddingLeft="10" width="700" height="530">
				<mx:VBox horizontalAlign="center" paddingRight="20">
					<mx:SWFLoader id="rankingFlagLoader" width="56" height="44"/>
					<mx:Button id="searchRankingButton" icon="@Embed('images/icon_search.png')" toolTip="{Language.ac.getItemAt(_language).search}" click="_sendRankingSearch();" />
					<mx:Button label="{Language.ac.getItemAt(_language).close_search}" click="mainViewStack.selectedIndex=1;" fontSize="11" />
				</mx:VBox>
				<mx:TabNavigator id="rankingTabNavigator" paddingTop="8" paddingLeft="8" width="580" height="480" change="_rankingTabChange();">
					<mx:VBox label="{Language.ac.getItemAt(_language).rate}">
						<mx:DataGrid id="rateRankingGrid" width="550" height="440" rowHeight="21" sortableColumns="false">
							<mx:columns>
							<mx:DataGridColumn dataField="number" headerText="No." width="28" textAlign="center" />
							<mx:DataGridColumn dataField="rate" headerText="{Language.ac.getItemAt(_language).rate}" width="55" textAlign="right" paddingRight="5" fontWeight="bold" fontSize="12" />
							<mx:DataGridColumn dataField="login" headerText="{Language.ac.getItemAt(_language).name}" width="100" />
							<mx:DataGridColumn dataField="flagURL" headerText="" paddingLeft="0" paddingRight="0" itemRenderer="mx.controls.Image" width="27" resizable="false" />
							<mx:DataGridColumn dataField="country" headerText="{Language.ac.getItemAt(_language).country}" width="80" />
							<mx:DataGridColumn dataField="title" headerText="{Language.ac.getItemAt(_language).title}" width="55" textAlign="center" paddingLeft="0" />
							<mx:DataGridColumn dataField="rank" headerText="{Language.ac.getItemAt(_language).rank}" width="45" textAlign="center" paddingLeft="0" />
							<mx:DataGridColumn dataField="wins" headerText="{Language.ac.getItemAt(_language).win}" width="45" textAlign="right" paddingRight="5" />
							<mx:DataGridColumn dataField="losses" headerText="{Language.ac.getItemAt(_language).loss}" width="45" textAlign="right" paddingRight="5" />
							<mx:DataGridColumn dataField="percentage" headerText="{Language.ac.getItemAt(_language).percentage_short}" textAlign="right" paddingRight="5" />
							</mx:columns>
						</mx:DataGrid>
					</mx:VBox>
					<mx:VBox label="{Language.ac.getItemAt(_language).streak}">
						<mx:DataGrid id="streakRankingGrid" width="550" height="440" rowHeight="21" sortableColumns="false">
							<mx:columns>
							<mx:DataGridColumn dataField="number" headerText="No." width="28" textAlign="center" />
							<mx:DataGridColumn dataField="streak_best" headerText="{Language.ac.getItemAt(_language).streak_short}" width="55" textAlign="right" paddingRight="5" fontWeight="bold" fontSize="12" />
							<mx:DataGridColumn dataField="login" headerText="{Language.ac.getItemAt(_language).name}" width="100" />
							<mx:DataGridColumn dataField="flagURL" headerText="" paddingLeft="0" paddingRight="0" itemRenderer="mx.controls.Image" width="27" resizable="false" />
							<mx:DataGridColumn dataField="country" headerText="{Language.ac.getItemAt(_language).country}" width="80" />
							<mx:DataGridColumn dataField="title" headerText="{Language.ac.getItemAt(_language).title}" width="55" textAlign="center" paddingLeft="0" />
							<mx:DataGridColumn dataField="rank" headerText="{Language.ac.getItemAt(_language).rank}" width="45" textAlign="center" paddingLeft="0" />
							<mx:DataGridColumn dataField="wins" headerText="{Language.ac.getItemAt(_language).win}" width="45" textAlign="right" paddingRight="5" />
							<mx:DataGridColumn dataField="losses" headerText="{Language.ac.getItemAt(_language).loss}" width="45" textAlign="right" paddingRight="5" />
							<mx:DataGridColumn dataField="rate" headerText="{Language.ac.getItemAt(_language).rate}" textAlign="right" paddingRight="5"/>
							</mx:columns>
						</mx:DataGrid>
					</mx:VBox>
					<mx:VBox label="{Language.ac.getItemAt(_language).percentage}">
						<mx:DataGrid id="percentageRankingGrid" width="550" height="440" rowHeight="21" sortableColumns="false">
							<mx:columns>
							<mx:DataGridColumn dataField="number" headerText="No." width="28" textAlign="center" />
							<mx:DataGridColumn dataField="percentage" headerText="{Language.ac.getItemAt(_language).percentage_short}" width="55" textAlign="right" paddingRight="5" fontWeight="bold" fontSize="12" />
							<mx:DataGridColumn dataField="login" headerText="{Language.ac.getItemAt(_language).name}" width="100" />
							<mx:DataGridColumn dataField="flagURL" headerText="" paddingLeft="0" paddingRight="0" itemRenderer="mx.controls.Image" width="27" resizable="false" />
							<mx:DataGridColumn dataField="country" headerText="{Language.ac.getItemAt(_language).country}" width="80" />
							<mx:DataGridColumn dataField="title" headerText="{Language.ac.getItemAt(_language).title}" width="55" textAlign="center" paddingLeft="0" />
							<mx:DataGridColumn dataField="rank" headerText="{Language.ac.getItemAt(_language).rank}" width="45" textAlign="center" paddingLeft="0" />
							<mx:DataGridColumn dataField="wins" headerText="{Language.ac.getItemAt(_language).win}" width="45" textAlign="right" paddingRight="5" />
							<mx:DataGridColumn dataField="losses" headerText="{Language.ac.getItemAt(_language).loss}" width="45" textAlign="right" paddingRight="5" />
							<mx:DataGridColumn dataField="rate" headerText="{Language.ac.getItemAt(_language).rate}" textAlign="right" paddingRight="5"/>
							</mx:columns>
						</mx:DataGrid>
					</mx:VBox>
					<mx:VBox label="{Language.ac.getItemAt(_language).wins}">
						<mx:DataGrid id="winRankingGrid" width="550" height="440" rowHeight="21" sortableColumns="false">
							<mx:columns>
							<mx:DataGridColumn dataField="number" headerText="No." width="28" textAlign="center" />
							<mx:DataGridColumn dataField="wins" headerText="{Language.ac.getItemAt(_language).win}" width="55" textAlign="right" paddingRight="5" fontWeight="bold" fontSize="12" />
							<mx:DataGridColumn dataField="login" headerText="{Language.ac.getItemAt(_language).name}" width="100" />
							<mx:DataGridColumn dataField="flagURL" headerText="" paddingLeft="0" paddingRight="0" itemRenderer="mx.controls.Image" width="27" resizable="false" />
							<mx:DataGridColumn dataField="country" headerText="{Language.ac.getItemAt(_language).country}" width="80" />
							<mx:DataGridColumn dataField="title" headerText="{Language.ac.getItemAt(_language).title}" width="55" textAlign="center" paddingLeft="0" />
							<mx:DataGridColumn dataField="rank" headerText="{Language.ac.getItemAt(_language).rank}" width="45" textAlign="center" paddingLeft="0" />
							<mx:DataGridColumn dataField="total" headerText="{Language.ac.getItemAt(_language).total}" width="45" textAlign="right" paddingRight="5" />
							<mx:DataGridColumn dataField="percentage" headerText="{Language.ac.getItemAt(_language).percentage_short}" width="45" paddingRight="5" textAlign="right" />
							<mx:DataGridColumn dataField="rate" headerText="{Language.ac.getItemAt(_language).rate}" textAlign="right" paddingRight="5"/>
							</mx:columns>
						</mx:DataGrid>
					</mx:VBox>
					<mx:VBox label="{Language.ac.getItemAt(_language).total_games}">
						<mx:DataGrid id="totalRankingGrid" width="550" height="440" rowHeight="21" sortableColumns="false">
							<mx:columns>
							<mx:DataGridColumn dataField="number" headerText="No." width="28" textAlign="center" />
							<mx:DataGridColumn dataField="total" headerText="{Language.ac.getItemAt(_language).total}" width="55" textAlign="right" paddingRight="5" fontWeight="bold" fontSize="12" />
							<mx:DataGridColumn dataField="login" headerText="{Language.ac.getItemAt(_language).name}" width="100" />
							<mx:DataGridColumn dataField="flagURL" headerText="" paddingLeft="0" paddingRight="0" itemRenderer="mx.controls.Image" width="27" resizable="false" />
							<mx:DataGridColumn dataField="country" headerText="{Language.ac.getItemAt(_language).country}" width="80" />
							<mx:DataGridColumn dataField="title" headerText="{Language.ac.getItemAt(_language).title}" width="55" textAlign="center" paddingLeft="0" />
							<mx:DataGridColumn dataField="rank" headerText="{Language.ac.getItemAt(_language).rank}" width="45" textAlign="center" paddingLeft="0" />
							<mx:DataGridColumn dataField="wins" headerText="{Language.ac.getItemAt(_language).win}" width="45" textAlign="right" paddingRight="5" />
							<mx:DataGridColumn dataField="losses" headerText="{Language.ac.getItemAt(_language).loss}" width="45" textAlign="right" paddingRight="5" />
							<mx:DataGridColumn dataField="rate" headerText="{Language.ac.getItemAt(_language).rate}" textAlign="right" paddingRight="5" />
							</mx:columns>
						</mx:DataGrid>
					</mx:VBox>
				</mx:TabNavigator>
			</mx:HBox>
		</mx:Accordion>
	  </mx:HBox>
    </mx:Panel>
    </mx:VBox>
  </mx:ViewStack>
</mx:Application>

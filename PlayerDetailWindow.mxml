<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:eightyOneSquare="*"  fontSize="12" horizontalScrollPolicy="off" verticalScrollPolicy="off"
					paddingLeft="5" paddingBottom="5" paddingRight="5" paddingTop="5" title="Player Detail" showCloseButton="true" close="_close();" creationPolicy="all">
	    <mx:Script>
        <![CDATA[
		  import com.google.maps.LatLng;
		  import com.google.maps.styles.FillStyle;
		  import com.google.maps.styles.StrokeStyle;
		  import flash.events.Event;
		  import flash.geom.Point;
          import mx.controls.*;
		  import mx.effects.Effect;
		  import mx.effects.Move;
          import mx.managers.PopUpManager;
		  
		  import com.google.maps.LatLng;
		  import com.google.maps.Map;
		  import com.google.maps.MapEvent;
		  import com.google.maps.MapType;
		  import com.google.maps.overlays.Marker;
		  import com.google.maps.overlays.MarkerOptions;

		  [Bindable]
		  public var login:String;
		  [Bindable]
		  public var connection:String = "offline";
		  [Bindable]
		  private var _country:String = "";
		  [Bindable]
		  private var _country_code:String = "";
		  [Bindable]
		  private var _updated:String = "";
		  [Bindable]
		  private var _joined:String = "";
		  [Bindable]
		  private var _rating:int = 0;
		  [Bindable]
		  private var _maxRating:int = 0;
		  [Bindable]
		  private var _rank:String = "";
		  [Bindable]
		  public var avatar:String = null;
		  [Bindable]
		  public var mainTitle:String = "none";
		  [Bindable]
		  public var subTitle:String = "無し";
		  [Bindable]
		  private var _wins:int = 0;
		  [Bindable]
		  private var _losses:int = 0;
		  [Bindable]
		  private var _wins34:int = 0;
		  [Bindable]
		  private var _losses34:int = 0;
		  [Bindable]
		  private var _exp:int = 0;
		  [Bindable]
		  private var _rank34:String = "";
		  [Bindable]
		  private var _percentage:Number = 0;
		  [Bindable]
		  private var _percentage34:Number = 0;
		  [Bindable]
		  private var _streak:int = 0;
		  [Bindable]
		  private var _streak_best:int = 0;
		  [Bindable]
		  private var _pr:String = "";

		  private const IMAGE_DIRECTORY:String = "http://81dojo.com/dojo/images/";
		  private var _mapLoaded:Boolean = false;
		  private var _detailLoaded:Boolean = false;
		  private var _countryMapInfo:String;
		  private var _ratings:Array = new Array();
		  private var _openingData:Object = new Object();
		  
		  private const opening_names:Array = ["double_wing","side_pawn","yagura","bishop_exchange","opposition_static","opposing_rook","3rd_file_rook","4th_file_rook","central_rook","double_ranging","unknown","*"];
		  private const group_names:Array = ["side_and_wing","side_and_wing","yagura_and_bishop","yagura_and_bishop","opposition_static","opposition_ranging","opposition_ranging","opposition_ranging","opposition_ranging","double_ranging","unknown","*"];
		  
		  public function loadPlayerDetail(player:Object):void {
			  _detailLoaded = true;
			  _country_code = String(InfoFetcher.country_codes[parseInt(player["country-id"]) - 1] + 1000).substring(1);
			  _country = InfoFetcher.country_names[InfoFetcher.country_codes[parseInt(player["country-id"]) - 1]];
			  _countryMapInfo = InfoFetcher.country_maps[parseInt(player["country-id"]) - 1]
			  _joined = player["created-at"];
			  _joined = _joined.substr(0, 10);
			  _updated = player["updated-at"];
			  _updated = _updated.substr(0, 10);
			  _pr = player.pr;
			  _pr = _pr.replace(/\r\n/g, "\n");
			  if (_pr.match(/^\[object/)) _pr = "";
			  _rating = player.rate;
			  _maxRating = player["max-rate"];
			  _rank = InfoFetcher.makeRankFromRating(_rating);
			  _wins = player.wins;
			  _losses = player.losses;
			  if (_wins + _losses < 10) _rank = "-";
			  _wins34 = player.wins34;
			  _losses34 = player.losses34;
			  _streak = player.streak;
			  _streak_best = player["streak-best"];
			  _exp = _wins34 * 3 + _losses34;
			  _rank34 = InfoFetcher.makeRank34FromExp(_exp);
			  _percentage = (_wins + _losses == 0) ? 0 : (_wins / (_wins + _losses)*100);
			  _percentage34 = (_wins34 + _losses34 == 0) ? 0 : (_wins34 / (_wins34 + _losses34) * 100);
			  if (_mapLoaded) _drawMap();
		  }

          private function _close():void {
			dispatchEvent(new Event("close_window"));
            PopUpManager.removePopUp(this);
          }
		  
		  private function _onMapReady(event:MapEvent):void {
			_mapLoaded = true;
			if (_detailLoaded) _drawMap();
		  }
		  
		  private function _drawMap():void {
			  if (_countryMapInfo == null) {
				  map.setCenter(new LatLng(0, 0), 1, MapType.NORMAL_MAP_TYPE);
			  } else if (_countryMapInfo && _countryMapInfo == "*") {
				  map.setCenter(new LatLng(0, 0), 1, MapType.NORMAL_MAP_TYPE);
			  } else {
				  var tokens:Array = _countryMapInfo.split(",");
				  map.setCenter(new LatLng(tokens[0], tokens[1]), tokens[2], MapType.PHYSICAL_MAP_TYPE);
				  map.enableScrollWheelZoom();
				   var marker:Marker = new Marker(
					   new LatLng(tokens[3],tokens[4]),
					   new MarkerOptions({ fillStyle: new FillStyle({color: 0x00ff00}), radius: 5, tooltip: tokens[5], strokeStyle: new StrokeStyle({thickness: 1.5, color: 0x008800})}));
				   map.addOverlay(marker);
			  }
		  }
		  
		  public function showHistory(histories:Array):void {
			  var n:int = 0;
			  for (var i:int = histories.length - 1; i >= 0; i--) {
				  n++;
				  _ratings.push(new Point(n, Math.abs(histories[i].change)));
			  }
			  ratePlot2D.loadData(_ratings);
////////////////////
			for (i = 0; i < opening_names.length; i++) _openingData[opening_names[i]] = _openingDatum(group_names[i]);
			var match:Array;
			var openingName:String;
			for each (var history:Object in histories){
				if ((match = history.opening.match(/^opposition_(black|white)(\d)$/))) {
					if (history.sente && match[1] == "white" || !history.sente && match[1] == "black") {
						openingName = "opposition_static";
					} else {
						switch (parseInt(match[2])) {
							case 2:
								openingName = "opposing_rook"; break;
							case 3:
								openingName = "3rd_file_rook"; break;
							case 4:
								openingName = "4th_file_rook"; break;
							case 5:
								openingName = "central_rook";
						}
					}
				} else {
					openingName = history.opening
				}
				if (parseInt(history.change) > 0) {
					if (history.sente) _openingData[openingName].black_wins += 1;
					else _openingData[openingName].white_wins += 1;
				} else {
					if (history.sente) _openingData[openingName].black_losses += 1;
					else _openingData[openingName].white_losses += 1;
				}
			}
			openingPieChart.loadData(_pieDataArray());
/////////////////////////////
			openingRadarChart.loadData(_radarDataArray());
/////////////////////////////
			dataGrid1.dataProvider = _gridDataArray(["yagura", "bishop_exchange", "double_wing", "side_pawn", "opposition_static", "blank", "total"]);
			dataGrid2.dataProvider = _gridDataArray(["central_rook","4th_file_rook","3rd_file_rook","opposing_rook","double_ranging", "blank", "total","blank","unknown"]);
		  }

			private function _pieDataArray():Array{
				var arr:Array = new Array();
				for each (var str:String in InfoFetcher.pie_chart_order) {
					var datum:Object = new Object();
					datum.name = str;
					datum.black = _openingData[str].black_wins + _openingData[str].black_losses;
					datum.white = _openingData[str].white_wins + _openingData[str].white_losses;
					datum.color = InfoFetcher.infoOpeningColor(str);
					datum.group = _openingData[str].group;
					arr.push(datum);
				}
				return arr;
			}

			private function _radarDataArray():Array{
				var arr:Array = new Array();
				for each (var str:String in InfoFetcher.radar_chart_order) arr.push(_openingDatum(str));
				for (var i:int = 0; i < opening_names.length; i++) {
					if (group_names[i] == "*") continue;
					var j:int = InfoFetcher.radar_chart_order.indexOf(group_names[i]);
					arr[j].black_wins += _openingData[opening_names[i]].black_wins
					arr[j].black_losses += _openingData[opening_names[i]].black_losses
					arr[j].white_wins += _openingData[opening_names[i]].white_wins
					arr[j].white_losses += _openingData[opening_names[i]].white_losses
				}
				return arr;
			}
			
			private function _gridDataArray(orderArray:Array):Array{
				var arr:Array = new Array();
				var doSum:Boolean = true;
				var black_wins_sum:int = 0;
				var black_losses_sum:int = 0;
				var white_wins_sum:int = 0;
				var white_losses_sum:int = 0;
				for each (var str:String in orderArray) {
					if (str == "blank") {
						var datum:Object = new Object();
						datum.tip = "";
					} else if (str == "total") {
						datum = new Object();
						datum.name = parentApplication.lan.total;
						datum.tip = ""
						datum.black_wins = black_wins_sum;
						datum.black_losses = black_losses_sum;
						datum.black_total = datum.black_wins + datum.black_losses;
						datum.black_percent = datum.black_total == 0 ? 0 : (datum.black_wins / datum.black_total * 100).toFixed(0);
						datum.white_wins = white_wins_sum;
						datum.white_losses = white_losses_sum;
						datum.white_total = datum.white_wins + datum.white_losses;
						datum.white_percent = datum.white_total == 0 ? 0 : (datum.white_wins / datum.white_total * 100).toFixed(0);
						datum.wins = datum.black_wins + datum.white_wins;
						datum.losses = datum.black_losses + datum.white_losses;
						datum.total = datum.wins + datum.losses;
						datum.percent = datum.total == 0 ? 0 : (datum.wins / datum.total * 100).toFixed(0);
						doSum = false;
					} else {
						datum = new Object();
						datum.name = InfoFetcher.openingNameJp(str);
						datum.tip = InfoFetcher.openingNameEn(str);
						datum.black_wins = _openingData[str].black_wins;
						if (doSum) black_wins_sum += datum.black_wins;
						datum.black_losses = _openingData[str].black_losses;
						if (doSum) black_losses_sum += datum.black_losses;
						datum.black_total = datum.black_wins + datum.black_losses;
						datum.black_percent = datum.black_total == 0 ? 0 : (datum.black_wins / datum.black_total * 100).toFixed(0);
						datum.white_wins = _openingData[str].white_wins;
						if (doSum) white_wins_sum += datum.white_wins;
						datum.white_losses = _openingData[str].white_losses;
						if (doSum) white_losses_sum += datum.white_losses;
						datum.white_total = datum.white_wins + datum.white_losses;
						datum.white_percent = datum.white_total == 0 ? 0 : (datum.white_wins / datum.white_total * 100).toFixed(0);
						datum.wins = datum.black_wins + datum.white_wins;
						datum.losses = datum.black_losses + datum.white_losses;
						datum.total = datum.wins + datum.losses;
						datum.percent = datum.total == 0 ? 0 : (datum.wins / datum.total * 100).toFixed(0);
					}
					arr.push(datum);
				}
				return arr;
			}
				
			private function _openingDatum(group:String):Object {
				var obj:Object = new Object();
				obj.black_wins = 0;
				obj.black_losses = 0;
				obj.white_wins = 0;
				obj.white_losses = 0;
				obj.group = group;
				return obj;
			}

        ]]>
    </mx:Script>
	
	<mx:HBox>
		<mx:VBox width="150" height="190" horizontalScrollPolicy="off" verticalScrollPolicy="off" borderStyle="solid">
			<mx:Canvas id="avatarCanvas" width="133" height="133">
				<mx:Image width="128" height="128"  source="{IMAGE_DIRECTORY}avatars/{(avatar ? avatar : _rank)}.jpg" x="5" y="5" />
			</mx:Canvas>
			<mx:Label text="{login}" fontSize="15" fontWeight="bold" />
			<mx:HBox>
				<mx:Image width="27" height="17"  source="{IMAGE_DIRECTORY}flags_s/{_country_code}.gif"/>
				<mx:Label text="{_country}"/>
			</mx:HBox>
		</mx:VBox>
		<mx:VBox>
			<mx:Label text="Status: {connection}"/>
			<mx:Label text="Joined on: {_joined}"/>
			<mx:Label text="Updated on: {_updated}" />
			<mx:Label text="PR:"/>
			<mx:Spacer height="-15"/>
			<mx:TextArea width="220" height="95" text="{_pr}" fontSize="10" editable="false" />
		</mx:VBox>

<maps:Map xmlns:maps="com.google.maps.*" id="map" mapevent_mapready="_onMapReady(event)" width="280" height="190"
key="ABQIAAAA3ixmRh8intDkiLxI7stEWBT5yFy9Ond2P01B_VeTE9wFqTX3wxROJ3RmY17ZpxD6yiabjGLW6ebu0g" sensor="false" />
<!--
		<mx:Canvas width="280" height="190" borderStyle="solid" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:Image source="{IMAGE_DIRECTORY}test/mapSample.jpg"/>
		</mx:Canvas> -->
	</mx:HBox>
	
	<mx:HBox>
		<mx:VBox borderStyle="solid">
			<mx:HBox>
				<mx:Label text="Shogi" fontWeight="bold" fontSize="13" />
				<mx:Spacer width="20"/>
				<mx:Button label="Tendencies" click="resultViewStack.selectedIndex = 0;" fontSize="10" />
				<mx:Button label="Winning %" click="resultViewStack.selectedIndex = 1;" fontSize="10"/>
				<mx:Button label="Rate History" click="resultViewStack.selectedIndex = 2;" fontSize="10"/>
				<mx:Button label="Data Table" click="resultViewStack.selectedIndex = resultViewStack.selectedIndex == 3 ? 4 : 3;" fontSize="10"/>
			</mx:HBox>
			<mx:HBox>
				<mx:ViewStack id="resultViewStack" width="400" height="220">
					<eightyOneSquare:OpeningPieChart id="openingPieChart" width="400" height="220" horizontalScrollPolicy="off" verticalScrollPolicy="off" />
					<eightyOneSquare:OpeningRadarChart id="openingRadarChart" width="400" height="220" horizontalScrollPolicy="off" verticalScrollPolicy="off" />
					<mx:Canvas width="400" height="220" horizontalScrollPolicy="off" verticalScrollPolicy="off">
						<eightyOneSquare:Plot2D id="ratePlot2D" width="400" height="220"/>
					</mx:Canvas>
					<mx:HBox width="400" height="220" horizontalAlign="center">
						<mx:AdvancedDataGrid id="dataGrid1" width="400" height="215" sortableColumns="false" sortExpertMode="true" fontSize="10" textAlign="right" paddingLeft="0" paddingTop="0" rowHeight="19">
							<mx:groupedColumns>
								<mx:AdvancedDataGridColumn headerText="Openings" width="76" dataField="name" textAlign="center" showDataTips="true" dataTipField="tip" />
								<mx:AdvancedDataGridColumnGroup headerText="{parentApplication.lan.total}">
									<mx:AdvancedDataGridColumn width="27" headerText="W" dataField="wins" paddingLeft="2"/>
									<mx:AdvancedDataGridColumn width="27" headerText="L" dataField="losses" paddingLeft="2"/>
									<mx:AdvancedDataGridColumn width="27" headerText="T" dataField="total" paddingLeft="2"/>
									<mx:AdvancedDataGridColumn width="27" headerText="%" dataField="percent" paddingLeft="2" />
								</mx:AdvancedDataGridColumnGroup>
								<mx:AdvancedDataGridColumnGroup headerText="{parentApplication.lan.black}">
									<mx:AdvancedDataGridColumn width="27" headerText="W" dataField="black_wins" paddingLeft="2"/>
									<mx:AdvancedDataGridColumn width="27" headerText="L" dataField="black_losses" paddingLeft="2"/>
									<mx:AdvancedDataGridColumn width="27" headerText="T" dataField="black_total" paddingLeft="2"/>
									<mx:AdvancedDataGridColumn width="27" headerText="%" dataField="black_percent" paddingLeft="2" />
								</mx:AdvancedDataGridColumnGroup>
								<mx:AdvancedDataGridColumnGroup headerText="{parentApplication.lan.white}">
									<mx:AdvancedDataGridColumn width="27" headerText="W" dataField="white_wins" />
									<mx:AdvancedDataGridColumn width="27" headerText="L" dataField="white_losses" paddingLeft="2"/>
									<mx:AdvancedDataGridColumn width="27" headerText="T" dataField="white_total" paddingLeft="2"/>
									<mx:AdvancedDataGridColumn width="27" headerText="%" dataField="white_percent" paddingLeft="2"/>
								</mx:AdvancedDataGridColumnGroup>
							</mx:groupedColumns>
						</mx:AdvancedDataGrid>
					</mx:HBox>
					<mx:HBox width="400" height="220" horizontalAlign="center">
						<mx:AdvancedDataGrid id="dataGrid2" width="400" height="215" sortableColumns="false" sortExpertMode="true" fontSize="10" textAlign="right" paddingLeft="0" paddingTop="0" rowHeight="19" verticalScrollPolicy="off">
							<mx:groupedColumns>
								<mx:AdvancedDataGridColumn headerText="Openings" width="76" dataField="name" textAlign="center" showDataTips="true" dataTipField="tip" />
								<mx:AdvancedDataGridColumnGroup headerText="{parentApplication.lan.total}">
									<mx:AdvancedDataGridColumn width="27" headerText="W" dataField="wins" paddingLeft="2"/>
									<mx:AdvancedDataGridColumn width="27" headerText="L" dataField="losses" paddingLeft="2"/>
									<mx:AdvancedDataGridColumn width="27" headerText="T" dataField="total" paddingLeft="2"/>
									<mx:AdvancedDataGridColumn width="27" headerText="%" dataField="percent" paddingLeft="2" />
								</mx:AdvancedDataGridColumnGroup>
								<mx:AdvancedDataGridColumnGroup headerText="{parentApplication.lan.black}">
									<mx:AdvancedDataGridColumn width="27" headerText="W" dataField="black_wins" paddingLeft="2"/>
									<mx:AdvancedDataGridColumn width="27" headerText="L" dataField="black_losses" paddingLeft="2"/>
									<mx:AdvancedDataGridColumn width="27" headerText="T" dataField="black_total" paddingLeft="2"/>
									<mx:AdvancedDataGridColumn width="27" headerText="%" dataField="black_percent" paddingLeft="2" />
								</mx:AdvancedDataGridColumnGroup>
								<mx:AdvancedDataGridColumnGroup headerText="{parentApplication.lan.white}">
									<mx:AdvancedDataGridColumn width="27" headerText="W" dataField="white_wins" />
									<mx:AdvancedDataGridColumn width="27" headerText="L" dataField="white_losses" paddingLeft="2"/>
									<mx:AdvancedDataGridColumn width="27" headerText="T" dataField="white_total" paddingLeft="2"/>
									<mx:AdvancedDataGridColumn width="27" headerText="%" dataField="white_percent" paddingLeft="2"/>
								</mx:AdvancedDataGridColumnGroup>
							</mx:groupedColumns>
						</mx:AdvancedDataGrid>
					</mx:HBox>
				</mx:ViewStack>
				<mx:VBox width="125" verticalGap="3">
<!--					<mx:Label text="{_title}" toolTip="{_subTitle}" /> -->
					<mx:Label text="{_rank}"/>
					<mx:Label text="R: {_rating}"/>
					<mx:Label text="  (max:    )"/>
					<mx:Label text="Win: {_wins}"/>
					<mx:Label text="Loss: {_losses}"/>
					<mx:Label text="  (Total: {_wins + _losses})"/>
					<mx:Label text="  ({_percentage.toFixed(1)}% win)"/>
					<mx:Label text="Streak: {_streak_best}"/>
				</mx:VBox>
			</mx:HBox>
		</mx:VBox>
		<mx:VBox borderStyle="solid" width="125" height="250" verticalGap="3">
			<mx:Label text="3X4" fontWeight="bold" fontSize="13" />
			<mx:Canvas id="avatar34Canvas" width="85" height="80">
				<mx:Image width="80" height="80"  source="{IMAGE_DIRECTORY}avatars34/{_rank34}.jpg" x="5" />
			</mx:Canvas>
			<mx:Label text="{_rank34}"/>
			<mx:Label text="EXP: {_exp}"/>
			<mx:Label text="Win: {_wins34}"/>
			<mx:Label text="Loss: {_losses34}"/>
			<mx:Label text="  (Total: {_wins34 + _losses34})"/>
			<mx:Label text="  ({_percentage34.toFixed(1)}% win)"/>
		</mx:VBox>
	</mx:HBox>

</mx:TitleWindow>